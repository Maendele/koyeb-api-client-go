/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// UserAccountStatus the model 'UserAccountStatus'
type UserAccountStatus string

// List of User.AccountStatus
const (
	USERACCOUNTSTATUS_WARNING UserAccountStatus = "WARNING"
	USERACCOUNTSTATUS_LOCKED UserAccountStatus = "LOCKED"
	USERACCOUNTSTATUS_ACTIVE UserAccountStatus = "ACTIVE"
)

var allowedUserAccountStatusEnumValues = []UserAccountStatus{
	"WARNING",
	"LOCKED",
	"ACTIVE",
}

func (v *UserAccountStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserAccountStatus(value)
	for _, existing := range allowedUserAccountStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserAccountStatus", value)
}

// NewUserAccountStatusFromValue returns a pointer to a valid UserAccountStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserAccountStatusFromValue(v string) (*UserAccountStatus, error) {
	ev := UserAccountStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserAccountStatus: valid values are %v", v, allowedUserAccountStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserAccountStatus) IsValid() bool {
	for _, existing := range allowedUserAccountStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to User.AccountStatus value
func (v UserAccountStatus) Ptr() *UserAccountStatus {
	return &v
}

type NullableUserAccountStatus struct {
	value *UserAccountStatus
	isSet bool
}

func (v NullableUserAccountStatus) Get() *UserAccountStatus {
	return v.value
}

func (v *NullableUserAccountStatus) Set(val *UserAccountStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAccountStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAccountStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAccountStatus(val *UserAccountStatus) *NullableUserAccountStatus {
	return &NullableUserAccountStatus{value: val, isSet: true}
}

func (v NullableUserAccountStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAccountStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

