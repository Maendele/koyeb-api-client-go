/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// ServiceRevisionStateStatus the model 'ServiceRevisionStateStatus'
type ServiceRevisionStateStatus string

// List of ServiceRevisionState.Status
const (
	SERVICEREVISIONSTATESTATUS_UNKNOWN ServiceRevisionStateStatus = "UNKNOWN"
	SERVICEREVISIONSTATESTATUS_STARTING ServiceRevisionStateStatus = "STARTING"
	SERVICEREVISIONSTATESTATUS_ACTIVE ServiceRevisionStateStatus = "ACTIVE"
	SERVICEREVISIONSTATESTATUS_STOPPING ServiceRevisionStateStatus = "STOPPING"
	SERVICEREVISIONSTATESTATUS_STOPPED ServiceRevisionStateStatus = "STOPPED"
	SERVICEREVISIONSTATESTATUS_FAILED ServiceRevisionStateStatus = "FAILED"
	SERVICEREVISIONSTATESTATUS_BUILDING ServiceRevisionStateStatus = "BUILDING"
	SERVICEREVISIONSTATESTATUS_TERMINATED ServiceRevisionStateStatus = "TERMINATED"
)

var allowedServiceRevisionStateStatusEnumValues = []ServiceRevisionStateStatus{
	"UNKNOWN",
	"STARTING",
	"ACTIVE",
	"STOPPING",
	"STOPPED",
	"FAILED",
	"BUILDING",
	"TERMINATED",
}

func (v *ServiceRevisionStateStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceRevisionStateStatus(value)
	for _, existing := range allowedServiceRevisionStateStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceRevisionStateStatus", value)
}

// NewServiceRevisionStateStatusFromValue returns a pointer to a valid ServiceRevisionStateStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceRevisionStateStatusFromValue(v string) (*ServiceRevisionStateStatus, error) {
	ev := ServiceRevisionStateStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceRevisionStateStatus: valid values are %v", v, allowedServiceRevisionStateStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceRevisionStateStatus) IsValid() bool {
	for _, existing := range allowedServiceRevisionStateStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceRevisionState.Status value
func (v ServiceRevisionStateStatus) Ptr() *ServiceRevisionStateStatus {
	return &v
}

type NullableServiceRevisionStateStatus struct {
	value *ServiceRevisionStateStatus
	isSet bool
}

func (v NullableServiceRevisionStateStatus) Get() *ServiceRevisionStateStatus {
	return v.value
}

func (v *NullableServiceRevisionStateStatus) Set(val *ServiceRevisionStateStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceRevisionStateStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceRevisionStateStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceRevisionStateStatus(val *ServiceRevisionStateStatus) *NullableServiceRevisionStateStatus {
	return &NullableServiceRevisionStateStatus{value: val, isSet: true}
}

func (v NullableServiceRevisionStateStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceRevisionStateStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

