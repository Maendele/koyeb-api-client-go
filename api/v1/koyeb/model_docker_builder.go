/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// DockerBuilder struct for DockerBuilder
type DockerBuilder struct {
	Dockerfile *string `json:"dockerfile,omitempty"`
	Entrypoint []string `json:"entrypoint,omitempty"`
	Command *string `json:"command,omitempty"`
	Args []string `json:"args,omitempty"`
	Target *string `json:"target,omitempty"`
	Privileged *bool `json:"privileged,omitempty"`
}

// NewDockerBuilder instantiates a new DockerBuilder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDockerBuilder() *DockerBuilder {
	this := DockerBuilder{}
	return &this
}

// NewDockerBuilderWithDefaults instantiates a new DockerBuilder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDockerBuilderWithDefaults() *DockerBuilder {
	this := DockerBuilder{}
	return &this
}

// GetDockerfile returns the Dockerfile field value if set, zero value otherwise.
func (o *DockerBuilder) GetDockerfile() string {
	if o == nil || isNil(o.Dockerfile) {
		var ret string
		return ret
	}
	return *o.Dockerfile
}

// GetDockerfileOk returns a tuple with the Dockerfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerBuilder) GetDockerfileOk() (*string, bool) {
	if o == nil || isNil(o.Dockerfile) {
    return nil, false
	}
	return o.Dockerfile, true
}

// HasDockerfile returns a boolean if a field has been set.
func (o *DockerBuilder) HasDockerfile() bool {
	if o != nil && !isNil(o.Dockerfile) {
		return true
	}

	return false
}

// SetDockerfile gets a reference to the given string and assigns it to the Dockerfile field.
func (o *DockerBuilder) SetDockerfile(v string) {
	o.Dockerfile = &v
}

// GetEntrypoint returns the Entrypoint field value if set, zero value otherwise.
func (o *DockerBuilder) GetEntrypoint() []string {
	if o == nil || isNil(o.Entrypoint) {
		var ret []string
		return ret
	}
	return o.Entrypoint
}

// GetEntrypointOk returns a tuple with the Entrypoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerBuilder) GetEntrypointOk() ([]string, bool) {
	if o == nil || isNil(o.Entrypoint) {
    return nil, false
	}
	return o.Entrypoint, true
}

// HasEntrypoint returns a boolean if a field has been set.
func (o *DockerBuilder) HasEntrypoint() bool {
	if o != nil && !isNil(o.Entrypoint) {
		return true
	}

	return false
}

// SetEntrypoint gets a reference to the given []string and assigns it to the Entrypoint field.
func (o *DockerBuilder) SetEntrypoint(v []string) {
	o.Entrypoint = v
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *DockerBuilder) GetCommand() string {
	if o == nil || isNil(o.Command) {
		var ret string
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerBuilder) GetCommandOk() (*string, bool) {
	if o == nil || isNil(o.Command) {
    return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *DockerBuilder) HasCommand() bool {
	if o != nil && !isNil(o.Command) {
		return true
	}

	return false
}

// SetCommand gets a reference to the given string and assigns it to the Command field.
func (o *DockerBuilder) SetCommand(v string) {
	o.Command = &v
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *DockerBuilder) GetArgs() []string {
	if o == nil || isNil(o.Args) {
		var ret []string
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerBuilder) GetArgsOk() ([]string, bool) {
	if o == nil || isNil(o.Args) {
    return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *DockerBuilder) HasArgs() bool {
	if o != nil && !isNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []string and assigns it to the Args field.
func (o *DockerBuilder) SetArgs(v []string) {
	o.Args = v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *DockerBuilder) GetTarget() string {
	if o == nil || isNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerBuilder) GetTargetOk() (*string, bool) {
	if o == nil || isNil(o.Target) {
    return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *DockerBuilder) HasTarget() bool {
	if o != nil && !isNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *DockerBuilder) SetTarget(v string) {
	o.Target = &v
}

// GetPrivileged returns the Privileged field value if set, zero value otherwise.
func (o *DockerBuilder) GetPrivileged() bool {
	if o == nil || isNil(o.Privileged) {
		var ret bool
		return ret
	}
	return *o.Privileged
}

// GetPrivilegedOk returns a tuple with the Privileged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerBuilder) GetPrivilegedOk() (*bool, bool) {
	if o == nil || isNil(o.Privileged) {
    return nil, false
	}
	return o.Privileged, true
}

// HasPrivileged returns a boolean if a field has been set.
func (o *DockerBuilder) HasPrivileged() bool {
	if o != nil && !isNil(o.Privileged) {
		return true
	}

	return false
}

// SetPrivileged gets a reference to the given bool and assigns it to the Privileged field.
func (o *DockerBuilder) SetPrivileged(v bool) {
	o.Privileged = &v
}

func (o DockerBuilder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Dockerfile) {
		toSerialize["dockerfile"] = o.Dockerfile
	}
	if !isNil(o.Entrypoint) {
		toSerialize["entrypoint"] = o.Entrypoint
	}
	if !isNil(o.Command) {
		toSerialize["command"] = o.Command
	}
	if !isNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	if !isNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !isNil(o.Privileged) {
		toSerialize["privileged"] = o.Privileged
	}
	return json.Marshal(toSerialize)
}

type NullableDockerBuilder struct {
	value *DockerBuilder
	isSet bool
}

func (v NullableDockerBuilder) Get() *DockerBuilder {
	return v.value
}

func (v *NullableDockerBuilder) Set(val *DockerBuilder) {
	v.value = val
	v.isSet = true
}

func (v NullableDockerBuilder) IsSet() bool {
	return v.isSet
}

func (v *NullableDockerBuilder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDockerBuilder(val *DockerBuilder) *NullableDockerBuilder {
	return &NullableDockerBuilder{value: val, isSet: true}
}

func (v NullableDockerBuilder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDockerBuilder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


