/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// UpdateDomainReply struct for UpdateDomainReply
type UpdateDomainReply struct {
	Domain *Domain `json:"domain,omitempty"`
}

// NewUpdateDomainReply instantiates a new UpdateDomainReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDomainReply() *UpdateDomainReply {
	this := UpdateDomainReply{}
	return &this
}

// NewUpdateDomainReplyWithDefaults instantiates a new UpdateDomainReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDomainReplyWithDefaults() *UpdateDomainReply {
	this := UpdateDomainReply{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *UpdateDomainReply) GetDomain() Domain {
	if o == nil || o.Domain == nil {
		var ret Domain
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDomainReply) GetDomainOk() (*Domain, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *UpdateDomainReply) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given Domain and assigns it to the Domain field.
func (o *UpdateDomainReply) SetDomain(v Domain) {
	o.Domain = &v
}

func (o UpdateDomainReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateDomainReply struct {
	value *UpdateDomainReply
	isSet bool
}

func (v NullableUpdateDomainReply) Get() *UpdateDomainReply {
	return v.value
}

func (v *NullableUpdateDomainReply) Set(val *UpdateDomainReply) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDomainReply) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDomainReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDomainReply(val *UpdateDomainReply) *NullableUpdateDomainReply {
	return &NullableUpdateDomainReply{value: val, isSet: true}
}

func (v NullableUpdateDomainReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDomainReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


