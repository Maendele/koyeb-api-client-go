/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// NeonPostgresDatabase struct for NeonPostgresDatabase
type NeonPostgresDatabase struct {
	PgVersion *int64 `json:"pg_version,omitempty"`
	Region *string `json:"region,omitempty"`
	InstanceType *string `json:"instance_type,omitempty"`
	Roles []NeonPostgresDatabaseNeonRole `json:"roles,omitempty"`
	Databases []NeonPostgresDatabaseNeonDatabase `json:"databases,omitempty"`
}

// NewNeonPostgresDatabase instantiates a new NeonPostgresDatabase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNeonPostgresDatabase() *NeonPostgresDatabase {
	this := NeonPostgresDatabase{}
	return &this
}

// NewNeonPostgresDatabaseWithDefaults instantiates a new NeonPostgresDatabase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNeonPostgresDatabaseWithDefaults() *NeonPostgresDatabase {
	this := NeonPostgresDatabase{}
	return &this
}

// GetPgVersion returns the PgVersion field value if set, zero value otherwise.
func (o *NeonPostgresDatabase) GetPgVersion() int64 {
	if o == nil || isNil(o.PgVersion) {
		var ret int64
		return ret
	}
	return *o.PgVersion
}

// GetPgVersionOk returns a tuple with the PgVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeonPostgresDatabase) GetPgVersionOk() (*int64, bool) {
	if o == nil || isNil(o.PgVersion) {
    return nil, false
	}
	return o.PgVersion, true
}

// HasPgVersion returns a boolean if a field has been set.
func (o *NeonPostgresDatabase) HasPgVersion() bool {
	if o != nil && !isNil(o.PgVersion) {
		return true
	}

	return false
}

// SetPgVersion gets a reference to the given int64 and assigns it to the PgVersion field.
func (o *NeonPostgresDatabase) SetPgVersion(v int64) {
	o.PgVersion = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *NeonPostgresDatabase) GetRegion() string {
	if o == nil || isNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeonPostgresDatabase) GetRegionOk() (*string, bool) {
	if o == nil || isNil(o.Region) {
    return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *NeonPostgresDatabase) HasRegion() bool {
	if o != nil && !isNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *NeonPostgresDatabase) SetRegion(v string) {
	o.Region = &v
}

// GetInstanceType returns the InstanceType field value if set, zero value otherwise.
func (o *NeonPostgresDatabase) GetInstanceType() string {
	if o == nil || isNil(o.InstanceType) {
		var ret string
		return ret
	}
	return *o.InstanceType
}

// GetInstanceTypeOk returns a tuple with the InstanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeonPostgresDatabase) GetInstanceTypeOk() (*string, bool) {
	if o == nil || isNil(o.InstanceType) {
    return nil, false
	}
	return o.InstanceType, true
}

// HasInstanceType returns a boolean if a field has been set.
func (o *NeonPostgresDatabase) HasInstanceType() bool {
	if o != nil && !isNil(o.InstanceType) {
		return true
	}

	return false
}

// SetInstanceType gets a reference to the given string and assigns it to the InstanceType field.
func (o *NeonPostgresDatabase) SetInstanceType(v string) {
	o.InstanceType = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *NeonPostgresDatabase) GetRoles() []NeonPostgresDatabaseNeonRole {
	if o == nil || isNil(o.Roles) {
		var ret []NeonPostgresDatabaseNeonRole
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeonPostgresDatabase) GetRolesOk() ([]NeonPostgresDatabaseNeonRole, bool) {
	if o == nil || isNil(o.Roles) {
    return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *NeonPostgresDatabase) HasRoles() bool {
	if o != nil && !isNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []NeonPostgresDatabaseNeonRole and assigns it to the Roles field.
func (o *NeonPostgresDatabase) SetRoles(v []NeonPostgresDatabaseNeonRole) {
	o.Roles = v
}

// GetDatabases returns the Databases field value if set, zero value otherwise.
func (o *NeonPostgresDatabase) GetDatabases() []NeonPostgresDatabaseNeonDatabase {
	if o == nil || isNil(o.Databases) {
		var ret []NeonPostgresDatabaseNeonDatabase
		return ret
	}
	return o.Databases
}

// GetDatabasesOk returns a tuple with the Databases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeonPostgresDatabase) GetDatabasesOk() ([]NeonPostgresDatabaseNeonDatabase, bool) {
	if o == nil || isNil(o.Databases) {
    return nil, false
	}
	return o.Databases, true
}

// HasDatabases returns a boolean if a field has been set.
func (o *NeonPostgresDatabase) HasDatabases() bool {
	if o != nil && !isNil(o.Databases) {
		return true
	}

	return false
}

// SetDatabases gets a reference to the given []NeonPostgresDatabaseNeonDatabase and assigns it to the Databases field.
func (o *NeonPostgresDatabase) SetDatabases(v []NeonPostgresDatabaseNeonDatabase) {
	o.Databases = v
}

func (o NeonPostgresDatabase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.PgVersion) {
		toSerialize["pg_version"] = o.PgVersion
	}
	if !isNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !isNil(o.InstanceType) {
		toSerialize["instance_type"] = o.InstanceType
	}
	if !isNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !isNil(o.Databases) {
		toSerialize["databases"] = o.Databases
	}
	return json.Marshal(toSerialize)
}

type NullableNeonPostgresDatabase struct {
	value *NeonPostgresDatabase
	isSet bool
}

func (v NullableNeonPostgresDatabase) Get() *NeonPostgresDatabase {
	return v.value
}

func (v *NullableNeonPostgresDatabase) Set(val *NeonPostgresDatabase) {
	v.value = val
	v.isSet = true
}

func (v NullableNeonPostgresDatabase) IsSet() bool {
	return v.isSet
}

func (v *NullableNeonPostgresDatabase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNeonPostgresDatabase(val *NeonPostgresDatabase) *NullableNeonPostgresDatabase {
	return &NullableNeonPostgresDatabase{value: val, isSet: true}
}

func (v NullableNeonPostgresDatabase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNeonPostgresDatabase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


