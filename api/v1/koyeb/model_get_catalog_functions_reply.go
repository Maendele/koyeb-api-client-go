/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// GetCatalogFunctionsReply struct for GetCatalogFunctionsReply
type GetCatalogFunctionsReply struct {
	CatalogFunction *CatalogFunction `json:"catalog_function,omitempty"`
	Versions *[]string `json:"versions,omitempty"`
}

// NewGetCatalogFunctionsReply instantiates a new GetCatalogFunctionsReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCatalogFunctionsReply() *GetCatalogFunctionsReply {
	this := GetCatalogFunctionsReply{}
	return &this
}

// NewGetCatalogFunctionsReplyWithDefaults instantiates a new GetCatalogFunctionsReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCatalogFunctionsReplyWithDefaults() *GetCatalogFunctionsReply {
	this := GetCatalogFunctionsReply{}
	return &this
}

// GetCatalogFunction returns the CatalogFunction field value if set, zero value otherwise.
func (o *GetCatalogFunctionsReply) GetCatalogFunction() CatalogFunction {
	if o == nil || o.CatalogFunction == nil {
		var ret CatalogFunction
		return ret
	}
	return *o.CatalogFunction
}

// GetCatalogFunctionOk returns a tuple with the CatalogFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCatalogFunctionsReply) GetCatalogFunctionOk() (*CatalogFunction, bool) {
	if o == nil || o.CatalogFunction == nil {
		return nil, false
	}
	return o.CatalogFunction, true
}

// HasCatalogFunction returns a boolean if a field has been set.
func (o *GetCatalogFunctionsReply) HasCatalogFunction() bool {
	if o != nil && o.CatalogFunction != nil {
		return true
	}

	return false
}

// SetCatalogFunction gets a reference to the given CatalogFunction and assigns it to the CatalogFunction field.
func (o *GetCatalogFunctionsReply) SetCatalogFunction(v CatalogFunction) {
	o.CatalogFunction = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *GetCatalogFunctionsReply) GetVersions() []string {
	if o == nil || o.Versions == nil {
		var ret []string
		return ret
	}
	return *o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCatalogFunctionsReply) GetVersionsOk() (*[]string, bool) {
	if o == nil || o.Versions == nil {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *GetCatalogFunctionsReply) HasVersions() bool {
	if o != nil && o.Versions != nil {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []string and assigns it to the Versions field.
func (o *GetCatalogFunctionsReply) SetVersions(v []string) {
	o.Versions = &v
}

func (o GetCatalogFunctionsReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CatalogFunction != nil {
		toSerialize["catalog_function"] = o.CatalogFunction
	}
	if o.Versions != nil {
		toSerialize["versions"] = o.Versions
	}
	return json.Marshal(toSerialize)
}

type NullableGetCatalogFunctionsReply struct {
	value *GetCatalogFunctionsReply
	isSet bool
}

func (v NullableGetCatalogFunctionsReply) Get() *GetCatalogFunctionsReply {
	return v.value
}

func (v *NullableGetCatalogFunctionsReply) Set(val *GetCatalogFunctionsReply) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCatalogFunctionsReply) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCatalogFunctionsReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCatalogFunctionsReply(val *GetCatalogFunctionsReply) *NullableGetCatalogFunctionsReply {
	return &NullableGetCatalogFunctionsReply{value: val, isSet: true}
}

func (v NullableGetCatalogFunctionsReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCatalogFunctionsReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


