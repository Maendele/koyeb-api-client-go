/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// ParameterParameterType the model 'ParameterParameterType'
type ParameterParameterType string

// List of Parameter.ParameterType
const (
	PARAMETERPARAMETERTYPE_STRING ParameterParameterType = "STRING"
	PARAMETERPARAMETERTYPE_NUMBER ParameterParameterType = "NUMBER"
	PARAMETERPARAMETERTYPE_BOOLEAN ParameterParameterType = "BOOLEAN"
	PARAMETERPARAMETERTYPE_LIST ParameterParameterType = "LIST"
	PARAMETERPARAMETERTYPE_STRUCT ParameterParameterType = "STRUCT"
)

var allowedParameterParameterTypeEnumValues = []ParameterParameterType{
	"STRING",
	"NUMBER",
	"BOOLEAN",
	"LIST",
	"STRUCT",
}

func (v *ParameterParameterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ParameterParameterType(value)
	for _, existing := range allowedParameterParameterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ParameterParameterType", value)
}

// NewParameterParameterTypeFromValue returns a pointer to a valid ParameterParameterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewParameterParameterTypeFromValue(v string) (*ParameterParameterType, error) {
	ev := ParameterParameterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ParameterParameterType: valid values are %v", v, allowedParameterParameterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ParameterParameterType) IsValid() bool {
	for _, existing := range allowedParameterParameterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Parameter.ParameterType value
func (v ParameterParameterType) Ptr() *ParameterParameterType {
	return &v
}

type NullableParameterParameterType struct {
	value *ParameterParameterType
	isSet bool
}

func (v NullableParameterParameterType) Get() *ParameterParameterType {
	return v.value
}

func (v *NullableParameterParameterType) Set(val *ParameterParameterType) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterParameterType) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterParameterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterParameterType(val *ParameterParameterType) *NullableParameterParameterType {
	return &NullableParameterParameterType{value: val, isSet: true}
}

func (v NullableParameterParameterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterParameterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

