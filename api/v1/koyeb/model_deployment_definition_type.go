/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// DeploymentDefinitionType the model 'DeploymentDefinitionType'
type DeploymentDefinitionType string

// List of DeploymentDefinition.Type
const (
	DEPLOYMENTDEFINITIONTYPE_INVALID DeploymentDefinitionType = "INVALID"
	DEPLOYMENTDEFINITIONTYPE_WEB DeploymentDefinitionType = "WEB"
	DEPLOYMENTDEFINITIONTYPE_WORKER DeploymentDefinitionType = "WORKER"
	DEPLOYMENTDEFINITIONTYPE_DATABASE DeploymentDefinitionType = "DATABASE"
)

// All allowed values of DeploymentDefinitionType enum
var AllowedDeploymentDefinitionTypeEnumValues = []DeploymentDefinitionType{
	"INVALID",
	"WEB",
	"WORKER",
	"DATABASE",
}

func (v *DeploymentDefinitionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeploymentDefinitionType(value)
	for _, existing := range AllowedDeploymentDefinitionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeploymentDefinitionType", value)
}

// NewDeploymentDefinitionTypeFromValue returns a pointer to a valid DeploymentDefinitionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeploymentDefinitionTypeFromValue(v string) (*DeploymentDefinitionType, error) {
	ev := DeploymentDefinitionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeploymentDefinitionType: valid values are %v", v, AllowedDeploymentDefinitionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeploymentDefinitionType) IsValid() bool {
	for _, existing := range AllowedDeploymentDefinitionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeploymentDefinition.Type value
func (v DeploymentDefinitionType) Ptr() *DeploymentDefinitionType {
	return &v
}

type NullableDeploymentDefinitionType struct {
	value *DeploymentDefinitionType
	isSet bool
}

func (v NullableDeploymentDefinitionType) Get() *DeploymentDefinitionType {
	return v.value
}

func (v *NullableDeploymentDefinitionType) Set(val *DeploymentDefinitionType) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentDefinitionType) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentDefinitionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentDefinitionType(val *DeploymentDefinitionType) *NullableDeploymentDefinitionType {
	return &NullableDeploymentDefinitionType{value: val, isSet: true}
}

func (v NullableDeploymentDefinitionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentDefinitionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

