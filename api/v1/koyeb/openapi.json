{
  "swagger": "2.0",
  "info": {
    "title": "Koyeb Rest API",
    "description": "The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests.\n",
    "version": "1.0.0"
  },
  "host": "app.koyeb.com",
  "schemes": [
    "https"
  ],
  "security": [
    {
      "Bearer": []
    }
  ],
  "tags": [
    {
      "name": "intro",
      "x-displayName": "Introduction",
      "x-traitTag": true,
      "description": "Welcome to the Koyeb API documentation.\n\nThe Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests.\nThe API has predictable resource-oriented URLs, allowing you to request, retrieve and execute actions on resources efficiently.\n\nThe API returns JSON-encoded responses and uses standard HTTP response codes, and verbs.\n\nAll of the functionality available in the Koyeb Control Panel is also available via the API, allowing you to automate repetitive and complex actions as required.\n\nAll production API requests are made to:\n\n- https://app.koyeb.com/<version>\n\nAll data is sent and received as JSON.\n\n## Constructing Requests\n\nRequests are made of three components:\n\n- Base URL: `https://app.koyeb.com`\n- API Version: `v1`\n- Resource path: `apps`\n\nTo construct a proper request, you need to format the URL as follows:\n\n`https://app.koyeb.com/{version}/{resource}`\n\nExample: `https://app.koyeb.com/v1/apps`\n\nThe following code is an example request to retrieve the list of Apps.\n\n```\n%curl -H 'Authorization: Bearer 1111-1111-1111-1111-1111' https://app.koyeb.com/v1/apps\n{\n  \"apps\": [\n    {\n      \"id\": \"e267e09d-a2ef-4672-95c7-bf88d787a274\",\n      \"name\": \"demo\",\n      \"organization_id\": \"c402bcad-d06d-4fd6-8af2-08b790c0e249\",\n      \"updated_at\": \"2021-04-26T08:28:59.221274Z\",\n      \"created_at\": \"2021-04-26T08:28:59.221274Z\",\n      \"domains\": [\n        {\n          \"name\": \"demo-koyeb.koyeb.app\",\n          \"deployment_group\": \"prod\"\n        }\n      ]\n    },\n    {\n      \"id\": \"e38caea5-5acb-4fec-aa65-81749546b470\",\n      \"name\": \"www\",\n      \"organization_id\": \"c402bcad-d06d-4fd6-8af2-08b790c0e249\",\n      \"updated_at\": \"2021-05-04T08:56:40.557792Z\",\n      \"created_at\": \"2021-05-04T08:56:40.557792Z\",\n      \"domains\": [\n        {\n          \"name\": \"www-koyeb.koyeb.app\",\n          \"deployment_group\": \"prod\"\n        }\n      ]\n    }\n  ],\n  \"limit\": 20,\n  \"offset\": 0,\n  \"count\": 2\n}\n```\n\n# Authentication\n\nThe Koyeb API uses API keys to authenticate requests. You can view and manage your API keys in the Koyeb Control Panel.\n\nYour API keys carry many privileges. Take care to keep them secure! Do not share your secret API keys in publicly accessible areas such as GitHub, Slack, client-side code, and so forth.\n\nTo make an authenticated request, include a bearer-type Authorization header containing your API key.\n\nAll API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.\n\n# Errors\n\nWe use conventional HTTP response codes to indicate the success or failure of an API request.\n\nIn general, codes in the 2xx range indicate success, codes in the 4xx range indicate an error that resulted from the provided information (e.g., a required parameter is missing, resource not found), and codes in the 5xx range indicate an error with our servers.\n\n## HTTP Status Code Summary\n\n- `200 OK` - Everything worked as expected.\n- `400 Bad Request` - Often missing a required parameter.\n- `401 Unauthorized` - No valid API key provided.\n- `402 Request Failed` - Parameters were valid, but the request failed.\n- `403 Forbidden` - Insufficient privileges to access the requested resource.\n- `404 Not Found` - The requested item doesn't exist.\n- `50x` Server errors - Something went wrong on the API domain's end.\n\nInput and output data must be valid JSON with the appropriate Content-Type header set.\n\n## Attributes\n\n- code:\n\n  - `invalid_argument`: Occur when your request has invalid parameters.\n  - `unknown_resource`: Occur when the resource doesn't exist.\n  - `authentication_error`: Arise when there is a problem with authentication.\n  - `rate_limit_error`: Too many requests hit the API too quickly.\n  - `authorization_required`: You don't have sufficient right to access the resource.\n  - `api_error`: API errors use in case of a problem with api domain's servers (extremely uncommon).\n\n- message:\n\n  - A human-readable error giving more details about the error\n\n- status:\n\n  - The HTTP code returned by the server.\n\n- fields (Optional):\n\n  - An array of parameters with a human-readable message giving more details about the error.\n\n## Errors responses example\n\nResponse 400 (application/json)\n\n```\n{\n  \"status\": 400,\n  \"code\": \"invalid_argument\",\n  \"message\": \"Invalid argument\",\n  \"fields\": [\n    {\n      \"field\": \"definition.docker.image\",\n      \"description\": \"cannot be blank\"\n    }\n  ]\n}\n```\n\nResponse 401 (application/json)\n\n```\n{\n  \"status\": 401,\n  \"code\": \"authentication_error\",\n  \"message\": \"Request unauthenticated with bearer\"\n}\n```\n\nResponse 403 (application/json)\n\n```\n{\n  \"status\": 403,\n  \"code\": \"authentication_required\",\n  \"message\": \"You don't have the requested permission to access to resource.\"\n}\n```\n\n\nResponse 404 (application/json)\n\n```\n{\n  \"status\": 404,\n  \"code\": \"unknown_resource\",\n  \"message\": \"App not found\"\n}\n```\n\n# Pagination\n\nAll top-level API resources receive a paginated response. For instance, list Apps, list Services, and others share a standard structure, taking two parameters: limit and offset.\n\n**Paginated request**\n\nRequests against paginated endpoints accept two query string arguments:\n\n* *limit*, a positive integer lower or equal to 100 to select the number of items to display.\n* *offset*, an integer to indicate the position to start at.\n\nPaginated endpoints usually also accept filters to search and sort results.\nThese filters are documented along with each endpoint documentation.\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Introduction",
      "tags": [
        "intro"
      ]
    },
    {
      "name": "API",
      "tags": [
        "profile",
        "organization",
        "credentials",
        "Secrets",
        "activity",
        "Catalog",
        "stack",
        "Functions",
        "logs",
        "store",
        "S3Credentials",
        "Connectors",
        "Apps",
        "Services",
        "Regions",
        "Instances"
      ]
    }
  ],
  "paths": {
    "/v1/apps/{app_id_or_name}/services/{service_id_or_name}/revisions/{revision_id}/instances/{instance_id}/logs/{stream}/tail": {
      "get": {
        "operationId": "TailInstanceLogs",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/LogEntry"
                },
                "error": {
                  "$ref": "#/definitions/google.rpc.Status"
                }
              },
              "title": "Stream result of LogEntry"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "service_id_or_name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "revision_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "stream",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "-1 is from the end, 0 is from the start anything else is from this offset in the file.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "logs"
        ]
      }
    },
    "/v1/regions": {
      "get": {
        "summary": "List Region",
        "operationId": "ListRegions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListRegionsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "(Optional) The number of items to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "(Optional) A filter for regions.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Regions"
        ]
      }
    },
    "/v1/regions/{id}": {
      "get": {
        "summary": "Get Region",
        "operationId": "GetRegion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetRegionReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The name of the region",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Regions"
        ]
      }
    },
    "/v1/instances": {
      "get": {
        "summary": "List Instance",
        "operationId": "ListInstances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListInstancesReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "(Optional) The number of items to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "(Optional) A filter for instances.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Instances"
        ]
      }
    },
    "/v1/instances/{id}": {
      "get": {
        "summary": "Get Instance",
        "operationId": "GetInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetInstanceReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The name of the instance",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Instances"
        ]
      }
    },
    "/v1/account/activities": {
      "get": {
        "operationId": "GetAccountActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActivityList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "activity"
        ]
      }
    },
    "/v1/account/invite": {
      "post": {
        "operationId": "CreateInvite",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InviteUserRequest"
            }
          }
        ],
        "tags": [
          "invite"
        ]
      }
    },
    "/v1/account/login": {
      "post": {
        "summary": "Login user",
        "operationId": "Login",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "tags": [
          "session"
        ]
      }
    },
    "/v1/account/logout": {
      "delete": {
        "summary": "Logout user",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LogoutReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "tags": [
          "session"
        ]
      }
    },
    "/v1/account/oauth": {
      "get": {
        "summary": "Get OAuth Providers",
        "operationId": "GetOAuthOptions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetOAuthOptionsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "action",
            "description": "Which authentication flow is being initiated.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "signin",
              "signup",
              "register"
            ],
            "default": "signin"
          },
          {
            "name": "metadata",
            "description": "A small (limited to 400 characters) string of arbitrary metadata which will be encoded in the state.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "profile"
        ]
      },
      "post": {
        "summary": "Authenticate using OAuth",
        "operationId": "OAuthCallback",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/OAuthCallbackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OAuthCallbackRequest"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/passwordless_login": {
      "post": {
        "operationId": "PasswordlessLogin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/PasswordlessLoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordlessLoginRequest"
            }
          }
        ],
        "tags": [
          "session"
        ]
      }
    },
    "/v1/account/profile": {
      "get": {
        "operationId": "GetCurrentUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "tags": [
          "profile"
        ]
      },
      "delete": {
        "operationId": "DeleteAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteAccountReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "tags": [
          "profile"
        ]
      },
      "put": {
        "operationId": "UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserRequest.UserUpdateBody"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "profile"
        ]
      },
      "patch": {
        "operationId": "UpdateUser2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserRequest.UserUpdateBody"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/refresh": {
      "put": {
        "summary": "Refresh token",
        "operationId": "RefreshToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "tags": [
          "session"
        ]
      }
    },
    "/v1/account/resend_validation": {
      "post": {
        "operationId": "ResendEmailValidation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ResendEmailValidationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResendEmailValidationRequest"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/reset_password": {
      "post": {
        "operationId": "ResetPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ResetPasswordReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPasswordRequest"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/signup": {
      "post": {
        "operationId": "Signup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAccountRequest"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/update_password": {
      "post": {
        "operationId": "UpdatePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePasswordRequest"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/validate/{id}": {
      "post": {
        "operationId": "Validate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/credentials": {
      "get": {
        "operationId": "ListCredentials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListCredentialsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "credentials"
        ]
      },
      "post": {
        "operationId": "CreateCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCredential"
            }
          }
        ],
        "tags": [
          "credentials"
        ]
      }
    },
    "/v1/credentials/{id}": {
      "get": {
        "operationId": "GetCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "credentials"
        ]
      },
      "delete": {
        "operationId": "DeleteCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "credentials"
        ]
      },
      "put": {
        "operationId": "UpdateCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "credentials"
        ]
      },
      "patch": {
        "operationId": "UpdateCredential2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "credentials"
        ]
      }
    },
    "/v1/github/installation": {
      "get": {
        "summary": "Start github installation",
        "operationId": "GithubInstallation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GithubInstallationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "metadata",
            "description": "A small (limited to 400 characters) string of arbitrary metadata which will be encoded in the state.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/github/installation/callback": {
      "post": {
        "summary": "Github callback for app installation",
        "operationId": "GithubInstallationCallback",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GithubInstallationCallbackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GithubInstallationCallbackRequest"
            }
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/github/installation/repositories": {
      "get": {
        "summary": "List Github repos of the organization",
        "operationId": "GithubInstallationRepoList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GithubInstallationRepoListReply"
            }
          },
          "400": {
            "description": "Organization is not linked to a github organization",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "": "{ \"status\": \"400\", \"code\": \"failed_precondition\", \"message\": \"No github Installation\" }"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "The page id (starting from 1): Maps to: https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "perPage",
            "description": "The number of page elements per page (max 100): Maps to: https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/organizations/{id}": {
      "get": {
        "summary": "Get organization",
        "operationId": "GetOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetOrganizationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "organization"
        ]
      },
      "put": {
        "summary": "Update organization",
        "operationId": "UpdateOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateOrganizationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "organization"
        ]
      },
      "patch": {
        "summary": "Update organization",
        "operationId": "UpdateOrganization2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateOrganizationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/sso/canny": {
      "post": {
        "operationId": "CannyAuth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CannyAuthReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CannyAuthRequest"
            }
          }
        ],
        "tags": [
          "sso"
        ]
      }
    },
    "/v1/activities": {
      "get": {
        "operationId": "ListActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActivityList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "activity"
        ]
      }
    },
    "/v1/hooks/github/payload": {
      "post": {
        "summary": "Github hook receiver",
        "description": "An implementation of github hooks. The payload is a freefrom JSON and the response will always be empty.",
        "operationId": "Github",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GithubHookReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "hooks"
        ],
        "externalDocs": {
          "description": "github documentation",
          "url": "https://developer.github.com/webhooks/"
        }
      }
    },
    "/v1/notifications": {
      "get": {
        "operationId": "ListNotifications",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/NotificationList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mark_read",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mark_seen",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "unread",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "unseen",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "activity"
        ]
      }
    },
    "/v1/apps/{app_id_or_name}/services": {
      "get": {
        "summary": "List Service",
        "operationId": "ListServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListServicesReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "(Optional) The number of items to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "(Optional) A filter for regions.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Services"
        ]
      },
      "post": {
        "summary": "Create Service",
        "operationId": "CreateService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateServiceReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "description": "The id or the name of the App",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateService"
            }
          },
          {
            "name": "dry_run",
            "description": "If set only run validation.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/apps/{app_id_or_name}/services/{id_or_name}": {
      "get": {
        "summary": "Get Service",
        "operationId": "GetService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetServiceReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "description": "The id or the name of the App",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id_or_name",
            "description": "The id or the name of the Service",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Services"
        ]
      },
      "delete": {
        "summary": "Delete Service",
        "operationId": "DeleteService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteServiceReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "description": "The id or the name of the App",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id_or_name",
            "description": "The id or the name of the entity to delete",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Services"
        ]
      },
      "put": {
        "summary": "Update Service",
        "operationId": "UpdateService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateServiceReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "description": "The id or the name of the App",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id_or_name",
            "description": "The id or the name of the entity to update",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateService"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dry_run",
            "description": "If set only run validation.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Services"
        ]
      },
      "patch": {
        "summary": "Update Service",
        "operationId": "UpdateService2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateServiceReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "description": "The id or the name of the App",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id_or_name",
            "description": "The id or the name of the entity to update",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateService"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dry_run",
            "description": "If set only run validation.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/apps/{app_id_or_name}/services/{id_or_name}/redeploy": {
      "post": {
        "operationId": "ReDeploy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/RedeployReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id_or_name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RedeployRequest.Info"
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/apps/{app_id_or_name}/services/{id_or_name}/revisions": {
      "get": {
        "summary": "List Revisions",
        "operationId": "ListRevisions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListServiceRevisionsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id_or_name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "(Optional) The number of items to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statuses",
            "description": "(Optional) Statuses to filter on.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNKNOWN",
                "STARTING",
                "ACTIVE",
                "STOPPING",
                "STOPPED",
                "FAILED",
                "BUILDING",
                "TERMINATED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "deployment_groups",
            "description": "(Optional) Only fetch revisions in this deployment group.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/apps/{app_id_or_name}/services/{id_or_name}/revisions/{id}": {
      "get": {
        "summary": "Get Revision",
        "operationId": "GetRevision",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetServiceRevisionReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "description": "The id or the name of the app",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id_or_name",
            "description": "The id or the name of the service",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "The id of the revision to fetch or `_latest` to get the latest one",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/apps": {
      "get": {
        "summary": "List App",
        "operationId": "ListApps",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListAppsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "(Optional) The number of items to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "(Optional) A filter for regions.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      },
      "post": {
        "summary": "Create App",
        "operationId": "CreateApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateAppReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateApp"
            }
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v1/apps/{id_or_name}": {
      "get": {
        "summary": "Get App",
        "operationId": "GetApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetAppReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id_or_name",
            "description": "The id or the name of the App",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      },
      "delete": {
        "summary": "Delete App",
        "operationId": "DeleteApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteAppReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id_or_name",
            "description": "The id or the name of the entity to delete",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      },
      "put": {
        "summary": "Update App",
        "operationId": "UpdateApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateAppReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id_or_name",
            "description": "The id or the name of the entity to update",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      },
      "patch": {
        "summary": "Update App",
        "operationId": "UpdateApp2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateAppReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id_or_name",
            "description": "The id or the name of the entity to update",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateApp"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v1/secrets": {
      "get": {
        "operationId": "ListSecrets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListSecretsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      },
      "post": {
        "operationId": "CreateSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSecret"
            }
          }
        ],
        "tags": [
          "Secrets"
        ]
      }
    },
    "/v1/secrets/{id}": {
      "get": {
        "operationId": "GetSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      },
      "delete": {
        "operationId": "DeleteSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      },
      "put": {
        "operationId": "UpdateSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      },
      "patch": {
        "operationId": "UpdateSecret2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      }
    },
    "/v1/secrets/{id}/activities": {
      "get": {
        "summary": "View stack activities",
        "operationId": "GetSecretActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActivityList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      }
    }
  },
  "definitions": {
    "google.protobuf.Any": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "google.rpc.Status": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/google.protobuf.Any"
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ErrorField": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "ErrorWithFields": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorField"
          }
        }
      }
    },
    "LogEntry": {
      "type": "object",
      "properties": {
        "revision_id": {
          "type": "string",
          "title": "TODO improve with offset return / resume"
        },
        "instance_id": {
          "type": "string"
        },
        "stream": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "offset": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetRegionReply": {
      "type": "object",
      "properties": {
        "region": {
          "$ref": "#/definitions/Region",
          "title": "The Region retrieved"
        }
      }
    },
    "ListRegionsReply": {
      "type": "object",
      "properties": {
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegionListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "Region": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the region"
        },
        "name": {
          "type": "string",
          "title": "The name of the region"
        },
        "coordinates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The coordinates of the region (lat/long)"
        },
        "status": {
          "type": "string",
          "title": "The status of the region"
        },
        "instances": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of instances available in this region"
        },
        "datacenters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of datacenters available in this region"
        }
      }
    },
    "RegionListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the region"
        },
        "name": {
          "type": "string",
          "title": "The name of the region"
        },
        "coordinates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The coordinates of the region (lat/long)"
        },
        "status": {
          "type": "string",
          "title": "The status of the region"
        },
        "instances": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of instances available in this region"
        },
        "datacenters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of datacenters available in this region"
        }
      }
    },
    "GetInstanceReply": {
      "type": "object",
      "properties": {
        "instance": {
          "$ref": "#/definitions/Instance",
          "title": "The instance retrieved"
        }
      }
    },
    "Instance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The name of the instance"
        },
        "description": {
          "type": "string",
          "title": "A short description of the instance"
        },
        "vcpu": {
          "type": "integer",
          "format": "int64",
          "title": "The number of cpus"
        },
        "memory": {
          "type": "string",
          "title": "The memory in bytes in a format like 5MB"
        },
        "disk": {
          "type": "string",
          "title": "The size of the disk in bytes in a format like 5MB"
        },
        "price_hourly": {
          "type": "string",
          "title": "The price to pay per hour"
        },
        "price_monthly": {
          "type": "string",
          "title": "The price to pay per month"
        },
        "regions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The regions where this instance type is available"
        },
        "status": {
          "type": "string",
          "title": "The status of the instance"
        }
      }
    },
    "InstanceListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The name of the instance"
        },
        "description": {
          "type": "string",
          "title": "A short description of the instance"
        },
        "vcpu": {
          "type": "integer",
          "format": "int64",
          "title": "The number of cpus"
        },
        "memory": {
          "type": "string",
          "title": "The memory in bytes in a format like 5MB"
        },
        "disk": {
          "type": "string",
          "title": "The size of the disk in bytes in a format like 5MB"
        },
        "price_hourly": {
          "type": "string",
          "title": "The price to pay per hour"
        },
        "price_monthly": {
          "type": "string",
          "title": "The price to pay per month"
        },
        "regions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The regions where this instance type is available"
        },
        "status": {
          "type": "string",
          "title": "The status of the instance"
        }
      }
    },
    "ListInstancesReply": {
      "type": "object",
      "properties": {
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "google.protobuf.NullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "Action": {
      "type": "string",
      "enum": [
        "signin",
        "signup",
        "register"
      ],
      "default": "signin"
    },
    "CannyAuthReply": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "CannyAuthRequest": {
      "type": "object"
    },
    "CreateAccountRequest": {
      "type": "object",
      "example": {
        "email": "john@snow.com",
        "password": "..."
      },
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "description": "Create new account",
      "title": "Create new account",
      "required": [
        "email",
        "password"
      ]
    },
    "CreateCredential": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "Credential": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CredentialReply": {
      "type": "object",
      "properties": {
        "credential": {
          "$ref": "#/definitions/Credential"
        }
      }
    },
    "DeleteAccountReply": {
      "type": "object"
    },
    "GetOAuthOptionsReply": {
      "type": "object",
      "properties": {
        "oauth_providers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OAuthProvider"
          }
        }
      },
      "description": "A list of providers which you can use for single sign-on."
    },
    "GetOrganizationReply": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/Organization"
        }
      }
    },
    "GithubInstallationCallbackReply": {
      "type": "object"
    },
    "GithubInstallationCallbackRequest": {
      "type": "object",
      "properties": {
        "installation_id": {
          "type": "string"
        },
        "setup_action": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "GithubInstallationReply": {
      "type": "object",
      "properties": {
        "app_name": {
          "type": "string",
          "title": "The github app name"
        },
        "app_id": {
          "type": "string",
          "format": "int64",
          "title": "The github app id"
        },
        "url": {
          "type": "string",
          "title": "The url to start the installation flow"
        },
        "state": {
          "type": "string",
          "title": "The state required by the protocol, it is only valid 10 minutes and encodes information about the type of flow"
        }
      }
    },
    "GithubInstallationRepoListReply": {
      "type": "object",
      "properties": {
        "repositories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GithubRepo"
          }
        },
        "installationId": {
          "type": "string"
        }
      }
    },
    "GithubRepo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "private": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "default_branch": {
          "type": "string"
        }
      }
    },
    "InviteUserRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ListCredentialsReply": {
      "type": "object",
      "properties": {
        "credentials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Credential"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "LoginReply": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/Token"
        }
      }
    },
    "LoginRequest": {
      "type": "object",
      "example": {
        "email": "john@snow.com",
        "password": "..."
      },
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "LogoutReply": {
      "type": "object"
    },
    "OAuthCallbackReply": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/Token",
          "title": "A jwt token to be used for session"
        }
      }
    },
    "OAuthCallbackRequest": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "title": "The state created at the origin of the OAuth flow"
        },
        "code": {
          "type": "string",
          "title": "The code returned by the OAuth provider"
        }
      }
    },
    "OAuthProvider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The name of the provider (.e.g github, google)"
        },
        "url": {
          "type": "string",
          "title": "The URL to call to initiate the OAuth flow"
        },
        "state": {
          "type": "string",
          "title": "The OAuth state required by the protocol, it is only valid 10 minutes and encodes information about the type of flow"
        }
      }
    },
    "Organization": {
      "type": "object",
      "properties": {
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "company": {
          "type": "boolean"
        },
        "vat_number": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "plan": {
          "type": "string"
        }
      }
    },
    "PasswordlessLoginReply": {
      "type": "object"
    },
    "PasswordlessLoginRequest": {
      "type": "object",
      "example": {
        "email": "john@snow.com"
      },
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "ResendEmailValidationReply": {
      "type": "object"
    },
    "ResendEmailValidationRequest": {
      "type": "object"
    },
    "ResetPasswordReply": {
      "type": "object"
    },
    "ResetPasswordRequest": {
      "type": "object",
      "example": {
        "email": "john@snow.com"
      },
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "Token": {
      "type": "object",
      "example": {
        "id": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
        "expires": "0001-01-01T00:00:00Z",
        "user_id": "996d7822-6b58-11e9-956f-32001b70f000",
        "organization_id": "9f33b2c6-6b58-11e9-883c-32001b70f000"
      },
      "properties": {
        "id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "UpdateOrganizationReply": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/Organization"
        }
      }
    },
    "UpdatePasswordRequest": {
      "type": "object",
      "example": {
        "id": "...",
        "password": "..."
      },
      "properties": {
        "id": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "UpdateUserRequest.UserUpdateBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "current_password": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "newsletter_subscribed": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "example": {
        "id": "78352123-a06f-4ec2-81ed-27a056725385",
        "email": "john@snow.com",
        "name": "John Snow",
        "status": "ACTIVE",
        "status_message": "active",
        "avatar_url": "https://www.gravatar.com/avatar/00000000000000000000000000000000",
        "verified": true,
        "is_admin": false,
        "is_test": true,
        "two_factor_authentication": false,
        "last_login": "0001-01-01T00:00:00Z",
        "last_login_id": "10.1.1.1",
        "updated_at": "0001-01-01T00:00:00Z",
        "created_at": "0001-01-01T00:00:00Z",
        "default_organization_id": "78352123-a06f-4ec2-81ed-27a056725385",
        "newsletter_subscribed": true
      },
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/User.AccountStatus"
        },
        "status_message": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        },
        "two_factor_authentication": {
          "type": "boolean"
        },
        "last_login": {
          "type": "string",
          "format": "date-time"
        },
        "last_login_ip": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "default_organization_id": {
          "type": "string"
        },
        "newsletter_subscribed": {
          "type": "boolean"
        },
        "github_id": {
          "type": "string"
        },
        "github_user": {
          "type": "string"
        },
        "flags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserFlags"
          }
        },
        "name": {
          "type": "string"
        }
      },
      "description": "Represent a User",
      "title": "User"
    },
    "User.AccountStatus": {
      "type": "string",
      "enum": [
        "WARNING",
        "LOCKED",
        "ACTIVE"
      ],
      "default": "WARNING"
    },
    "UserFlags": {
      "type": "string",
      "enum": [
        "ADMIN",
        "TEST",
        "RESTRICTED",
        "ACTIVE",
        "BETA"
      ],
      "default": "ADMIN",
      "title": "- ADMIN: A user is an admin user\n - TEST: A user is a test user\n - RESTRICTED: Whether this account as restricted access\n - ACTIVE: Whether this account is active\n - BETA: Account in beta program"
    },
    "UserReply": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "Activity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "actor": {
          "$ref": "#/definitions/Object"
        },
        "object": {
          "$ref": "#/definitions/Object"
        },
        "verb": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ActivityList": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Activity"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Object": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "Empty": {
      "type": "object"
    },
    "GithubHookReply": {
      "type": "object"
    },
    "Notification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "activity": {
          "$ref": "#/definitions/Activity"
        },
        "is_read": {
          "type": "boolean"
        },
        "is_seen": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "NotificationList": {
      "type": "object",
      "properties": {
        "notifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Notification"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "is_read": {
          "type": "boolean"
        },
        "is_seen": {
          "type": "boolean"
        },
        "unread": {
          "type": "integer",
          "format": "int64"
        },
        "unseen": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AutoRelease": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AutoRelease.Group"
          }
        }
      }
    },
    "AutoRelease.Group": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "git_ref": {
          "type": "string",
          "title": "A git ref to track (.e.g: refs/tags/<tag> or refs/heads/<branch>"
        },
        "latest_sha": {
          "type": "string",
          "title": "The last hash that was resolved (used to avoid triggering releases when things haven't changed)"
        }
      },
      "title": "Configuration extracted from the latest deployment in this deployment_group"
    },
    "CreateService": {
      "type": "object",
      "properties": {
        "definition": {
          "$ref": "#/definitions/ServiceDefinition"
        }
      }
    },
    "CreateServiceReply": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/Service",
          "title": "The entity created"
        }
      }
    },
    "DeleteServiceReply": {
      "type": "object"
    },
    "DeploymentState": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentState.Group"
          }
        }
      }
    },
    "DeploymentState.Group": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "revision_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DockerSource": {
      "type": "object",
      "properties": {
        "image": {
          "type": "string"
        },
        "command": {
          "type": "string"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "image_registry_secret": {
          "type": "string"
        }
      }
    },
    "Env": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "value_from_secret": {
          "type": "string"
        }
      }
    },
    "FetchGatewayReply": {
      "type": "object",
      "properties": {
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GatewayRoute"
          }
        }
      }
    },
    "FetchInternalRevisionReply": {
      "type": "object",
      "properties": {
        "revision": {
          "$ref": "#/definitions/ServiceRevision"
        }
      }
    },
    "FetchInternalServiceReply": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/Service"
        },
        "expand": {
          "type": "boolean"
        }
      }
    },
    "GatewayRoute": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "deployment_group": {
          "type": "string"
        },
        "revision_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int64"
        },
        "datacenters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GetServiceReply": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/Service",
          "title": "The Service retrieved"
        }
      }
    },
    "GetServiceRevisionReply": {
      "type": "object",
      "properties": {
        "revision": {
          "$ref": "#/definitions/ServiceRevision"
        }
      }
    },
    "GitSource": {
      "type": "object",
      "properties": {
        "repository": {
          "type": "string",
          "description": "A url to a git repository (contains the provider as well) .e.g: github.com/koyeb/test."
        },
        "branch": {
          "type": "string",
          "title": "A git branch that will be tracked for new commits and deployments will be created"
        },
        "tag": {
          "type": "string",
          "title": "A git tag that should be built"
        },
        "sha": {
          "type": "string",
          "title": "A git commit that should be built (useful for pinning to a commit, this will always be set when a revision is created by a code push)"
        }
      }
    },
    "ListInternalRevisionsReply": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "revision_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceRevisionId"
          }
        }
      }
    },
    "ListInternalServicesReply": {
      "type": "object",
      "properties": {
        "service_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceId"
          }
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceListItem"
          }
        }
      }
    },
    "ListServiceRevisionsReply": {
      "type": "object",
      "properties": {
        "revisions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceRevisionListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "ListServicesReply": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "Port": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int64"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "RedeployInternalReply": {
      "type": "object"
    },
    "RedeployReply": {
      "type": "object",
      "properties": {
        "revision": {
          "$ref": "#/definitions/ServiceRevision",
          "title": "The entity updated"
        }
      }
    },
    "RedeployRequest.Info": {
      "type": "object",
      "properties": {
        "deployment_group": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        }
      }
    },
    "Route": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int64"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "Scaling": {
      "type": "object",
      "properties": {
        "min": {
          "type": "integer",
          "format": "int64"
        },
        "max": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Service": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string",
          "format": "uint64",
          "title": "A version updated whenever this state changes (useful for caching)"
        },
        "state": {
          "$ref": "#/definitions/ServiceState"
        }
      }
    },
    "ServiceDefinition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Route"
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          }
        },
        "env": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Env"
          }
        },
        "regions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scaling": {
          "$ref": "#/definitions/Scaling"
        },
        "instance_type": {
          "type": "string"
        },
        "deployment_group": {
          "type": "string"
        },
        "docker": {
          "$ref": "#/definitions/DockerSource"
        },
        "git": {
          "$ref": "#/definitions/GitSource"
        }
      }
    },
    "ServiceId": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        }
      }
    },
    "ServiceInstance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "datacenter": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/ServiceInstance.Status"
        },
        "status_message": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ServiceInstance.Status": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "STARTING",
        "HEALTHY",
        "UNHEALTHY",
        "FAILED",
        "STOPPED"
      ],
      "default": "UNKNOWN"
    },
    "ServiceListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string",
          "format": "uint64",
          "title": "A version updated whenever this state changes (useful for caching)"
        },
        "state": {
          "$ref": "#/definitions/ServiceState"
        }
      }
    },
    "ServiceRevision": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "parent_id": {
          "type": "string"
        },
        "child_id": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "format": "int64",
          "title": "A version updated whenever this state changes (useful for caching)"
        },
        "definition": {
          "$ref": "#/definitions/ServiceDefinition"
        },
        "state": {
          "$ref": "#/definitions/ServiceRevisionState"
        }
      }
    },
    "ServiceRevisionId": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "revision_id": {
          "type": "string"
        }
      }
    },
    "ServiceRevisionListItem": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "parent_id": {
          "type": "string"
        },
        "child_id": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "format": "int64",
          "title": "A version updated whenever the state changes (useful for caching or CAS updates)"
        },
        "deployment_group": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/ServiceRevisionState.Status"
        }
      }
    },
    "ServiceRevisionState": {
      "type": "object",
      "properties": {
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceInstance"
          },
          "title": "Information about instances"
        },
        "status": {
          "$ref": "#/definitions/ServiceRevisionState.Status",
          "title": "A simple status to indicate where this revision is at"
        },
        "status_message": {
          "type": "string",
          "title": "Some extra information of the status"
        },
        "datacenters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The datacenters this revision will run in"
        },
        "build_info": {
          "$ref": "#/definitions/ServiceRevisionState.BuildInfo",
          "title": "Information about builds"
        }
      }
    },
    "ServiceRevisionState.BuildInfo": {
      "type": "object",
      "properties": {
        "sha": {
          "type": "string",
          "description": "The git sha for this build (we resolve the reference at the start of the build)."
        },
        "image": {
          "type": "string",
          "description": "The docker image built as a result of this build."
        },
        "build_job_id": {
          "type": "string",
          "description": "The id of the job that ran the build."
        },
        "stage_state": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceRevisionState.StageState"
          },
          "description": "Some info about the build."
        }
      }
    },
    "ServiceRevisionState.StageState": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "status_message": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/ServiceRevisionState.StageState.Status"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ServiceRevisionState.StageState.Status": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "RUNNING",
        "FAILED",
        "COMPLETED"
      ],
      "default": "UNKNOWN"
    },
    "ServiceRevisionState.Status": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "STARTING",
        "ACTIVE",
        "STOPPING",
        "STOPPED",
        "FAILED",
        "BUILDING",
        "TERMINATED"
      ],
      "default": "UNKNOWN"
    },
    "ServiceState": {
      "type": "object",
      "properties": {
        "desired_deployment": {
          "$ref": "#/definitions/DeploymentState"
        },
        "auto_release": {
          "$ref": "#/definitions/AutoRelease"
        },
        "status": {
          "$ref": "#/definitions/ServiceState.Status"
        }
      }
    },
    "ServiceState.Status": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CREATING",
        "ACTIVE",
        "STOPPING",
        "STOPPED"
      ],
      "default": "UNKNOWN"
    },
    "UpdateRevisionStateReply": {
      "type": "object"
    },
    "UpdateService": {
      "type": "object",
      "properties": {
        "definition": {
          "$ref": "#/definitions/ServiceDefinition"
        }
      }
    },
    "UpdateServiceReply": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/Service",
          "title": "The entity updated"
        }
      }
    },
    "UpdateServiceStateReply": {
      "type": "object"
    },
    "App": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "domains": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Domain"
          }
        }
      }
    },
    "AppListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "domains": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Domain"
          }
        }
      }
    },
    "CreateApp": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "CreateAppReply": {
      "type": "object",
      "properties": {
        "app": {
          "$ref": "#/definitions/App",
          "title": "The entity created"
        }
      }
    },
    "DeleteAppReply": {
      "type": "object"
    },
    "Domain": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "deployment_group": {
          "type": "string"
        }
      }
    },
    "GetAppReply": {
      "type": "object",
      "properties": {
        "app": {
          "$ref": "#/definitions/App",
          "title": "The App retrieved"
        }
      }
    },
    "GetInternalAppReply": {
      "type": "object",
      "properties": {
        "app": {
          "$ref": "#/definitions/App"
        }
      }
    },
    "ListAppsReply": {
      "type": "object",
      "properties": {
        "apps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "UpdateApp": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "UpdateAppReply": {
      "type": "object",
      "properties": {
        "app": {
          "$ref": "#/definitions/App",
          "title": "The entity updated"
        }
      }
    },
    "CreateSecret": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "CreateSecretReply": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/Secret"
        }
      }
    },
    "DeleteSecretReply": {
      "type": "object"
    },
    "GetSecretInternalReply": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/InternalSecret"
        }
      }
    },
    "GetSecretReply": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/Secret"
        }
      }
    },
    "InternalSecret": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        },
        "organization_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ListSecretsReply": {
      "type": "object",
      "properties": {
        "secrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Secret"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Secret": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "UpdateSecretReply": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/Secret"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}