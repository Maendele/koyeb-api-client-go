/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// StackRevisionStatus the model 'StackRevisionStatus'
type StackRevisionStatus string

// List of StackRevision.Status
const (
	STACKREVISIONSTATUS_UNKNOWN StackRevisionStatus = "UNKNOWN"
	STACKREVISIONSTATUS_UNAVAILABLE StackRevisionStatus = "UNAVAILABLE"
	STACKREVISIONSTATUS_PROVISIONING StackRevisionStatus = "PROVISIONING"
	STACKREVISIONSTATUS_STOPPING StackRevisionStatus = "STOPPING"
	STACKREVISIONSTATUS_ERROR StackRevisionStatus = "ERROR"
	STACKREVISIONSTATUS_ACTIVE StackRevisionStatus = "ACTIVE"
	STACKREVISIONSTATUS_VALIDATION_ERROR StackRevisionStatus = "VALIDATION_ERROR"
	STACKREVISIONSTATUS_STOPPED StackRevisionStatus = "STOPPED"
	STACKREVISIONSTATUS_BUILDING StackRevisionStatus = "BUILDING"
	STACKREVISIONSTATUS_BUILD_FAILED StackRevisionStatus = "BUILD_FAILED"
)

var allowedStackRevisionStatusEnumValues = []StackRevisionStatus{
	"UNKNOWN",
	"UNAVAILABLE",
	"PROVISIONING",
	"STOPPING",
	"ERROR",
	"ACTIVE",
	"VALIDATION_ERROR",
	"STOPPED",
	"BUILDING",
	"BUILD_FAILED",
}

func (v *StackRevisionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StackRevisionStatus(value)
	for _, existing := range allowedStackRevisionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StackRevisionStatus", value)
}

// NewStackRevisionStatusFromValue returns a pointer to a valid StackRevisionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStackRevisionStatusFromValue(v string) (*StackRevisionStatus, error) {
	ev := StackRevisionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StackRevisionStatus: valid values are %v", v, allowedStackRevisionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StackRevisionStatus) IsValid() bool {
	for _, existing := range allowedStackRevisionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StackRevision.Status value
func (v StackRevisionStatus) Ptr() *StackRevisionStatus {
	return &v
}

type NullableStackRevisionStatus struct {
	value *StackRevisionStatus
	isSet bool
}

func (v NullableStackRevisionStatus) Get() *StackRevisionStatus {
	return v.value
}

func (v *NullableStackRevisionStatus) Set(val *StackRevisionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableStackRevisionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStackRevisionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackRevisionStatus(val *StackRevisionStatus) *NullableStackRevisionStatus {
	return &NullableStackRevisionStatus{value: val, isSet: true}
}

func (v NullableStackRevisionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackRevisionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

