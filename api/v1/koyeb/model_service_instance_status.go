/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// ServiceInstanceStatus the model 'ServiceInstanceStatus'
type ServiceInstanceStatus string

// List of ServiceInstance.Status
const (
	SERVICEINSTANCESTATUS_UNKNOWN ServiceInstanceStatus = "UNKNOWN"
	SERVICEINSTANCESTATUS_STARTING ServiceInstanceStatus = "STARTING"
	SERVICEINSTANCESTATUS_HEALTHY ServiceInstanceStatus = "HEALTHY"
	SERVICEINSTANCESTATUS_UNHEALTHY ServiceInstanceStatus = "UNHEALTHY"
	SERVICEINSTANCESTATUS_FAILED ServiceInstanceStatus = "FAILED"
	SERVICEINSTANCESTATUS_STOPPED ServiceInstanceStatus = "STOPPED"
)

var allowedServiceInstanceStatusEnumValues = []ServiceInstanceStatus{
	"UNKNOWN",
	"STARTING",
	"HEALTHY",
	"UNHEALTHY",
	"FAILED",
	"STOPPED",
}

func (v *ServiceInstanceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceInstanceStatus(value)
	for _, existing := range allowedServiceInstanceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceInstanceStatus", value)
}

// NewServiceInstanceStatusFromValue returns a pointer to a valid ServiceInstanceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceInstanceStatusFromValue(v string) (*ServiceInstanceStatus, error) {
	ev := ServiceInstanceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceInstanceStatus: valid values are %v", v, allowedServiceInstanceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceInstanceStatus) IsValid() bool {
	for _, existing := range allowedServiceInstanceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceInstance.Status value
func (v ServiceInstanceStatus) Ptr() *ServiceInstanceStatus {
	return &v
}

type NullableServiceInstanceStatus struct {
	value *ServiceInstanceStatus
	isSet bool
}

func (v NullableServiceInstanceStatus) Get() *ServiceInstanceStatus {
	return v.value
}

func (v *NullableServiceInstanceStatus) Set(val *ServiceInstanceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceInstanceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceInstanceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceInstanceStatus(val *ServiceInstanceStatus) *NullableServiceInstanceStatus {
	return &NullableServiceInstanceStatus{value: val, isSet: true}
}

func (v NullableServiceInstanceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceInstanceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

