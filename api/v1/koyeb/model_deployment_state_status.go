/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// DeploymentStateStatus the model 'DeploymentStateStatus'
type DeploymentStateStatus string

// List of DeploymentState.Status
const (
	DEPLOYMENTSTATESTATUS_UNKNOWN DeploymentStateStatus = "UNKNOWN"
	DEPLOYMENTSTATESTATUS_STARTING DeploymentStateStatus = "STARTING"
	DEPLOYMENTSTATESTATUS_ACTIVE DeploymentStateStatus = "ACTIVE"
	DEPLOYMENTSTATESTATUS_STOPPING DeploymentStateStatus = "STOPPING"
	DEPLOYMENTSTATESTATUS_STOPPED DeploymentStateStatus = "STOPPED"
	DEPLOYMENTSTATESTATUS_FAILED DeploymentStateStatus = "FAILED"
	DEPLOYMENTSTATESTATUS_BUILDING DeploymentStateStatus = "BUILDING"
	DEPLOYMENTSTATESTATUS_TERMINATED DeploymentStateStatus = "TERMINATED"
)

var allowedDeploymentStateStatusEnumValues = []DeploymentStateStatus{
	"UNKNOWN",
	"STARTING",
	"ACTIVE",
	"STOPPING",
	"STOPPED",
	"FAILED",
	"BUILDING",
	"TERMINATED",
}

func (v *DeploymentStateStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeploymentStateStatus(value)
	for _, existing := range allowedDeploymentStateStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeploymentStateStatus", value)
}

// NewDeploymentStateStatusFromValue returns a pointer to a valid DeploymentStateStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeploymentStateStatusFromValue(v string) (*DeploymentStateStatus, error) {
	ev := DeploymentStateStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeploymentStateStatus: valid values are %v", v, allowedDeploymentStateStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeploymentStateStatus) IsValid() bool {
	for _, existing := range allowedDeploymentStateStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeploymentState.Status value
func (v DeploymentStateStatus) Ptr() *DeploymentStateStatus {
	return &v
}

type NullableDeploymentStateStatus struct {
	value *DeploymentStateStatus
	isSet bool
}

func (v NullableDeploymentStateStatus) Get() *DeploymentStateStatus {
	return v.value
}

func (v *NullableDeploymentStateStatus) Set(val *DeploymentStateStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentStateStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentStateStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentStateStatus(val *DeploymentStateStatus) *NullableDeploymentStateStatus {
	return &NullableDeploymentStateStatus{value: val, isSet: true}
}

func (v NullableDeploymentStateStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentStateStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

