/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// UpdateInstanceStatusReply struct for UpdateInstanceStatusReply
type UpdateInstanceStatusReply struct {
	Instance *Instance `json:"instance,omitempty"`
}

// NewUpdateInstanceStatusReply instantiates a new UpdateInstanceStatusReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateInstanceStatusReply() *UpdateInstanceStatusReply {
	this := UpdateInstanceStatusReply{}
	return &this
}

// NewUpdateInstanceStatusReplyWithDefaults instantiates a new UpdateInstanceStatusReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateInstanceStatusReplyWithDefaults() *UpdateInstanceStatusReply {
	this := UpdateInstanceStatusReply{}
	return &this
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *UpdateInstanceStatusReply) GetInstance() Instance {
	if o == nil || o.Instance == nil {
		var ret Instance
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInstanceStatusReply) GetInstanceOk() (*Instance, bool) {
	if o == nil || o.Instance == nil {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *UpdateInstanceStatusReply) HasInstance() bool {
	if o != nil && o.Instance != nil {
		return true
	}

	return false
}

// SetInstance gets a reference to the given Instance and assigns it to the Instance field.
func (o *UpdateInstanceStatusReply) SetInstance(v Instance) {
	o.Instance = &v
}

func (o UpdateInstanceStatusReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Instance != nil {
		toSerialize["instance"] = o.Instance
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateInstanceStatusReply struct {
	value *UpdateInstanceStatusReply
	isSet bool
}

func (v NullableUpdateInstanceStatusReply) Get() *UpdateInstanceStatusReply {
	return v.value
}

func (v *NullableUpdateInstanceStatusReply) Set(val *UpdateInstanceStatusReply) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateInstanceStatusReply) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateInstanceStatusReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateInstanceStatusReply(val *UpdateInstanceStatusReply) *NullableUpdateInstanceStatusReply {
	return &NullableUpdateInstanceStatusReply{value: val, isSet: true}
}

func (v NullableUpdateInstanceStatusReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateInstanceStatusReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


