/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// SecretsSummary struct for SecretsSummary
type SecretsSummary struct {
	Total *string `json:"total,omitempty"`
	ByType *map[string]string `json:"by_type,omitempty"`
}

// NewSecretsSummary instantiates a new SecretsSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretsSummary() *SecretsSummary {
	this := SecretsSummary{}
	return &this
}

// NewSecretsSummaryWithDefaults instantiates a new SecretsSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretsSummaryWithDefaults() *SecretsSummary {
	this := SecretsSummary{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *SecretsSummary) GetTotal() string {
	if o == nil || isNil(o.Total) {
		var ret string
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretsSummary) GetTotalOk() (*string, bool) {
	if o == nil || isNil(o.Total) {
    return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *SecretsSummary) HasTotal() bool {
	if o != nil && !isNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given string and assigns it to the Total field.
func (o *SecretsSummary) SetTotal(v string) {
	o.Total = &v
}

// GetByType returns the ByType field value if set, zero value otherwise.
func (o *SecretsSummary) GetByType() map[string]string {
	if o == nil || isNil(o.ByType) {
		var ret map[string]string
		return ret
	}
	return *o.ByType
}

// GetByTypeOk returns a tuple with the ByType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretsSummary) GetByTypeOk() (*map[string]string, bool) {
	if o == nil || isNil(o.ByType) {
    return nil, false
	}
	return o.ByType, true
}

// HasByType returns a boolean if a field has been set.
func (o *SecretsSummary) HasByType() bool {
	if o != nil && !isNil(o.ByType) {
		return true
	}

	return false
}

// SetByType gets a reference to the given map[string]string and assigns it to the ByType field.
func (o *SecretsSummary) SetByType(v map[string]string) {
	o.ByType = &v
}

func (o SecretsSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !isNil(o.ByType) {
		toSerialize["by_type"] = o.ByType
	}
	return json.Marshal(toSerialize)
}

type NullableSecretsSummary struct {
	value *SecretsSummary
	isSet bool
}

func (v NullableSecretsSummary) Get() *SecretsSummary {
	return v.value
}

func (v *NullableSecretsSummary) Set(val *SecretsSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretsSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretsSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretsSummary(val *SecretsSummary) *NullableSecretsSummary {
	return &NullableSecretsSummary{value: val, isSet: true}
}

func (v NullableSecretsSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretsSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


