/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// DatabaseDeploymentMetadata struct for DatabaseDeploymentMetadata
type DatabaseDeploymentMetadata struct {
	NeonPostgres *NeonPostgresDatabaseDeploymentMetadata `json:"neon_postgres,omitempty"`
}

// NewDatabaseDeploymentMetadata instantiates a new DatabaseDeploymentMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseDeploymentMetadata() *DatabaseDeploymentMetadata {
	this := DatabaseDeploymentMetadata{}
	return &this
}

// NewDatabaseDeploymentMetadataWithDefaults instantiates a new DatabaseDeploymentMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseDeploymentMetadataWithDefaults() *DatabaseDeploymentMetadata {
	this := DatabaseDeploymentMetadata{}
	return &this
}

// GetNeonPostgres returns the NeonPostgres field value if set, zero value otherwise.
func (o *DatabaseDeploymentMetadata) GetNeonPostgres() NeonPostgresDatabaseDeploymentMetadata {
	if o == nil || isNil(o.NeonPostgres) {
		var ret NeonPostgresDatabaseDeploymentMetadata
		return ret
	}
	return *o.NeonPostgres
}

// GetNeonPostgresOk returns a tuple with the NeonPostgres field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseDeploymentMetadata) GetNeonPostgresOk() (*NeonPostgresDatabaseDeploymentMetadata, bool) {
	if o == nil || isNil(o.NeonPostgres) {
    return nil, false
	}
	return o.NeonPostgres, true
}

// HasNeonPostgres returns a boolean if a field has been set.
func (o *DatabaseDeploymentMetadata) HasNeonPostgres() bool {
	if o != nil && !isNil(o.NeonPostgres) {
		return true
	}

	return false
}

// SetNeonPostgres gets a reference to the given NeonPostgresDatabaseDeploymentMetadata and assigns it to the NeonPostgres field.
func (o *DatabaseDeploymentMetadata) SetNeonPostgres(v NeonPostgresDatabaseDeploymentMetadata) {
	o.NeonPostgres = &v
}

func (o DatabaseDeploymentMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.NeonPostgres) {
		toSerialize["neon_postgres"] = o.NeonPostgres
	}
	return json.Marshal(toSerialize)
}

type NullableDatabaseDeploymentMetadata struct {
	value *DatabaseDeploymentMetadata
	isSet bool
}

func (v NullableDatabaseDeploymentMetadata) Get() *DatabaseDeploymentMetadata {
	return v.value
}

func (v *NullableDatabaseDeploymentMetadata) Set(val *DatabaseDeploymentMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseDeploymentMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseDeploymentMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseDeploymentMetadata(val *DatabaseDeploymentMetadata) *NullableDatabaseDeploymentMetadata {
	return &NullableDatabaseDeploymentMetadata{value: val, isSet: true}
}

func (v NullableDatabaseDeploymentMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseDeploymentMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


