/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"time"
)

// FunctionExecution struct for FunctionExecution
type FunctionExecution struct {
	State *FunctionRunInfoState `json:"state,omitempty"`
	Start *time.Time `json:"start,omitempty"`
	End *time.Time `json:"end,omitempty"`
	ExitCode *int32 `json:"exitCode,omitempty"`
}

// NewFunctionExecution instantiates a new FunctionExecution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionExecution() *FunctionExecution {
	this := FunctionExecution{}
	var state FunctionRunInfoState = FUNCTIONRUNINFOSTATE_UNKNOWN
	this.State = &state
	return &this
}

// NewFunctionExecutionWithDefaults instantiates a new FunctionExecution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionExecutionWithDefaults() *FunctionExecution {
	this := FunctionExecution{}
	var state FunctionRunInfoState = FUNCTIONRUNINFOSTATE_UNKNOWN
	this.State = &state
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *FunctionExecution) GetState() FunctionRunInfoState {
	if o == nil || o.State == nil {
		var ret FunctionRunInfoState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionExecution) GetStateOk() (*FunctionRunInfoState, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *FunctionExecution) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given FunctionRunInfoState and assigns it to the State field.
func (o *FunctionExecution) SetState(v FunctionRunInfoState) {
	o.State = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *FunctionExecution) GetStart() time.Time {
	if o == nil || o.Start == nil {
		var ret time.Time
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionExecution) GetStartOk() (*time.Time, bool) {
	if o == nil || o.Start == nil {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *FunctionExecution) HasStart() bool {
	if o != nil && o.Start != nil {
		return true
	}

	return false
}

// SetStart gets a reference to the given time.Time and assigns it to the Start field.
func (o *FunctionExecution) SetStart(v time.Time) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *FunctionExecution) GetEnd() time.Time {
	if o == nil || o.End == nil {
		var ret time.Time
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionExecution) GetEndOk() (*time.Time, bool) {
	if o == nil || o.End == nil {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *FunctionExecution) HasEnd() bool {
	if o != nil && o.End != nil {
		return true
	}

	return false
}

// SetEnd gets a reference to the given time.Time and assigns it to the End field.
func (o *FunctionExecution) SetEnd(v time.Time) {
	o.End = &v
}

// GetExitCode returns the ExitCode field value if set, zero value otherwise.
func (o *FunctionExecution) GetExitCode() int32 {
	if o == nil || o.ExitCode == nil {
		var ret int32
		return ret
	}
	return *o.ExitCode
}

// GetExitCodeOk returns a tuple with the ExitCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionExecution) GetExitCodeOk() (*int32, bool) {
	if o == nil || o.ExitCode == nil {
		return nil, false
	}
	return o.ExitCode, true
}

// HasExitCode returns a boolean if a field has been set.
func (o *FunctionExecution) HasExitCode() bool {
	if o != nil && o.ExitCode != nil {
		return true
	}

	return false
}

// SetExitCode gets a reference to the given int32 and assigns it to the ExitCode field.
func (o *FunctionExecution) SetExitCode(v int32) {
	o.ExitCode = &v
}

func (o FunctionExecution) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Start != nil {
		toSerialize["start"] = o.Start
	}
	if o.End != nil {
		toSerialize["end"] = o.End
	}
	if o.ExitCode != nil {
		toSerialize["exitCode"] = o.ExitCode
	}
	return json.Marshal(toSerialize)
}

type NullableFunctionExecution struct {
	value *FunctionExecution
	isSet bool
}

func (v NullableFunctionExecution) Get() *FunctionExecution {
	return v.value
}

func (v *NullableFunctionExecution) Set(val *FunctionExecution) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionExecution(val *FunctionExecution) *NullableFunctionExecution {
	return &NullableFunctionExecution{value: val, isSet: true}
}

func (v NullableFunctionExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


