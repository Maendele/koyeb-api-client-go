/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// FunctionRunInfoListItem struct for FunctionRunInfoListItem
type FunctionRunInfoListItem struct {
	RunId *string `json:"run_id,omitempty"`
	EventId *string `json:"event_id,omitempty"`
	FnName *string `json:"fn_name,omitempty"`
	State *FunctionRunInfoState `json:"state,omitempty"`
	// A list of executions, with the first one being the most recent one.
	Executions *[]FunctionExecution `json:"executions,omitempty"`
}

// NewFunctionRunInfoListItem instantiates a new FunctionRunInfoListItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionRunInfoListItem() *FunctionRunInfoListItem {
	this := FunctionRunInfoListItem{}
	var state FunctionRunInfoState = FUNCTIONRUNINFOSTATE_UNKNOWN
	this.State = &state
	return &this
}

// NewFunctionRunInfoListItemWithDefaults instantiates a new FunctionRunInfoListItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionRunInfoListItemWithDefaults() *FunctionRunInfoListItem {
	this := FunctionRunInfoListItem{}
	var state FunctionRunInfoState = FUNCTIONRUNINFOSTATE_UNKNOWN
	this.State = &state
	return &this
}

// GetRunId returns the RunId field value if set, zero value otherwise.
func (o *FunctionRunInfoListItem) GetRunId() string {
	if o == nil || o.RunId == nil {
		var ret string
		return ret
	}
	return *o.RunId
}

// GetRunIdOk returns a tuple with the RunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionRunInfoListItem) GetRunIdOk() (*string, bool) {
	if o == nil || o.RunId == nil {
		return nil, false
	}
	return o.RunId, true
}

// HasRunId returns a boolean if a field has been set.
func (o *FunctionRunInfoListItem) HasRunId() bool {
	if o != nil && o.RunId != nil {
		return true
	}

	return false
}

// SetRunId gets a reference to the given string and assigns it to the RunId field.
func (o *FunctionRunInfoListItem) SetRunId(v string) {
	o.RunId = &v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *FunctionRunInfoListItem) GetEventId() string {
	if o == nil || o.EventId == nil {
		var ret string
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionRunInfoListItem) GetEventIdOk() (*string, bool) {
	if o == nil || o.EventId == nil {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *FunctionRunInfoListItem) HasEventId() bool {
	if o != nil && o.EventId != nil {
		return true
	}

	return false
}

// SetEventId gets a reference to the given string and assigns it to the EventId field.
func (o *FunctionRunInfoListItem) SetEventId(v string) {
	o.EventId = &v
}

// GetFnName returns the FnName field value if set, zero value otherwise.
func (o *FunctionRunInfoListItem) GetFnName() string {
	if o == nil || o.FnName == nil {
		var ret string
		return ret
	}
	return *o.FnName
}

// GetFnNameOk returns a tuple with the FnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionRunInfoListItem) GetFnNameOk() (*string, bool) {
	if o == nil || o.FnName == nil {
		return nil, false
	}
	return o.FnName, true
}

// HasFnName returns a boolean if a field has been set.
func (o *FunctionRunInfoListItem) HasFnName() bool {
	if o != nil && o.FnName != nil {
		return true
	}

	return false
}

// SetFnName gets a reference to the given string and assigns it to the FnName field.
func (o *FunctionRunInfoListItem) SetFnName(v string) {
	o.FnName = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *FunctionRunInfoListItem) GetState() FunctionRunInfoState {
	if o == nil || o.State == nil {
		var ret FunctionRunInfoState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionRunInfoListItem) GetStateOk() (*FunctionRunInfoState, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *FunctionRunInfoListItem) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given FunctionRunInfoState and assigns it to the State field.
func (o *FunctionRunInfoListItem) SetState(v FunctionRunInfoState) {
	o.State = &v
}

// GetExecutions returns the Executions field value if set, zero value otherwise.
func (o *FunctionRunInfoListItem) GetExecutions() []FunctionExecution {
	if o == nil || o.Executions == nil {
		var ret []FunctionExecution
		return ret
	}
	return *o.Executions
}

// GetExecutionsOk returns a tuple with the Executions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionRunInfoListItem) GetExecutionsOk() (*[]FunctionExecution, bool) {
	if o == nil || o.Executions == nil {
		return nil, false
	}
	return o.Executions, true
}

// HasExecutions returns a boolean if a field has been set.
func (o *FunctionRunInfoListItem) HasExecutions() bool {
	if o != nil && o.Executions != nil {
		return true
	}

	return false
}

// SetExecutions gets a reference to the given []FunctionExecution and assigns it to the Executions field.
func (o *FunctionRunInfoListItem) SetExecutions(v []FunctionExecution) {
	o.Executions = &v
}

func (o FunctionRunInfoListItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RunId != nil {
		toSerialize["run_id"] = o.RunId
	}
	if o.EventId != nil {
		toSerialize["event_id"] = o.EventId
	}
	if o.FnName != nil {
		toSerialize["fn_name"] = o.FnName
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Executions != nil {
		toSerialize["executions"] = o.Executions
	}
	return json.Marshal(toSerialize)
}

type NullableFunctionRunInfoListItem struct {
	value *FunctionRunInfoListItem
	isSet bool
}

func (v NullableFunctionRunInfoListItem) Get() *FunctionRunInfoListItem {
	return v.value
}

func (v *NullableFunctionRunInfoListItem) Set(val *FunctionRunInfoListItem) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionRunInfoListItem) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionRunInfoListItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionRunInfoListItem(val *FunctionRunInfoListItem) *NullableFunctionRunInfoListItem {
	return &NullableFunctionRunInfoListItem{value: val, isSet: true}
}

func (v NullableFunctionRunInfoListItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionRunInfoListItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


