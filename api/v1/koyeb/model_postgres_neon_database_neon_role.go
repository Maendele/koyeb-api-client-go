/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// PostgresNeonDatabaseNeonRole struct for PostgresNeonDatabaseNeonRole
type PostgresNeonDatabaseNeonRole struct {
	Name *string `json:"name,omitempty"`
	Secret *string `json:"secret,omitempty"`
}

// NewPostgresNeonDatabaseNeonRole instantiates a new PostgresNeonDatabaseNeonRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostgresNeonDatabaseNeonRole() *PostgresNeonDatabaseNeonRole {
	this := PostgresNeonDatabaseNeonRole{}
	return &this
}

// NewPostgresNeonDatabaseNeonRoleWithDefaults instantiates a new PostgresNeonDatabaseNeonRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostgresNeonDatabaseNeonRoleWithDefaults() *PostgresNeonDatabaseNeonRole {
	this := PostgresNeonDatabaseNeonRole{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PostgresNeonDatabaseNeonRole) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresNeonDatabaseNeonRole) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PostgresNeonDatabaseNeonRole) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PostgresNeonDatabaseNeonRole) SetName(v string) {
	o.Name = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *PostgresNeonDatabaseNeonRole) GetSecret() string {
	if o == nil || isNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresNeonDatabaseNeonRole) GetSecretOk() (*string, bool) {
	if o == nil || isNil(o.Secret) {
    return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *PostgresNeonDatabaseNeonRole) HasSecret() bool {
	if o != nil && !isNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *PostgresNeonDatabaseNeonRole) SetSecret(v string) {
	o.Secret = &v
}

func (o PostgresNeonDatabaseNeonRole) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	return json.Marshal(toSerialize)
}

type NullablePostgresNeonDatabaseNeonRole struct {
	value *PostgresNeonDatabaseNeonRole
	isSet bool
}

func (v NullablePostgresNeonDatabaseNeonRole) Get() *PostgresNeonDatabaseNeonRole {
	return v.value
}

func (v *NullablePostgresNeonDatabaseNeonRole) Set(val *PostgresNeonDatabaseNeonRole) {
	v.value = val
	v.isSet = true
}

func (v NullablePostgresNeonDatabaseNeonRole) IsSet() bool {
	return v.isSet
}

func (v *NullablePostgresNeonDatabaseNeonRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostgresNeonDatabaseNeonRole(val *PostgresNeonDatabaseNeonRole) *NullablePostgresNeonDatabaseNeonRole {
	return &NullablePostgresNeonDatabaseNeonRole{value: val, isSet: true}
}

func (v NullablePostgresNeonDatabaseNeonRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostgresNeonDatabaseNeonRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


