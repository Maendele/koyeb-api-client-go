openapi: 3.0.1
info:
  description: |
    The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests.
  title: Koyeb Rest API
  version: 1.0.0
servers:
- url: https://app.koyeb.com/
security:
- Bearer: []
tags:
- description: |
    Welcome to the Koyeb API documentation.

    The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests.
    The API has predictable resource-oriented URLs, allowing you to request, retrieve and execute actions on resources efficiently.

    The API returns JSON-encoded responses and uses standard HTTP response codes, and verbs.

    All of the functionality available in the Koyeb Control Panel is also available via the API, allowing you to automate repetitive and complex actions as required.

    All production API requests are made to:

    - https://api.koyeb.com/<version>

    All data is sent and received as JSON.

    ## Constructing Requests

    Requests are made of three components:

    - Base URL: `https://api.koyeb.com`
    - API Version: `v1`
    - Resource path: `apps`

    To construct a proper request, you need to format the URL as follows:

    `https://api.koyeb.com/{version}/{resource}`

    Example: `https://api.koyeb.com/v1/apps`

    The following code is an example request to retrieve the list of Apps.

    ```
    %curl -H 'Authorization: Bearer 1111-1111-1111-1111-1111' https://api.koyeb.com/v1/apps
    {
      "apps": [
        {
          "id": "e267e09d-a2ef-4672-95c7-bf88d787a274",
          "name": "demo",
          "organization_id": "c402bcad-d06d-4fd6-8af2-08b790c0e249",
          "updated_at": "2021-04-26T08:28:59.221274Z",
          "created_at": "2021-04-26T08:28:59.221274Z",
          "domains": [
            {
              "name": "demo-koyeb.koyeb.app",
              "deployment_group": "prod"
            }
          ]
        },
        {
          "id": "e38caea5-5acb-4fec-aa65-81749546b470",
          "name": "www",
          "organization_id": "c402bcad-d06d-4fd6-8af2-08b790c0e249",
          "updated_at": "2021-05-04T08:56:40.557792Z",
          "created_at": "2021-05-04T08:56:40.557792Z",
          "domains": [
            {
              "name": "www-koyeb.koyeb.app",
              "deployment_group": "prod"
            }
          ]
        }
      ],
      "limit": 20,
      "offset": 0,
      "count": 2
    }
    ```

    # Authentication

    The Koyeb API uses API keys to authenticate requests. You can view and manage your API keys in the Koyeb Control Panel.

    Your API keys carry many privileges. Take care to keep them secure! Do not share your secret API keys in publicly accessible areas such as GitHub, Slack, client-side code, and so forth.

    To make an authenticated request, include a bearer-type Authorization header containing your API key.

    All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.

    # Errors

    We use conventional HTTP response codes to indicate the success or failure of an API request.

    In general, codes in the 2xx range indicate success, codes in the 4xx range indicate an error that resulted from the provided information (e.g., a required parameter is missing, resource not found), and codes in the 5xx range indicate an error with our servers.

    ## HTTP Status Code Summary

    - `200 OK` - Everything worked as expected.
    - `400 Bad Request` - Often missing a required parameter.
    - `401 Unauthorized` - No valid API key provided.
    - `402 Request Failed` - Parameters were valid, but the request failed.
    - `403 Forbidden` - Insufficient privileges to access the requested resource.
    - `404 Not Found` - The requested item doesn't exist.
    - `50x` Server errors - Something went wrong on the API domain's end.

    Input and output data must be valid JSON with the appropriate Content-Type header set.

    ## Attributes

    - code:

      - `invalid_argument`: Occur when your request has invalid parameters.
      - `unknown_resource`: Occur when the resource doesn't exist.
      - `authentication_error`: Arise when there is a problem with authentication.
      - `rate_limit_error`: Too many requests hit the API too quickly.
      - `authorization_required`: You don't have sufficient right to access the resource.
      - `api_error`: API errors use in case of a problem with api domain's servers (extremely uncommon).

    - message:

      - A human-readable error giving more details about the error

    - status:

      - The HTTP code returned by the server.

    - fields (Optional):

      - An array of parameters with a human-readable message giving more details about the error.

    ## Errors responses example

    Response 400 (application/json)

    ```
    {
      "status": 400,
      "code": "invalid_argument",
      "message": "Invalid argument",
      "fields": [
        {
          "field": "definition.docker.image",
          "description": "cannot be blank"
        }
      ]
    }
    ```

    Response 401 (application/json)

    ```
    {
      "status": 401,
      "code": "authentication_error",
      "message": "Request unauthenticated with bearer"
    }
    ```

    Response 403 (application/json)

    ```
    {
      "status": 403,
      "code": "authentication_required",
      "message": "You don't have the requested permission to access to resource."
    }
    ```


    Response 404 (application/json)

    ```
    {
      "status": 404,
      "code": "unknown_resource",
      "message": "App not found"
    }
    ```

    # Pagination

    All top-level API resources receive a paginated response. For instance, list Apps, list Services, and others share a standard structure, taking two parameters: limit and offset.

    **Paginated request**

    Requests against paginated endpoints accept two query string arguments:

    * *limit*, a positive integer lower or equal to 100 to select the number of items to display.
    * *offset*, an integer to indicate the position to start at.

    Paginated endpoints usually also accept filters to search and sort results.
    These filters are documented along with each endpoint documentation.
  name: intro
  x-displayName: Introduction
  x-traitTag: true
paths:
  /v1/apps/{app_id_or_name}/services/{service_id_or_name}/revisions/{revision_id}/instances/{instance_id}/logs/{stream}/tail:
    get:
      operationId: TailInstanceLogs
      parameters:
      - in: path
        name: app_id_or_name
        required: true
        schema:
          type: string
      - in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
      - in: path
        name: revision_id
        required: true
        schema:
          type: string
      - in: path
        name: instance_id
        required: true
        schema:
          type: string
      - in: path
        name: stream
        required: true
        schema:
          type: string
      - description: -1 is from the end, 0 is from the start anything else is from
          this offset in the file.
        in: query
        name: offset
        schema:
          format: int64
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Stream_result_of_LogEntry'
          description: A successful response.(streaming responses)
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - logs
  /v1/regions:
    get:
      operationId: ListRegions
      parameters:
      - description: (Optional) The number of items to return.
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return.
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) A filter for regions.
        in: query
        name: id
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListRegionsReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List Region
      tags:
      - Regions
  /v1/regions/{id}:
    get:
      operationId: GetRegion
      parameters:
      - description: The name of the region
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetRegionReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get Region
      tags:
      - Regions
  /v1/instances:
    get:
      operationId: ListInstances
      parameters:
      - description: (Optional) The number of items to return.
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return.
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) A filter for instances.
        in: query
        name: id
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListInstancesReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List Instance
      tags:
      - Instances
  /v1/instances/{id}:
    get:
      operationId: GetInstance
      parameters:
      - description: The name of the instance
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetInstanceReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get Instance
      tags:
      - Instances
  /v1/account/activities:
    get:
      operationId: GetAccountActivities
      parameters:
      - in: query
        name: limit
        schema:
          type: string
      - in: query
        name: offset
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActivityList'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - activity
  /v1/account/invite:
    post:
      operationId: CreateInvite
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/InviteUserRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Empty'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - invite
      x-codegen-request-body-name: body
  /v1/account/login:
    post:
      operationId: Login
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Login user
      tags:
      - session
      x-codegen-request-body-name: body
  /v1/account/logout:
    delete:
      operationId: Logout
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LogoutReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Logout user
      tags:
      - session
  /v1/account/oauth:
    get:
      operationId: GetOAuthOptions
      parameters:
      - description: Which authentication flow is being initiated.
        in: query
        name: action
        schema:
          default: signin
          enum:
          - signin
          - signup
          - register
          type: string
      - description: A small (limited to 400 characters) string of arbitrary metadata
          which will be encoded in the state.
        in: query
        name: metadata
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetOAuthOptionsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get OAuth Providers
      tags:
      - profile
    post:
      operationId: OAuthCallback
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OAuthCallbackRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OAuthCallbackReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Authenticate using OAuth
      tags:
      - profile
      x-codegen-request-body-name: body
  /v1/account/passwordless_login:
    post:
      operationId: PasswordlessLogin
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PasswordlessLoginRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PasswordlessLoginReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - session
      x-codegen-request-body-name: body
  /v1/account/profile:
    delete:
      operationId: DeleteAccount
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteAccountReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
    get:
      operationId: GetCurrentUser
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
    patch:
      operationId: UpdateUser2
      parameters:
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateUserRequest.UserUpdateBody'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
      x-codegen-request-body-name: body
    put:
      operationId: UpdateUser
      parameters:
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateUserRequest.UserUpdateBody'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
      x-codegen-request-body-name: body
  /v1/account/refresh:
    put:
      operationId: RefreshToken
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Refresh token
      tags:
      - session
  /v1/account/resend_validation:
    post:
      operationId: ResendEmailValidation
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResendEmailValidationRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResendEmailValidationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
      x-codegen-request-body-name: body
  /v1/account/reset_password:
    post:
      operationId: ResetPassword
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResetPasswordReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
      x-codegen-request-body-name: body
  /v1/account/signup:
    post:
      operationId: Signup
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
      x-codegen-request-body-name: body
  /v1/account/update_password:
    post:
      operationId: UpdatePassword
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
      x-codegen-request-body-name: body
  /v1/account/validate/{id}:
    post:
      operationId: Validate
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
  /v1/credentials:
    get:
      operationId: ListCredentials
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
      - in: query
        name: limit
        schema:
          type: string
      - in: query
        name: offset
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListCredentialsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - credentials
    post:
      operationId: CreateCredential
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateCredential'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CredentialReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - credentials
      x-codegen-request-body-name: body
  /v1/credentials/{id}:
    delete:
      operationId: DeleteCredential
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Empty'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - credentials
    get:
      operationId: GetCredential
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CredentialReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - credentials
    patch:
      operationId: UpdateCredential2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Credential'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CredentialReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - credentials
      x-codegen-request-body-name: body
    put:
      operationId: UpdateCredential
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Credential'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CredentialReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - credentials
      x-codegen-request-body-name: body
  /v1/github/installation:
    get:
      operationId: GithubInstallation
      parameters:
      - description: A small (limited to 400 characters) string of arbitrary metadata
          which will be encoded in the state.
        in: query
        name: metadata
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GithubInstallationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Start github installation
      tags:
      - organization
  /v1/github/installation/callback:
    post:
      operationId: GithubInstallationCallback
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/GithubInstallationCallbackRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GithubInstallationCallbackReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Github callback for app installation
      tags:
      - organization
      x-codegen-request-body-name: body
  /v1/github/installation/repositories:
    get:
      operationId: GithubInstallationRepoList
      parameters:
      - description: 'The page id (starting from 1): Maps to: https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#pagination.'
        in: query
        name: page
        schema:
          format: int64
          type: integer
      - description: 'The number of page elements per page (max 100): Maps to: https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#pagination.'
        in: query
        name: perPage
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GithubInstallationRepoListReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
            ? ""
            : example: '{ "status": "400", "code": "failed_precondition", "message":
                "No github Installation" }'
          description: Organization is not linked to a github organization
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List Github repos of the organization
      tags:
      - organization
  /v1/organizations/{id}:
    get:
      operationId: GetOrganization
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetOrganizationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get organization
      tags:
      - organization
    patch:
      operationId: UpdateOrganization2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateOrganizationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Update organization
      tags:
      - organization
      x-codegen-request-body-name: body
    put:
      operationId: UpdateOrganization
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateOrganizationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Update organization
      tags:
      - organization
      x-codegen-request-body-name: body
  /v1/sso/canny:
    post:
      operationId: CannyAuth
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CannyAuthRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CannyAuthReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - sso
      x-codegen-request-body-name: body
  /v1/activities:
    get:
      operationId: ListActivities
      parameters:
      - in: query
        name: limit
        schema:
          type: string
      - in: query
        name: offset
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActivityList'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - activity
  /v1/hooks/github/payload:
    post:
      description: An implementation of github hooks. The payload is a freefrom JSON
        and the response will always be empty.
      externalDocs:
        description: github documentation
        url: https://developer.github.com/webhooks/
      operationId: Github
      requestBody:
        content:
          '*/*':
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GithubHookReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Github hook receiver
      tags:
      - hooks
      x-codegen-request-body-name: body
  /v1/notifications:
    get:
      operationId: ListNotifications
      parameters:
      - in: query
        name: limit
        schema:
          type: string
      - in: query
        name: offset
        schema:
          type: string
      - in: query
        name: mark_read
        schema:
          type: string
      - in: query
        name: mark_seen
        schema:
          type: string
      - in: query
        name: unread
        schema:
          type: string
      - in: query
        name: unseen
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotificationList'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - activity
  /v1/apps/{app_id_or_name}/services:
    get:
      operationId: ListServices
      parameters:
      - in: path
        name: app_id_or_name
        required: true
        schema:
          type: string
      - description: (Optional) The number of items to return.
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return.
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) A filter for regions.
        in: query
        name: name
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListServicesReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List Service
      tags:
      - Services
    post:
      operationId: CreateService
      parameters:
      - description: The id or the name of the App
        in: path
        name: app_id_or_name
        required: true
        schema:
          type: string
      - description: If set only run validation.
        in: query
        name: dry_run
        schema:
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateService'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateServiceReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Create Service
      tags:
      - Services
      x-codegen-request-body-name: body
  /v1/apps/{app_id_or_name}/services/{id_or_name}:
    delete:
      operationId: DeleteService
      parameters:
      - description: The id or the name of the App
        in: path
        name: app_id_or_name
        required: true
        schema:
          type: string
      - description: The id or the name of the entity to delete
        in: path
        name: id_or_name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteServiceReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Delete Service
      tags:
      - Services
    get:
      operationId: GetService
      parameters:
      - description: The id or the name of the App
        in: path
        name: app_id_or_name
        required: true
        schema:
          type: string
      - description: The id or the name of the Service
        in: path
        name: id_or_name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetServiceReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get Service
      tags:
      - Services
    patch:
      operationId: UpdateService2
      parameters:
      - description: The id or the name of the App
        in: path
        name: app_id_or_name
        required: true
        schema:
          type: string
      - description: The id or the name of the entity to update
        in: path
        name: id_or_name
        required: true
        schema:
          type: string
      - in: query
        name: update_mask
        schema:
          type: string
      - description: If set only run validation.
        in: query
        name: dry_run
        schema:
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateService'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateServiceReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Update Service
      tags:
      - Services
      x-codegen-request-body-name: body
    put:
      operationId: UpdateService
      parameters:
      - description: The id or the name of the App
        in: path
        name: app_id_or_name
        required: true
        schema:
          type: string
      - description: The id or the name of the entity to update
        in: path
        name: id_or_name
        required: true
        schema:
          type: string
      - in: query
        name: update_mask
        schema:
          type: string
      - description: If set only run validation.
        in: query
        name: dry_run
        schema:
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateService'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateServiceReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Update Service
      tags:
      - Services
      x-codegen-request-body-name: body
  /v1/apps/{app_id_or_name}/services/{id_or_name}/revisions:
    get:
      operationId: ListRevisions
      parameters:
      - in: path
        name: app_id_or_name
        required: true
        schema:
          type: string
      - in: path
        name: id_or_name
        required: true
        schema:
          type: string
      - description: (Optional) The number of items to return.
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return.
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) Statuses to filter on.
        explode: true
        in: query
        name: statuses
        schema:
          items:
            enum:
            - UNKNOWN
            - STARTING
            - ACTIVE
            - STOPPING
            - STOPPED
            - FAILED
            - BUILDING
            - TERMINATED
            type: string
          type: array
        style: form
      - description: (Optional) Only fetch revisions in this deployment group.
        explode: true
        in: query
        name: deployment_groups
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListServiceRevisionsReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List Revisions
      tags:
      - Services
  /v1/apps/{app_id_or_name}/services/{id_or_name}/revisions/{id}:
    get:
      operationId: GetRevision
      parameters:
      - description: The id or the name of the app
        in: path
        name: app_id_or_name
        required: true
        schema:
          type: string
      - description: The id or the name of the service
        in: path
        name: id_or_name
        required: true
        schema:
          type: string
      - description: The id of the revision to fetch or `_latest` to get the latest
          one
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetServiceRevisionReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get Revision
      tags:
      - Services
  /v1/apps:
    get:
      operationId: ListApps
      parameters:
      - description: (Optional) The number of items to return.
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return.
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) A filter for regions.
        in: query
        name: name
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListAppsReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List App
      tags:
      - Apps
    post:
      operationId: CreateApp
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateApp'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateAppReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Create App
      tags:
      - Apps
      x-codegen-request-body-name: body
  /v1/apps/{id_or_name}:
    delete:
      operationId: DeleteApp
      parameters:
      - description: The id or the name of the entity to delete
        in: path
        name: id_or_name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteAppReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Delete App
      tags:
      - Apps
    get:
      operationId: GetApp
      parameters:
      - description: The id or the name of the App
        in: path
        name: id_or_name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetAppReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get App
      tags:
      - Apps
    patch:
      operationId: UpdateApp2
      parameters:
      - description: The id or the name of the entity to update
        in: path
        name: id_or_name
        required: true
        schema:
          type: string
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateApp'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateAppReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Update App
      tags:
      - Apps
      x-codegen-request-body-name: body
    put:
      operationId: UpdateApp
      parameters:
      - description: The id or the name of the entity to update
        in: path
        name: id_or_name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateAppReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Update App
      tags:
      - Apps
  /v1/secrets:
    get:
      operationId: ListSecrets
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - in: query
        name: limit
        schema:
          type: string
      - in: query
        name: offset
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListSecretsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Secrets
    post:
      operationId: CreateSecret
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateSecret'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateSecretReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Secrets
      x-codegen-request-body-name: body
  /v1/secrets/{id}:
    delete:
      operationId: DeleteSecret
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteSecretReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Secrets
    get:
      operationId: GetSecret
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetSecretReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Secrets
    patch:
      operationId: UpdateSecret2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Secret'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateSecretReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Secrets
      x-codegen-request-body-name: body
    put:
      operationId: UpdateSecret
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Secret'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateSecretReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Secrets
      x-codegen-request-body-name: body
  /v1/secrets/{id}/activities:
    get:
      operationId: GetSecretActivities
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: limit
        schema:
          type: string
      - in: query
        name: offset
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActivityList'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: View stack activities
      tags:
      - Secrets
components:
  schemas:
    google.protobuf.Any:
      example:
        value: value
        type_url: type_url
      properties:
        type_url:
          type: string
        value:
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
      type: object
    google.rpc.Status:
      example:
        code: 0
        details:
        - value: value
          type_url: type_url
        - value: value
          type_url: type_url
        message: message
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
        details:
          items:
            $ref: '#/components/schemas/google.protobuf.Any'
          type: array
      type: object
    Error:
      properties:
        status:
          format: int32
          type: integer
        code:
          type: string
        message:
          type: string
      type: object
    ErrorField:
      properties:
        field:
          type: string
        description:
          type: string
      type: object
    ErrorWithFields:
      properties:
        status:
          format: int32
          type: integer
        code:
          type: string
        message:
          type: string
        fields:
          items:
            $ref: '#/components/schemas/ErrorField'
          type: array
      type: object
    LogEntry:
      example:
        msg: msg
        instance_id: instance_id
        offset: offset
        stream: stream
        revision_id: revision_id
      properties:
        revision_id:
          title: TODO improve with offset return / resume
          type: string
        instance_id:
          type: string
        stream:
          type: string
        msg:
          type: string
        offset:
          format: int64
          type: string
      type: object
    GetRegionReply:
      example:
        region:
          datacenters:
          - datacenters
          - datacenters
          instances:
          - instances
          - instances
          name: name
          coordinates:
          - coordinates
          - coordinates
          id: id
          status: status
      properties:
        region:
          $ref: '#/components/schemas/Region'
      type: object
    ListRegionsReply:
      example:
        regions:
        - datacenters:
          - datacenters
          - datacenters
          instances:
          - instances
          - instances
          name: name
          coordinates:
          - coordinates
          - coordinates
          id: id
          status: status
        - datacenters:
          - datacenters
          - datacenters
          instances:
          - instances
          - instances
          name: name
          coordinates:
          - coordinates
          - coordinates
          id: id
          status: status
        offset: 6
        limit: 0
        count: 1
      properties:
        regions:
          items:
            $ref: '#/components/schemas/RegionListItem'
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        count:
          format: int64
          title: The total number of items
          type: integer
      type: object
    Region:
      example:
        datacenters:
        - datacenters
        - datacenters
        instances:
        - instances
        - instances
        name: name
        coordinates:
        - coordinates
        - coordinates
        id: id
        status: status
      properties:
        id:
          title: The id of the region
          type: string
        name:
          title: The name of the region
          type: string
        coordinates:
          items:
            type: string
          title: The coordinates of the region (lat/long)
          type: array
        status:
          title: The status of the region
          type: string
        instances:
          items:
            type: string
          title: A list of instances available in this region
          type: array
        datacenters:
          items:
            type: string
          title: A list of datacenters available in this region
          type: array
      type: object
    RegionListItem:
      example:
        datacenters:
        - datacenters
        - datacenters
        instances:
        - instances
        - instances
        name: name
        coordinates:
        - coordinates
        - coordinates
        id: id
        status: status
      properties:
        id:
          title: The id of the region
          type: string
        name:
          title: The name of the region
          type: string
        coordinates:
          items:
            type: string
          title: The coordinates of the region (lat/long)
          type: array
        status:
          title: The status of the region
          type: string
        instances:
          items:
            type: string
          title: A list of instances available in this region
          type: array
        datacenters:
          items:
            type: string
          title: A list of datacenters available in this region
          type: array
      type: object
    GetInstanceReply:
      example:
        instance:
          price_monthly: price_monthly
          disk: disk
          memory: memory
          regions:
          - regions
          - regions
          vcpu: 0
          description: description
          id: id
          price_hourly: price_hourly
          status: status
      properties:
        instance:
          $ref: '#/components/schemas/Instance'
      type: object
    Instance:
      example:
        price_monthly: price_monthly
        disk: disk
        memory: memory
        regions:
        - regions
        - regions
        vcpu: 0
        description: description
        id: id
        price_hourly: price_hourly
        status: status
      properties:
        id:
          title: The name of the instance
          type: string
        description:
          title: A short description of the instance
          type: string
        vcpu:
          format: int64
          title: The number of cpus
          type: integer
        memory:
          title: The memory in bytes in a format like 5MB
          type: string
        disk:
          title: The size of the disk in bytes in a format like 5MB
          type: string
        price_hourly:
          title: The price to pay per hour
          type: string
        price_monthly:
          title: The price to pay per month
          type: string
        regions:
          items:
            type: string
          title: The regions where this instance type is available
          type: array
        status:
          title: The status of the instance
          type: string
      type: object
    InstanceListItem:
      example:
        price_monthly: price_monthly
        disk: disk
        memory: memory
        regions:
        - regions
        - regions
        vcpu: 0
        description: description
        id: id
        price_hourly: price_hourly
        status: status
      properties:
        id:
          title: The name of the instance
          type: string
        description:
          title: A short description of the instance
          type: string
        vcpu:
          format: int64
          title: The number of cpus
          type: integer
        memory:
          title: The memory in bytes in a format like 5MB
          type: string
        disk:
          title: The size of the disk in bytes in a format like 5MB
          type: string
        price_hourly:
          title: The price to pay per hour
          type: string
        price_monthly:
          title: The price to pay per month
          type: string
        regions:
          items:
            type: string
          title: The regions where this instance type is available
          type: array
        status:
          title: The status of the instance
          type: string
      type: object
    ListInstancesReply:
      example:
        offset: 1
        instances:
        - price_monthly: price_monthly
          disk: disk
          memory: memory
          regions:
          - regions
          - regions
          vcpu: 0
          description: description
          id: id
          price_hourly: price_hourly
          status: status
        - price_monthly: price_monthly
          disk: disk
          memory: memory
          regions:
          - regions
          - regions
          vcpu: 0
          description: description
          id: id
          price_hourly: price_hourly
          status: status
        limit: 6
        count: 5
      properties:
        instances:
          items:
            $ref: '#/components/schemas/InstanceListItem'
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        count:
          format: int64
          title: The total number of items
          type: integer
      type: object
    google.protobuf.NullValue:
      default: NULL_VALUE
      description: |-
        `NullValue` is a singleton enumeration to represent the null value for the
        `Value` type union.

         The JSON representation for `NullValue` is JSON `null`.

         - NULL_VALUE: Null value.
      enum:
      - NULL_VALUE
      type: string
    Action:
      default: signin
      enum:
      - signin
      - signup
      - register
      type: string
    CannyAuthReply:
      example:
        token: token
      properties:
        token:
          type: string
      type: object
    CannyAuthRequest:
      type: object
    CreateAccountRequest:
      description: Create new account
      example:
        email: john@snow.com
        password: '...'
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
      required:
      - email
      - password
      title: Create new account
      type: object
    CreateCredential:
      example:
        name: name
        description: description
      properties:
        name:
          type: string
        description:
          type: string
      type: object
    Credential:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        user_id: user_id
        organization_id: organization_id
        name: name
        description: description
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        token: token
      properties:
        id:
          type: string
        name:
          type: string
        token:
          type: string
        description:
          type: string
        user_id:
          type: string
        organization_id:
          type: string
        updated_at:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
      type: object
    CredentialReply:
      example:
        credential:
          updated_at: 2000-01-23T04:56:07.000+00:00
          user_id: user_id
          organization_id: organization_id
          name: name
          description: description
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          token: token
      properties:
        credential:
          $ref: '#/components/schemas/Credential'
      type: object
    DeleteAccountReply:
      type: object
    GetOAuthOptionsReply:
      description: A list of providers which you can use for single sign-on.
      example:
        oauth_providers:
        - id: id
          state: state
          url: url
        - id: id
          state: state
          url: url
      properties:
        oauth_providers:
          items:
            $ref: '#/components/schemas/OAuthProvider'
          type: array
      type: object
    GetOrganizationReply:
      example:
        organization:
          country: country
          address2: address2
          city: city
          address1: address1
          vat_number: vat_number
          name: name
          company: true
          state: state
          postal_code: postal_code
          plan: plan
      properties:
        organization:
          $ref: '#/components/schemas/Organization'
      type: object
    GithubInstallationCallbackReply:
      type: object
    GithubInstallationCallbackRequest:
      example:
        setup_action: setup_action
        installation_id: installation_id
        state: state
      properties:
        installation_id:
          type: string
        setup_action:
          type: string
        state:
          type: string
      type: object
    GithubInstallationReply:
      example:
        app_name: app_name
        state: state
        app_id: app_id
        url: url
      properties:
        app_name:
          title: The github app name
          type: string
        app_id:
          format: int64
          title: The github app id
          type: string
        url:
          title: The url to start the installation flow
          type: string
        state:
          title: The state required by the protocol, it is only valid 10 minutes and
            encodes information about the type of flow
          type: string
      type: object
    GithubInstallationRepoListReply:
      example:
        repositories:
        - private: true
          name: name
          description: description
          default_branch: default_branch
          id: id
        - private: true
          name: name
          description: description
          default_branch: default_branch
          id: id
        installationId: installationId
      properties:
        repositories:
          items:
            $ref: '#/components/schemas/GithubRepo'
          type: array
        installationId:
          type: string
      type: object
    GithubRepo:
      example:
        private: true
        name: name
        description: description
        default_branch: default_branch
        id: id
      properties:
        id:
          type: string
        name:
          type: string
        private:
          type: boolean
        description:
          type: string
        default_branch:
          type: string
      type: object
    InviteUserRequest:
      example:
        name: name
        message: message
        email: email
      properties:
        email:
          type: string
        name:
          type: string
        message:
          type: string
      type: object
    ListCredentialsReply:
      example:
        offset: 6
        credentials:
        - updated_at: 2000-01-23T04:56:07.000+00:00
          user_id: user_id
          organization_id: organization_id
          name: name
          description: description
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          token: token
        - updated_at: 2000-01-23T04:56:07.000+00:00
          user_id: user_id
          organization_id: organization_id
          name: name
          description: description
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          token: token
        limit: 0
        count: 1
      properties:
        credentials:
          items:
            $ref: '#/components/schemas/Credential'
          type: array
        limit:
          format: int64
          type: integer
        offset:
          format: int64
          type: integer
        count:
          format: int64
          type: integer
      type: object
    LoginReply:
      example:
        token:
          id: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          expires: 0001-01-01T00:00:00Z
          user_id: 996d7822-6b58-11e9-956f-32001b70f000
          organization_id: 9f33b2c6-6b58-11e9-883c-32001b70f000
      properties:
        token:
          $ref: '#/components/schemas/Token'
      type: object
    LoginRequest:
      example:
        email: john@snow.com
        password: '...'
      properties:
        email:
          type: string
        password:
          type: string
      type: object
    LogoutReply:
      type: object
    OAuthCallbackReply:
      example:
        token:
          id: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          expires: 0001-01-01T00:00:00Z
          user_id: 996d7822-6b58-11e9-956f-32001b70f000
          organization_id: 9f33b2c6-6b58-11e9-883c-32001b70f000
      properties:
        token:
          $ref: '#/components/schemas/Token'
      type: object
    OAuthCallbackRequest:
      example:
        code: code
        state: state
      properties:
        state:
          title: The state created at the origin of the OAuth flow
          type: string
        code:
          title: The code returned by the OAuth provider
          type: string
      type: object
    OAuthProvider:
      example:
        id: id
        state: state
        url: url
      properties:
        id:
          title: The name of the provider (.e.g github, google)
          type: string
        url:
          title: The URL to call to initiate the OAuth flow
          type: string
        state:
          title: The OAuth state required by the protocol, it is only valid 10 minutes
            and encodes information about the type of flow
          type: string
      type: object
    Organization:
      example:
        country: country
        address2: address2
        city: city
        address1: address1
        vat_number: vat_number
        name: name
        company: true
        state: state
        postal_code: postal_code
        plan: plan
      properties:
        address1:
          type: string
        address2:
          type: string
        city:
          type: string
        postal_code:
          type: string
        state:
          type: string
        country:
          type: string
        company:
          type: boolean
        vat_number:
          type: string
        name:
          type: string
        plan:
          type: string
      type: object
    PasswordlessLoginReply:
      type: object
    PasswordlessLoginRequest:
      example:
        email: john@snow.com
      properties:
        email:
          type: string
      type: object
    ResendEmailValidationReply:
      type: object
    ResendEmailValidationRequest:
      type: object
    ResetPasswordReply:
      type: object
    ResetPasswordRequest:
      example:
        email: john@snow.com
      properties:
        email:
          type: string
      type: object
    Token:
      example:
        id: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expires: 0001-01-01T00:00:00Z
        user_id: 996d7822-6b58-11e9-956f-32001b70f000
        organization_id: 9f33b2c6-6b58-11e9-883c-32001b70f000
      properties:
        id:
          type: string
        user_id:
          type: string
        organization_id:
          type: string
        expires_at:
          format: date-time
          type: string
      type: object
    UpdateOrganizationReply:
      example:
        organization:
          country: country
          address2: address2
          city: city
          address1: address1
          vat_number: vat_number
          name: name
          company: true
          state: state
          postal_code: postal_code
          plan: plan
      properties:
        organization:
          $ref: '#/components/schemas/Organization'
      type: object
    UpdatePasswordRequest:
      example:
        id: '...'
        password: '...'
      properties:
        id:
          type: string
        password:
          type: string
      type: object
    UpdateUserRequest.UserUpdateBody:
      properties:
        id:
          type: string
        email:
          type: string
        current_password:
          type: string
        password:
          type: string
        newsletter_subscribed:
          type: boolean
        name:
          type: string
      type: object
    User:
      description: Represent a User
      example:
        id: 78352123-a06f-4ec2-81ed-27a056725385
        email: john@snow.com
        name: John Snow
        status: ACTIVE
        status_message: active
        avatar_url: https://www.gravatar.com/avatar/00000000000000000000000000000000
        verified: true
        is_admin: false
        is_test: true
        two_factor_authentication: false
        last_login: 0001-01-01T00:00:00Z
        last_login_id: 10.1.1.1
        updated_at: 0001-01-01T00:00:00Z
        created_at: 0001-01-01T00:00:00Z
        default_organization_id: 78352123-a06f-4ec2-81ed-27a056725385
        newsletter_subscribed: true
      properties:
        id:
          type: string
        email:
          type: string
        status:
          $ref: '#/components/schemas/User.AccountStatus'
        status_message:
          type: string
        avatar_url:
          type: string
        verified:
          type: boolean
        two_factor_authentication:
          type: boolean
        last_login:
          format: date-time
          type: string
        last_login_ip:
          type: string
        updated_at:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
        default_organization_id:
          type: string
        newsletter_subscribed:
          type: boolean
        github_id:
          type: string
        github_user:
          type: string
        flags:
          items:
            $ref: '#/components/schemas/UserFlags'
          type: array
        name:
          type: string
      title: User
      type: object
    User.AccountStatus:
      default: WARNING
      enum:
      - WARNING
      - LOCKED
      - ACTIVE
      type: string
    UserFlags:
      default: ADMIN
      enum:
      - ADMIN
      - TEST
      - RESTRICTED
      - ACTIVE
      - BETA
      title: |-
        - ADMIN: A user is an admin user
         - TEST: A user is a test user
         - RESTRICTED: Whether this account as restricted access
         - ACTIVE: Whether this account is active
         - BETA: Account in beta program
      type: string
    UserReply:
      example:
        user:
          id: 78352123-a06f-4ec2-81ed-27a056725385
          email: john@snow.com
          name: John Snow
          status: ACTIVE
          status_message: active
          avatar_url: https://www.gravatar.com/avatar/00000000000000000000000000000000
          verified: true
          is_admin: false
          is_test: true
          two_factor_authentication: false
          last_login: 0001-01-01T00:00:00Z
          last_login_id: 10.1.1.1
          updated_at: 0001-01-01T00:00:00Z
          created_at: 0001-01-01T00:00:00Z
          default_organization_id: 78352123-a06f-4ec2-81ed-27a056725385
          newsletter_subscribed: true
      properties:
        user:
          $ref: '#/components/schemas/User'
      type: object
    Activity:
      example:
        actor:
          metadata: '{}'
          deleted: true
          name: name
          id: id
          type: type
        metadata: '{}'
        verb: verb
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        object:
          metadata: '{}'
          deleted: true
          name: name
          id: id
          type: type
      properties:
        id:
          type: string
        actor:
          $ref: '#/components/schemas/Object'
        object:
          $ref: '#/components/schemas/Object'
        verb:
          type: string
        metadata:
          properties: {}
          type: object
        created_at:
          format: date-time
          type: string
      type: object
    ActivityList:
      example:
        offset: 6
        activities:
        - actor:
            metadata: '{}'
            deleted: true
            name: name
            id: id
            type: type
          metadata: '{}'
          verb: verb
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          object:
            metadata: '{}'
            deleted: true
            name: name
            id: id
            type: type
        - actor:
            metadata: '{}'
            deleted: true
            name: name
            id: id
            type: type
          metadata: '{}'
          verb: verb
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          object:
            metadata: '{}'
            deleted: true
            name: name
            id: id
            type: type
        limit: 0
        count: 1
      properties:
        activities:
          items:
            $ref: '#/components/schemas/Activity'
          type: array
        limit:
          format: int64
          type: integer
        offset:
          format: int64
          type: integer
        count:
          format: int64
          type: integer
      type: object
    Object:
      example:
        metadata: '{}'
        deleted: true
        name: name
        id: id
        type: type
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        metadata:
          properties: {}
          type: object
        deleted:
          type: boolean
      type: object
    Empty:
      type: object
    GithubHookReply:
      type: object
    Notification:
      example:
        is_read: true
        activity:
          actor:
            metadata: '{}'
            deleted: true
            name: name
            id: id
            type: type
          metadata: '{}'
          verb: verb
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          object:
            metadata: '{}'
            deleted: true
            name: name
            id: id
            type: type
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        is_seen: true
      properties:
        id:
          type: string
        activity:
          $ref: '#/components/schemas/Activity'
        is_read:
          type: boolean
        is_seen:
          type: boolean
        created_at:
          format: date-time
          type: string
      type: object
    NotificationList:
      example:
        is_read: true
        offset: 6
        unread: 5
        limit: 0
        count: 1
        is_seen: true
        notifications:
        - is_read: true
          activity:
            actor:
              metadata: '{}'
              deleted: true
              name: name
              id: id
              type: type
            metadata: '{}'
            verb: verb
            created_at: 2000-01-23T04:56:07.000+00:00
            id: id
            object:
              metadata: '{}'
              deleted: true
              name: name
              id: id
              type: type
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          is_seen: true
        - is_read: true
          activity:
            actor:
              metadata: '{}'
              deleted: true
              name: name
              id: id
              type: type
            metadata: '{}'
            verb: verb
            created_at: 2000-01-23T04:56:07.000+00:00
            id: id
            object:
              metadata: '{}'
              deleted: true
              name: name
              id: id
              type: type
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          is_seen: true
        unseen: 5
      properties:
        notifications:
          items:
            $ref: '#/components/schemas/Notification'
          type: array
        limit:
          format: int64
          type: integer
        offset:
          format: int64
          type: integer
        count:
          format: int64
          type: integer
        is_read:
          type: boolean
        is_seen:
          type: boolean
        unread:
          format: int64
          type: integer
        unseen:
          format: int64
          type: integer
      type: object
    CreateService:
      example:
        definition:
          routes:
          - path: path
            port: 0
          - path: path
            port: 0
          scaling:
            min: 1
            max: 5
          regions:
          - regions
          - regions
          git:
            reference: reference
            deploy_on_push: true
            repository: repository
          deployment_group: deployment_group
          name: name
          ports:
          - protocol: protocol
            port: 6
          - protocol: protocol
            port: 6
          env:
          - value: value
            key: key
            value_from_secret: value_from_secret
          - value: value
            key: key
            value_from_secret: value_from_secret
          instance_type: instance_type
          docker:
            args:
            - args
            - args
            image: image
            image_registry_secret: image_registry_secret
            command: command
      properties:
        definition:
          $ref: '#/components/schemas/ServiceDefinition'
      type: object
    CreateServiceReply:
      example:
        service:
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          state:
            desired_deployment:
              groups:
              - name: name
                revision_ids:
                - revision_ids
                - revision_ids
              - name: name
                revision_ids:
                - revision_ids
                - revision_ids
          app_id: app_id
          version: version
      properties:
        service:
          $ref: '#/components/schemas/Service'
      type: object
    DeleteServiceReply:
      type: object
    DeploymentState:
      example:
        groups:
        - name: name
          revision_ids:
          - revision_ids
          - revision_ids
        - name: name
          revision_ids:
          - revision_ids
          - revision_ids
      properties:
        groups:
          items:
            $ref: '#/components/schemas/DeploymentState.Group'
          type: array
      type: object
    DeploymentState.Group:
      example:
        name: name
        revision_ids:
        - revision_ids
        - revision_ids
      properties:
        name:
          type: string
        revision_ids:
          items:
            type: string
          type: array
      type: object
    DockerSource:
      example:
        args:
        - args
        - args
        image: image
        image_registry_secret: image_registry_secret
        command: command
      properties:
        image:
          type: string
        command:
          type: string
        args:
          items:
            type: string
          type: array
        image_registry_secret:
          type: string
      type: object
    Env:
      example:
        value: value
        key: key
        value_from_secret: value_from_secret
      properties:
        key:
          type: string
        value:
          type: string
        value_from_secret:
          type: string
      type: object
    FetchGatewayReply:
      properties:
        routes:
          items:
            $ref: '#/components/schemas/GatewayRoute'
          type: array
      type: object
    FetchInternalRevisionReply:
      properties:
        revision:
          $ref: '#/components/schemas/ServiceRevision'
      type: object
    FetchInternalServiceReply:
      properties:
        service:
          $ref: '#/components/schemas/Service'
      type: object
    GatewayRoute:
      properties:
        path:
          type: string
        deployment_group:
          type: string
        revision_id:
          type: string
        service_id:
          type: string
        port:
          format: int64
          type: integer
        datacenters:
          items:
            type: string
          type: array
      type: object
    GetServiceReply:
      example:
        service:
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          state:
            desired_deployment:
              groups:
              - name: name
                revision_ids:
                - revision_ids
                - revision_ids
              - name: name
                revision_ids:
                - revision_ids
                - revision_ids
          app_id: app_id
          version: version
      properties:
        service:
          $ref: '#/components/schemas/Service'
      type: object
    GetServiceRevisionReply:
      example:
        revision:
          updated_at: 2000-01-23T04:56:07.000+00:00
          child_id: child_id
          parent_id: parent_id
          organization_id: organization_id
          service_id: service_id
          created_at: 2000-01-23T04:56:07.000+00:00
          definition:
            routes:
            - path: path
              port: 0
            - path: path
              port: 0
            scaling:
              min: 1
              max: 5
            regions:
            - regions
            - regions
            git:
              reference: reference
              deploy_on_push: true
              repository: repository
            deployment_group: deployment_group
            name: name
            ports:
            - protocol: protocol
              port: 6
            - protocol: protocol
              port: 6
            env:
            - value: value
              key: key
              value_from_secret: value_from_secret
            - value: value
              key: key
              value_from_secret: value_from_secret
            instance_type: instance_type
            docker:
              args:
              - args
              - args
              image: image
              image_registry_secret: image_registry_secret
              command: command
          id: id
          state:
            status_message: status_message
            datacenters:
            - datacenters
            - datacenters
            instances:
            - status_message: status_message
              created_at: 2000-01-23T04:56:07.000+00:00
              datacenter: datacenter
              id: id
            - status_message: status_message
              created_at: 2000-01-23T04:56:07.000+00:00
              datacenter: datacenter
              id: id
            build_info:
              image: image
              build_job_id: build_job_id
              sha: sha
          app_id: app_id
          version: version
      properties:
        revision:
          $ref: '#/components/schemas/ServiceRevision'
      type: object
    GitSource:
      example:
        reference: reference
        deploy_on_push: true
        repository: repository
      properties:
        repository:
          description: 'A url to a git repository (contains the provider as well)
            .e.g: github.com/koyeb/test.'
          type: string
        reference:
          description: 'A git reference of the code that needs to be build (.e.g:
            refs/heads/my-branch refs/tags/my-tag deadbeef).'
          type: string
        deploy_on_push:
          description: If true a new revision will be triggered when the hash of the
            reference is pushed.
          type: boolean
      type: object
    ListInternalRevisionsReply:
      properties:
        ids:
          items:
            type: string
          type: array
        revision_ids:
          items:
            $ref: '#/components/schemas/ServiceRevisionId'
          type: array
      type: object
    ListInternalServicesReply:
      properties:
        ids:
          items:
            type: string
          type: array
        service_ids:
          items:
            $ref: '#/components/schemas/ServiceId'
          type: array
      type: object
    ListServiceRevisionsReply:
      example:
        offset: 6
        limit: 0
        count: 1
        revisions:
        - updated_at: 2000-01-23T04:56:07.000+00:00
          child_id: child_id
          deployment_group: deployment_group
          parent_id: parent_id
          organization_id: organization_id
          service_id: service_id
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          app_id: app_id
          version: version
        - updated_at: 2000-01-23T04:56:07.000+00:00
          child_id: child_id
          deployment_group: deployment_group
          parent_id: parent_id
          organization_id: organization_id
          service_id: service_id
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          app_id: app_id
          version: version
      properties:
        revisions:
          items:
            $ref: '#/components/schemas/ServiceRevisionListItem'
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        count:
          format: int64
          title: The total number of items
          type: integer
      type: object
    ListServicesReply:
      example:
        offset: 6
        limit: 0
        count: 1
        services:
        - updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          state:
            desired_deployment:
              groups:
              - name: name
                revision_ids:
                - revision_ids
                - revision_ids
              - name: name
                revision_ids:
                - revision_ids
                - revision_ids
          app_id: app_id
          version: version
        - updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          state:
            desired_deployment:
              groups:
              - name: name
                revision_ids:
                - revision_ids
                - revision_ids
              - name: name
                revision_ids:
                - revision_ids
                - revision_ids
          app_id: app_id
          version: version
      properties:
        services:
          items:
            $ref: '#/components/schemas/ServiceListItem'
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        count:
          format: int64
          title: The total number of items
          type: integer
      type: object
    Port:
      example:
        protocol: protocol
        port: 6
      properties:
        port:
          format: int64
          type: integer
        protocol:
          type: string
      type: object
    Route:
      example:
        path: path
        port: 0
      properties:
        port:
          format: int64
          type: integer
        path:
          type: string
      type: object
    Scaling:
      example:
        min: 1
        max: 5
      properties:
        min:
          format: int64
          type: integer
        max:
          format: int64
          type: integer
      type: object
    Service:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        organization_id: organization_id
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        state:
          desired_deployment:
            groups:
            - name: name
              revision_ids:
              - revision_ids
              - revision_ids
            - name: name
              revision_ids:
              - revision_ids
              - revision_ids
        app_id: app_id
        version: version
      properties:
        id:
          type: string
        name:
          type: string
        organization_id:
          type: string
        app_id:
          type: string
        updated_at:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
        version:
          format: uint64
          title: A version updated whenever this state changes (useful for caching)
          type: string
        state:
          $ref: '#/components/schemas/ServiceState'
      type: object
    ServiceDefinition:
      example:
        routes:
        - path: path
          port: 0
        - path: path
          port: 0
        scaling:
          min: 1
          max: 5
        regions:
        - regions
        - regions
        git:
          reference: reference
          deploy_on_push: true
          repository: repository
        deployment_group: deployment_group
        name: name
        ports:
        - protocol: protocol
          port: 6
        - protocol: protocol
          port: 6
        env:
        - value: value
          key: key
          value_from_secret: value_from_secret
        - value: value
          key: key
          value_from_secret: value_from_secret
        instance_type: instance_type
        docker:
          args:
          - args
          - args
          image: image
          image_registry_secret: image_registry_secret
          command: command
      properties:
        name:
          type: string
        routes:
          items:
            $ref: '#/components/schemas/Route'
          type: array
        ports:
          items:
            $ref: '#/components/schemas/Port'
          type: array
        env:
          items:
            $ref: '#/components/schemas/Env'
          type: array
        regions:
          items:
            type: string
          type: array
        scaling:
          $ref: '#/components/schemas/Scaling'
        instance_type:
          type: string
        deployment_group:
          type: string
        docker:
          $ref: '#/components/schemas/DockerSource'
        git:
          $ref: '#/components/schemas/GitSource'
      type: object
    ServiceId:
      properties:
        organization_id:
          type: string
        app_id:
          type: string
        service_id:
          type: string
      type: object
    ServiceInstance:
      example:
        status_message: status_message
        created_at: 2000-01-23T04:56:07.000+00:00
        datacenter: datacenter
        id: id
      properties:
        id:
          type: string
        datacenter:
          type: string
        status:
          $ref: '#/components/schemas/ServiceInstance.Status'
        status_message:
          type: string
        created_at:
          format: date-time
          type: string
      type: object
    ServiceInstance.Status:
      default: UNKNOWN
      enum:
      - UNKNOWN
      - STARTING
      - HEALTHY
      - UNHEALTHY
      - FAILED
      - STOPPED
      type: string
    ServiceListItem:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        organization_id: organization_id
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        state:
          desired_deployment:
            groups:
            - name: name
              revision_ids:
              - revision_ids
              - revision_ids
            - name: name
              revision_ids:
              - revision_ids
              - revision_ids
        app_id: app_id
        version: version
      properties:
        id:
          type: string
        name:
          type: string
        organization_id:
          type: string
        app_id:
          type: string
        updated_at:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
        version:
          format: uint64
          title: A version updated whenever this state changes (useful for caching)
          type: string
        state:
          $ref: '#/components/schemas/ServiceState'
      type: object
    ServiceRevision:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        child_id: child_id
        parent_id: parent_id
        organization_id: organization_id
        service_id: service_id
        created_at: 2000-01-23T04:56:07.000+00:00
        definition:
          routes:
          - path: path
            port: 0
          - path: path
            port: 0
          scaling:
            min: 1
            max: 5
          regions:
          - regions
          - regions
          git:
            reference: reference
            deploy_on_push: true
            repository: repository
          deployment_group: deployment_group
          name: name
          ports:
          - protocol: protocol
            port: 6
          - protocol: protocol
            port: 6
          env:
          - value: value
            key: key
            value_from_secret: value_from_secret
          - value: value
            key: key
            value_from_secret: value_from_secret
          instance_type: instance_type
          docker:
            args:
            - args
            - args
            image: image
            image_registry_secret: image_registry_secret
            command: command
        id: id
        state:
          status_message: status_message
          datacenters:
          - datacenters
          - datacenters
          instances:
          - status_message: status_message
            created_at: 2000-01-23T04:56:07.000+00:00
            datacenter: datacenter
            id: id
          - status_message: status_message
            created_at: 2000-01-23T04:56:07.000+00:00
            datacenter: datacenter
            id: id
          build_info:
            image: image
            build_job_id: build_job_id
            sha: sha
        app_id: app_id
        version: version
      properties:
        organization_id:
          type: string
        app_id:
          type: string
        service_id:
          type: string
        id:
          type: string
        updated_at:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
        parent_id:
          type: string
        child_id:
          type: string
        version:
          format: int64
          title: A version updated whenever this state changes (useful for caching)
          type: string
        definition:
          $ref: '#/components/schemas/ServiceDefinition'
        state:
          $ref: '#/components/schemas/ServiceRevisionState'
      type: object
    ServiceRevisionId:
      properties:
        organization_id:
          type: string
        app_id:
          type: string
        service_id:
          type: string
        revision_id:
          type: string
      type: object
    ServiceRevisionListItem:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        child_id: child_id
        deployment_group: deployment_group
        parent_id: parent_id
        organization_id: organization_id
        service_id: service_id
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        app_id: app_id
        version: version
      properties:
        organization_id:
          type: string
        app_id:
          type: string
        service_id:
          type: string
        id:
          type: string
        updated_at:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
        parent_id:
          type: string
        child_id:
          type: string
        version:
          format: int64
          title: A version updated whenever the state changes (useful for caching
            or CAS updates)
          type: string
        deployment_group:
          type: string
        status:
          $ref: '#/components/schemas/ServiceRevisionState.Status'
      type: object
    ServiceRevisionState:
      example:
        status_message: status_message
        datacenters:
        - datacenters
        - datacenters
        instances:
        - status_message: status_message
          created_at: 2000-01-23T04:56:07.000+00:00
          datacenter: datacenter
          id: id
        - status_message: status_message
          created_at: 2000-01-23T04:56:07.000+00:00
          datacenter: datacenter
          id: id
        build_info:
          image: image
          build_job_id: build_job_id
          sha: sha
      properties:
        instances:
          items:
            $ref: '#/components/schemas/ServiceInstance'
          title: Information about instances
          type: array
        status:
          $ref: '#/components/schemas/ServiceRevisionState.Status'
        status_message:
          title: Some extra information of the status
          type: string
        datacenters:
          items:
            type: string
          title: The datacenters this revision will run in
          type: array
        build_info:
          $ref: '#/components/schemas/ServiceRevisionState.BuildInfo'
      type: object
    ServiceRevisionState.BuildInfo:
      example:
        image: image
        build_job_id: build_job_id
        sha: sha
      properties:
        sha:
          description: The git sha for this build (we resolve the reference at the
            start of the build).
          type: string
        image:
          description: The docker image built as a result of this build.
          type: string
        build_job_id:
          description: The id of the job that ran the build.
          type: string
      type: object
    ServiceRevisionState.Status:
      default: UNKNOWN
      enum:
      - UNKNOWN
      - STARTING
      - ACTIVE
      - STOPPING
      - STOPPED
      - FAILED
      - BUILDING
      - TERMINATED
      type: string
    ServiceState:
      example:
        desired_deployment:
          groups:
          - name: name
            revision_ids:
            - revision_ids
            - revision_ids
          - name: name
            revision_ids:
            - revision_ids
            - revision_ids
      properties:
        desired_deployment:
          $ref: '#/components/schemas/DeploymentState'
        status:
          $ref: '#/components/schemas/ServiceState.Status'
      type: object
    ServiceState.Status:
      default: UNKNOWN
      enum:
      - UNKNOWN
      - CREATING
      - ACTIVE
      - STOPPING
      - STOPPED
      type: string
    UpdateRevisionStateReply:
      type: object
    UpdateService:
      example:
        definition:
          routes:
          - path: path
            port: 0
          - path: path
            port: 0
          scaling:
            min: 1
            max: 5
          regions:
          - regions
          - regions
          git:
            reference: reference
            deploy_on_push: true
            repository: repository
          deployment_group: deployment_group
          name: name
          ports:
          - protocol: protocol
            port: 6
          - protocol: protocol
            port: 6
          env:
          - value: value
            key: key
            value_from_secret: value_from_secret
          - value: value
            key: key
            value_from_secret: value_from_secret
          instance_type: instance_type
          docker:
            args:
            - args
            - args
            image: image
            image_registry_secret: image_registry_secret
            command: command
      properties:
        definition:
          $ref: '#/components/schemas/ServiceDefinition'
      type: object
    UpdateServiceReply:
      example:
        service:
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          state:
            desired_deployment:
              groups:
              - name: name
                revision_ids:
                - revision_ids
                - revision_ids
              - name: name
                revision_ids:
                - revision_ids
                - revision_ids
          app_id: app_id
          version: version
      properties:
        service:
          $ref: '#/components/schemas/Service'
      type: object
    UpdateServiceStateReply:
      type: object
    App:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        organization_id: organization_id
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        domains:
        - deployment_group: deployment_group
          name: name
        - deployment_group: deployment_group
          name: name
        id: id
      properties:
        id:
          type: string
        name:
          type: string
        organization_id:
          type: string
        updated_at:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
        domains:
          items:
            $ref: '#/components/schemas/Domain'
          type: array
      type: object
    AppListItem:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        organization_id: organization_id
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        domains:
        - deployment_group: deployment_group
          name: name
        - deployment_group: deployment_group
          name: name
        id: id
      properties:
        id:
          type: string
        name:
          type: string
        organization_id:
          type: string
        updated_at:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
        domains:
          items:
            $ref: '#/components/schemas/Domain'
          type: array
      type: object
    CreateApp:
      example:
        name: name
      properties:
        name:
          type: string
      type: object
    CreateAppReply:
      example:
        app:
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          domains:
          - deployment_group: deployment_group
            name: name
          - deployment_group: deployment_group
            name: name
          id: id
      properties:
        app:
          $ref: '#/components/schemas/App'
      type: object
    DeleteAppReply:
      type: object
    Domain:
      example:
        deployment_group: deployment_group
        name: name
      properties:
        name:
          type: string
        deployment_group:
          type: string
      type: object
    GetAppReply:
      example:
        app:
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          domains:
          - deployment_group: deployment_group
            name: name
          - deployment_group: deployment_group
            name: name
          id: id
      properties:
        app:
          $ref: '#/components/schemas/App'
      type: object
    GetInternalAppReply:
      properties:
        app:
          $ref: '#/components/schemas/App'
      type: object
    ListAppsReply:
      example:
        offset: 6
        limit: 0
        count: 1
        apps:
        - updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          domains:
          - deployment_group: deployment_group
            name: name
          - deployment_group: deployment_group
            name: name
          id: id
        - updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          domains:
          - deployment_group: deployment_group
            name: name
          - deployment_group: deployment_group
            name: name
          id: id
      properties:
        apps:
          items:
            $ref: '#/components/schemas/AppListItem'
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        count:
          format: int64
          title: The total number of items
          type: integer
      type: object
    UpdateApp:
      example:
        name: name
      properties:
        name:
          type: string
      type: object
    UpdateAppReply:
      example:
        app:
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          domains:
          - deployment_group: deployment_group
            name: name
          - deployment_group: deployment_group
            name: name
          id: id
      properties:
        app:
          $ref: '#/components/schemas/App'
      type: object
    CreateSecret:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    CreateSecretReply:
      example:
        secret:
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          value: value
      properties:
        secret:
          $ref: '#/components/schemas/Secret'
      type: object
    DeleteSecretReply:
      type: object
    GetSecretInternalReply:
      properties:
        secret:
          $ref: '#/components/schemas/InternalSecret'
      type: object
    GetSecretReply:
      example:
        secret:
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          value: value
      properties:
        secret:
          $ref: '#/components/schemas/Secret'
      type: object
    InternalSecret:
      properties:
        id:
          type: string
        name:
          type: string
        value:
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        organization_id:
          type: string
        updated_at:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
      type: object
    ListSecretsReply:
      example:
        offset: 6
        limit: 0
        count: 1
        secrets:
        - updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          value: value
        - updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          value: value
      properties:
        secrets:
          items:
            $ref: '#/components/schemas/Secret'
          type: array
        limit:
          format: int64
          type: integer
        offset:
          format: int64
          type: integer
        count:
          format: int64
          type: integer
      type: object
    Secret:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        organization_id: organization_id
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        value: value
      properties:
        id:
          type: string
        name:
          type: string
        value:
          type: string
        organization_id:
          type: string
        updated_at:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
      type: object
    UpdateSecretReply:
      example:
        secret:
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          value: value
      properties:
        secret:
          $ref: '#/components/schemas/Secret'
      type: object
    Stream_result_of_LogEntry:
      example:
        result:
          msg: msg
          instance_id: instance_id
          offset: offset
          stream: stream
          revision_id: revision_id
        error:
          code: 0
          details:
          - value: value
            type_url: type_url
          - value: value
            type_url: type_url
          message: message
      properties:
        result:
          $ref: '#/components/schemas/LogEntry'
        error:
          $ref: '#/components/schemas/google.rpc.Status'
      title: Stream result of LogEntry
      type: object
  securitySchemes:
    Bearer:
      in: header
      name: Authorization
      type: apiKey
x-tagGroups:
- name: Introduction
  tags:
  - intro
- name: API
  tags:
  - profile
  - organization
  - credentials
  - Secrets
  - activity
  - Catalog
  - stack
  - Functions
  - logs
  - store
  - S3Credentials
  - Connectors
  - Apps
  - Services
  - Regions
  - Instances
x-original-swagger-version: "2.0"
