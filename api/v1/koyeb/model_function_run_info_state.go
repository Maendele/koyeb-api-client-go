/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// FunctionRunInfoState the model 'FunctionRunInfoState'
type FunctionRunInfoState string

// List of FunctionRunInfo.State
const (
	FUNCTIONRUNINFOSTATE_UNKNOWN FunctionRunInfoState = "UNKNOWN"
	FUNCTIONRUNINFOSTATE_STARTING FunctionRunInfoState = "STARTING"
	FUNCTIONRUNINFOSTATE_RUNNING FunctionRunInfoState = "RUNNING"
	FUNCTIONRUNINFOSTATE_FAILED FunctionRunInfoState = "FAILED"
	FUNCTIONRUNINFOSTATE_SUCCEEDED FunctionRunInfoState = "SUCCEEDED"
	FUNCTIONRUNINFOSTATE_CANCELLED FunctionRunInfoState = "CANCELLED"
	FUNCTIONRUNINFOSTATE_TIMEOUT FunctionRunInfoState = "TIMEOUT"
)

var allowedFunctionRunInfoStateEnumValues = []FunctionRunInfoState{
	"UNKNOWN",
	"STARTING",
	"RUNNING",
	"FAILED",
	"SUCCEEDED",
	"CANCELLED",
	"TIMEOUT",
}

func (v *FunctionRunInfoState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FunctionRunInfoState(value)
	for _, existing := range allowedFunctionRunInfoStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FunctionRunInfoState", value)
}

// NewFunctionRunInfoStateFromValue returns a pointer to a valid FunctionRunInfoState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFunctionRunInfoStateFromValue(v string) (*FunctionRunInfoState, error) {
	ev := FunctionRunInfoState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FunctionRunInfoState: valid values are %v", v, allowedFunctionRunInfoStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FunctionRunInfoState) IsValid() bool {
	for _, existing := range allowedFunctionRunInfoStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FunctionRunInfo.State value
func (v FunctionRunInfoState) Ptr() *FunctionRunInfoState {
	return &v
}

type NullableFunctionRunInfoState struct {
	value *FunctionRunInfoState
	isSet bool
}

func (v NullableFunctionRunInfoState) Get() *FunctionRunInfoState {
	return v.value
}

func (v *NullableFunctionRunInfoState) Set(val *FunctionRunInfoState) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionRunInfoState) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionRunInfoState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionRunInfoState(val *FunctionRunInfoState) *NullableFunctionRunInfoState {
	return &NullableFunctionRunInfoState{value: val, isSet: true}
}

func (v NullableFunctionRunInfoState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionRunInfoState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

