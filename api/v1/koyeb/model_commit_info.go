/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// CommitInfo struct for CommitInfo
type CommitInfo struct {
	User *string `json:"user,omitempty"`
	Message *string `json:"message,omitempty"`
	Hash *string `json:"hash,omitempty"`
	AvatarUrl *string `json:"avatar_url,omitempty"`
	Origin *string `json:"origin,omitempty"`
}

// NewCommitInfo instantiates a new CommitInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitInfo() *CommitInfo {
	this := CommitInfo{}
	return &this
}

// NewCommitInfoWithDefaults instantiates a new CommitInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitInfoWithDefaults() *CommitInfo {
	this := CommitInfo{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *CommitInfo) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitInfo) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *CommitInfo) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *CommitInfo) SetUser(v string) {
	o.User = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *CommitInfo) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitInfo) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *CommitInfo) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *CommitInfo) SetMessage(v string) {
	o.Message = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *CommitInfo) GetHash() string {
	if o == nil || o.Hash == nil {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitInfo) GetHashOk() (*string, bool) {
	if o == nil || o.Hash == nil {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *CommitInfo) HasHash() bool {
	if o != nil && o.Hash != nil {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *CommitInfo) SetHash(v string) {
	o.Hash = &v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *CommitInfo) GetAvatarUrl() string {
	if o == nil || o.AvatarUrl == nil {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitInfo) GetAvatarUrlOk() (*string, bool) {
	if o == nil || o.AvatarUrl == nil {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *CommitInfo) HasAvatarUrl() bool {
	if o != nil && o.AvatarUrl != nil {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *CommitInfo) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *CommitInfo) GetOrigin() string {
	if o == nil || o.Origin == nil {
		var ret string
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitInfo) GetOriginOk() (*string, bool) {
	if o == nil || o.Origin == nil {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *CommitInfo) HasOrigin() bool {
	if o != nil && o.Origin != nil {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given string and assigns it to the Origin field.
func (o *CommitInfo) SetOrigin(v string) {
	o.Origin = &v
}

func (o CommitInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Hash != nil {
		toSerialize["hash"] = o.Hash
	}
	if o.AvatarUrl != nil {
		toSerialize["avatar_url"] = o.AvatarUrl
	}
	if o.Origin != nil {
		toSerialize["origin"] = o.Origin
	}
	return json.Marshal(toSerialize)
}

type NullableCommitInfo struct {
	value *CommitInfo
	isSet bool
}

func (v NullableCommitInfo) Get() *CommitInfo {
	return v.value
}

func (v *NullableCommitInfo) Set(val *CommitInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitInfo(val *CommitInfo) *NullableCommitInfo {
	return &NullableCommitInfo{value: val, isSet: true}
}

func (v NullableCommitInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


