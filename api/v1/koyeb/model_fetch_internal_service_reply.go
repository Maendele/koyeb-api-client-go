/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// FetchInternalServiceReply struct for FetchInternalServiceReply
type FetchInternalServiceReply struct {
	Service *Service `json:"service,omitempty"`
	Expand *bool `json:"expand,omitempty"`
}

// NewFetchInternalServiceReply instantiates a new FetchInternalServiceReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchInternalServiceReply() *FetchInternalServiceReply {
	this := FetchInternalServiceReply{}
	return &this
}

// NewFetchInternalServiceReplyWithDefaults instantiates a new FetchInternalServiceReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchInternalServiceReplyWithDefaults() *FetchInternalServiceReply {
	this := FetchInternalServiceReply{}
	return &this
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *FetchInternalServiceReply) GetService() Service {
	if o == nil || o.Service == nil {
		var ret Service
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchInternalServiceReply) GetServiceOk() (*Service, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *FetchInternalServiceReply) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given Service and assigns it to the Service field.
func (o *FetchInternalServiceReply) SetService(v Service) {
	o.Service = &v
}

// GetExpand returns the Expand field value if set, zero value otherwise.
func (o *FetchInternalServiceReply) GetExpand() bool {
	if o == nil || o.Expand == nil {
		var ret bool
		return ret
	}
	return *o.Expand
}

// GetExpandOk returns a tuple with the Expand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchInternalServiceReply) GetExpandOk() (*bool, bool) {
	if o == nil || o.Expand == nil {
		return nil, false
	}
	return o.Expand, true
}

// HasExpand returns a boolean if a field has been set.
func (o *FetchInternalServiceReply) HasExpand() bool {
	if o != nil && o.Expand != nil {
		return true
	}

	return false
}

// SetExpand gets a reference to the given bool and assigns it to the Expand field.
func (o *FetchInternalServiceReply) SetExpand(v bool) {
	o.Expand = &v
}

func (o FetchInternalServiceReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if o.Expand != nil {
		toSerialize["expand"] = o.Expand
	}
	return json.Marshal(toSerialize)
}

type NullableFetchInternalServiceReply struct {
	value *FetchInternalServiceReply
	isSet bool
}

func (v NullableFetchInternalServiceReply) Get() *FetchInternalServiceReply {
	return v.value
}

func (v *NullableFetchInternalServiceReply) Set(val *FetchInternalServiceReply) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchInternalServiceReply) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchInternalServiceReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchInternalServiceReply(val *FetchInternalServiceReply) *NullableFetchInternalServiceReply {
	return &NullableFetchInternalServiceReply{value: val, isSet: true}
}

func (v NullableFetchInternalServiceReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchInternalServiceReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


