/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// UpdateUserRequestUserUpdateBody struct for UpdateUserRequestUserUpdateBody
type UpdateUserRequestUserUpdateBody struct {
	Id *string `json:"id,omitempty"`
	Email *string `json:"email,omitempty"`
	CurrentPassword *string `json:"current_password,omitempty"`
	Password *string `json:"password,omitempty"`
	NewsletterSubscribed *bool `json:"newsletter_subscribed,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewUpdateUserRequestUserUpdateBody instantiates a new UpdateUserRequestUserUpdateBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserRequestUserUpdateBody() *UpdateUserRequestUserUpdateBody {
	this := UpdateUserRequestUserUpdateBody{}
	return &this
}

// NewUpdateUserRequestUserUpdateBodyWithDefaults instantiates a new UpdateUserRequestUserUpdateBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserRequestUserUpdateBodyWithDefaults() *UpdateUserRequestUserUpdateBody {
	this := UpdateUserRequestUserUpdateBody{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdateUserRequestUserUpdateBody) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequestUserUpdateBody) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdateUserRequestUserUpdateBody) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UpdateUserRequestUserUpdateBody) SetId(v string) {
	o.Id = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UpdateUserRequestUserUpdateBody) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequestUserUpdateBody) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UpdateUserRequestUserUpdateBody) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UpdateUserRequestUserUpdateBody) SetEmail(v string) {
	o.Email = &v
}

// GetCurrentPassword returns the CurrentPassword field value if set, zero value otherwise.
func (o *UpdateUserRequestUserUpdateBody) GetCurrentPassword() string {
	if o == nil || o.CurrentPassword == nil {
		var ret string
		return ret
	}
	return *o.CurrentPassword
}

// GetCurrentPasswordOk returns a tuple with the CurrentPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequestUserUpdateBody) GetCurrentPasswordOk() (*string, bool) {
	if o == nil || o.CurrentPassword == nil {
		return nil, false
	}
	return o.CurrentPassword, true
}

// HasCurrentPassword returns a boolean if a field has been set.
func (o *UpdateUserRequestUserUpdateBody) HasCurrentPassword() bool {
	if o != nil && o.CurrentPassword != nil {
		return true
	}

	return false
}

// SetCurrentPassword gets a reference to the given string and assigns it to the CurrentPassword field.
func (o *UpdateUserRequestUserUpdateBody) SetCurrentPassword(v string) {
	o.CurrentPassword = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UpdateUserRequestUserUpdateBody) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequestUserUpdateBody) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UpdateUserRequestUserUpdateBody) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UpdateUserRequestUserUpdateBody) SetPassword(v string) {
	o.Password = &v
}

// GetNewsletterSubscribed returns the NewsletterSubscribed field value if set, zero value otherwise.
func (o *UpdateUserRequestUserUpdateBody) GetNewsletterSubscribed() bool {
	if o == nil || o.NewsletterSubscribed == nil {
		var ret bool
		return ret
	}
	return *o.NewsletterSubscribed
}

// GetNewsletterSubscribedOk returns a tuple with the NewsletterSubscribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequestUserUpdateBody) GetNewsletterSubscribedOk() (*bool, bool) {
	if o == nil || o.NewsletterSubscribed == nil {
		return nil, false
	}
	return o.NewsletterSubscribed, true
}

// HasNewsletterSubscribed returns a boolean if a field has been set.
func (o *UpdateUserRequestUserUpdateBody) HasNewsletterSubscribed() bool {
	if o != nil && o.NewsletterSubscribed != nil {
		return true
	}

	return false
}

// SetNewsletterSubscribed gets a reference to the given bool and assigns it to the NewsletterSubscribed field.
func (o *UpdateUserRequestUserUpdateBody) SetNewsletterSubscribed(v bool) {
	o.NewsletterSubscribed = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateUserRequestUserUpdateBody) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequestUserUpdateBody) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateUserRequestUserUpdateBody) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateUserRequestUserUpdateBody) SetName(v string) {
	o.Name = &v
}

func (o UpdateUserRequestUserUpdateBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.CurrentPassword != nil {
		toSerialize["current_password"] = o.CurrentPassword
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.NewsletterSubscribed != nil {
		toSerialize["newsletter_subscribed"] = o.NewsletterSubscribed
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateUserRequestUserUpdateBody struct {
	value *UpdateUserRequestUserUpdateBody
	isSet bool
}

func (v NullableUpdateUserRequestUserUpdateBody) Get() *UpdateUserRequestUserUpdateBody {
	return v.value
}

func (v *NullableUpdateUserRequestUserUpdateBody) Set(val *UpdateUserRequestUserUpdateBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserRequestUserUpdateBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserRequestUserUpdateBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserRequestUserUpdateBody(val *UpdateUserRequestUserUpdateBody) *NullableUpdateUserRequestUserUpdateBody {
	return &NullableUpdateUserRequestUserUpdateBody{value: val, isSet: true}
}

func (v NullableUpdateUserRequestUserUpdateBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserRequestUserUpdateBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


