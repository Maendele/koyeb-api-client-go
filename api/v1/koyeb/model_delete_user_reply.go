/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// DeleteUserReply struct for DeleteUserReply
type DeleteUserReply struct {
	User *User `json:"user,omitempty"`
}

// NewDeleteUserReply instantiates a new DeleteUserReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteUserReply() *DeleteUserReply {
	this := DeleteUserReply{}
	return &this
}

// NewDeleteUserReplyWithDefaults instantiates a new DeleteUserReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteUserReplyWithDefaults() *DeleteUserReply {
	this := DeleteUserReply{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *DeleteUserReply) GetUser() User {
	if o == nil || isNil(o.User) {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteUserReply) GetUserOk() (*User, bool) {
	if o == nil || isNil(o.User) {
    return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *DeleteUserReply) HasUser() bool {
	if o != nil && !isNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *DeleteUserReply) SetUser(v User) {
	o.User = &v
}

func (o DeleteUserReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.User) {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableDeleteUserReply struct {
	value *DeleteUserReply
	isSet bool
}

func (v NullableDeleteUserReply) Get() *DeleteUserReply {
	return v.value
}

func (v *NullableDeleteUserReply) Set(val *DeleteUserReply) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteUserReply) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteUserReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteUserReply(val *DeleteUserReply) *NullableDeleteUserReply {
	return &NullableDeleteUserReply{value: val, isSet: true}
}

func (v NullableDeleteUserReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteUserReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


