/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// NeonPostgresSummary struct for NeonPostgresSummary
type NeonPostgresSummary struct {
	Total *string `json:"total,omitempty"`
	ByInstanceType *map[string]string `json:"by_instance_type,omitempty"`
}

// NewNeonPostgresSummary instantiates a new NeonPostgresSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNeonPostgresSummary() *NeonPostgresSummary {
	this := NeonPostgresSummary{}
	return &this
}

// NewNeonPostgresSummaryWithDefaults instantiates a new NeonPostgresSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNeonPostgresSummaryWithDefaults() *NeonPostgresSummary {
	this := NeonPostgresSummary{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *NeonPostgresSummary) GetTotal() string {
	if o == nil || isNil(o.Total) {
		var ret string
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeonPostgresSummary) GetTotalOk() (*string, bool) {
	if o == nil || isNil(o.Total) {
    return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *NeonPostgresSummary) HasTotal() bool {
	if o != nil && !isNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given string and assigns it to the Total field.
func (o *NeonPostgresSummary) SetTotal(v string) {
	o.Total = &v
}

// GetByInstanceType returns the ByInstanceType field value if set, zero value otherwise.
func (o *NeonPostgresSummary) GetByInstanceType() map[string]string {
	if o == nil || isNil(o.ByInstanceType) {
		var ret map[string]string
		return ret
	}
	return *o.ByInstanceType
}

// GetByInstanceTypeOk returns a tuple with the ByInstanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeonPostgresSummary) GetByInstanceTypeOk() (*map[string]string, bool) {
	if o == nil || isNil(o.ByInstanceType) {
    return nil, false
	}
	return o.ByInstanceType, true
}

// HasByInstanceType returns a boolean if a field has been set.
func (o *NeonPostgresSummary) HasByInstanceType() bool {
	if o != nil && !isNil(o.ByInstanceType) {
		return true
	}

	return false
}

// SetByInstanceType gets a reference to the given map[string]string and assigns it to the ByInstanceType field.
func (o *NeonPostgresSummary) SetByInstanceType(v map[string]string) {
	o.ByInstanceType = &v
}

func (o NeonPostgresSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !isNil(o.ByInstanceType) {
		toSerialize["by_instance_type"] = o.ByInstanceType
	}
	return json.Marshal(toSerialize)
}

type NullableNeonPostgresSummary struct {
	value *NeonPostgresSummary
	isSet bool
}

func (v NullableNeonPostgresSummary) Get() *NeonPostgresSummary {
	return v.value
}

func (v *NullableNeonPostgresSummary) Set(val *NeonPostgresSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableNeonPostgresSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableNeonPostgresSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNeonPostgresSummary(val *NeonPostgresSummary) *NullableNeonPostgresSummary {
	return &NullableNeonPostgresSummary{value: val, isSet: true}
}

func (v NullableNeonPostgresSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNeonPostgresSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


