/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// GithubInstallationRepoListReply struct for GithubInstallationRepoListReply
type GithubInstallationRepoListReply struct {
	Repositories *[]GithubRepo `json:"repositories,omitempty"`
	InstallationId *string `json:"installationId,omitempty"`
}

// NewGithubInstallationRepoListReply instantiates a new GithubInstallationRepoListReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubInstallationRepoListReply() *GithubInstallationRepoListReply {
	this := GithubInstallationRepoListReply{}
	return &this
}

// NewGithubInstallationRepoListReplyWithDefaults instantiates a new GithubInstallationRepoListReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubInstallationRepoListReplyWithDefaults() *GithubInstallationRepoListReply {
	this := GithubInstallationRepoListReply{}
	return &this
}

// GetRepositories returns the Repositories field value if set, zero value otherwise.
func (o *GithubInstallationRepoListReply) GetRepositories() []GithubRepo {
	if o == nil || o.Repositories == nil {
		var ret []GithubRepo
		return ret
	}
	return *o.Repositories
}

// GetRepositoriesOk returns a tuple with the Repositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubInstallationRepoListReply) GetRepositoriesOk() (*[]GithubRepo, bool) {
	if o == nil || o.Repositories == nil {
		return nil, false
	}
	return o.Repositories, true
}

// HasRepositories returns a boolean if a field has been set.
func (o *GithubInstallationRepoListReply) HasRepositories() bool {
	if o != nil && o.Repositories != nil {
		return true
	}

	return false
}

// SetRepositories gets a reference to the given []GithubRepo and assigns it to the Repositories field.
func (o *GithubInstallationRepoListReply) SetRepositories(v []GithubRepo) {
	o.Repositories = &v
}

// GetInstallationId returns the InstallationId field value if set, zero value otherwise.
func (o *GithubInstallationRepoListReply) GetInstallationId() string {
	if o == nil || o.InstallationId == nil {
		var ret string
		return ret
	}
	return *o.InstallationId
}

// GetInstallationIdOk returns a tuple with the InstallationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubInstallationRepoListReply) GetInstallationIdOk() (*string, bool) {
	if o == nil || o.InstallationId == nil {
		return nil, false
	}
	return o.InstallationId, true
}

// HasInstallationId returns a boolean if a field has been set.
func (o *GithubInstallationRepoListReply) HasInstallationId() bool {
	if o != nil && o.InstallationId != nil {
		return true
	}

	return false
}

// SetInstallationId gets a reference to the given string and assigns it to the InstallationId field.
func (o *GithubInstallationRepoListReply) SetInstallationId(v string) {
	o.InstallationId = &v
}

func (o GithubInstallationRepoListReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Repositories != nil {
		toSerialize["repositories"] = o.Repositories
	}
	if o.InstallationId != nil {
		toSerialize["installationId"] = o.InstallationId
	}
	return json.Marshal(toSerialize)
}

type NullableGithubInstallationRepoListReply struct {
	value *GithubInstallationRepoListReply
	isSet bool
}

func (v NullableGithubInstallationRepoListReply) Get() *GithubInstallationRepoListReply {
	return v.value
}

func (v *NullableGithubInstallationRepoListReply) Set(val *GithubInstallationRepoListReply) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubInstallationRepoListReply) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubInstallationRepoListReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubInstallationRepoListReply(val *GithubInstallationRepoListReply) *NullableGithubInstallationRepoListReply {
	return &NullableGithubInstallationRepoListReply{value: val, isSet: true}
}

func (v NullableGithubInstallationRepoListReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubInstallationRepoListReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


