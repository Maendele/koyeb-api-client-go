{
  "swagger": "2.0",
  "info": {
    "title": "Koyeb Rest API",
    "description": "The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests.\n",
    "version": "1.0.0"
  },
  "host": "app.koyeb.com",
  "schemes": [
    "https"
  ],
  "security": [
    {
      "Bearer": []
    }
  ],
  "tags": [
    {
      "name": "intro",
      "x-displayName": "Introduction",
      "x-traitTag": true,
      "description": "Welcome to the Koyeb API documentation.\n\nThe Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests.\nThe API has predictable resource-oriented URLs, allowing you to request, retrieve and execute actions on resources efficiently.\n\nThe API returns JSON-encoded responses and uses standard HTTP response codes, and verbs.\n\nAll of the functionality available in the Koyeb Control Panel is also available via the API, allowing you to automate repetitive and complex actions as required.\n\nAll production API requests are made to:\n\n- https://api.koyeb.com/<version>\n\nAll data is sent and received as JSON.\n\n## Constructing Requests\n\nRequests are made of three components:\n\n- Base URL: `https://api.koyeb.com`\n- API Version: `v1`\n- Resource path: `apps`\n\nTo construct a proper request, you need to format the URL as follows:\n\n`https://api.koyeb.com/{version}/{resource}`\n\nExample: `https://api.koyeb.com/v1/apps`\n\nThe following code is an example request to retrieve the list of Apps.\n\n```\n%curl -H 'Authorization: Bearer 1111-1111-1111-1111-1111' https://api.koyeb.com/v1/storage/apps\n{\n  \"apps\": [\n    {\n      \"id\": \"e267e09d-a2ef-4672-95c7-bf88d787a274\",\n      \"name\": \"demo\",\n      \"organization_id\": \"c402bcad-d06d-4fd6-8af2-08b790c0e249\",\n      \"updated_at\": \"2021-04-26T08:28:59.221274Z\",\n      \"created_at\": \"2021-04-26T08:28:59.221274Z\",\n      \"domains\": [\n        {\n          \"name\": \"demo-koyeb.koyeb.app\",\n          \"deployment_group\": \"prod\"\n        }\n      ]\n    },\n    {\n      \"id\": \"e38caea5-5acb-4fec-aa65-81749546b470\",\n      \"name\": \"www\",\n      \"organization_id\": \"c402bcad-d06d-4fd6-8af2-08b790c0e249\",\n      \"updated_at\": \"2021-05-04T08:56:40.557792Z\",\n      \"created_at\": \"2021-05-04T08:56:40.557792Z\",\n      \"domains\": [\n        {\n          \"name\": \"www-koyeb.koyeb.app\",\n          \"deployment_group\": \"prod\"\n        }\n      ]\n    }\n  ],\n  \"limit\": 20,\n  \"offset\": 0,\n  \"count\": 2\n}\n```\n\n# Authentication\n\nThe Koyeb API uses API keys to authenticate requests. You can view and manage your API keys in the Koyeb Control Panel.\n\nYour API keys carry many privileges. Take care to keep them secure! Do not share your secret API keys in publicly accessible areas such as GitHub, Slack, client-side code, and so forth.\n\nTo make an authenticated request, include a bearer-type Authorization header containing your API key.\n\nAll API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.\n\n# Errors\n\nWe use conventional HTTP response codes to indicate the success or failure of an API request.\n\nIn general, codes in the 2xx range indicate success, codes in the 4xx range indicate an error that resulted from the provided information (e.g., a required parameter is missing, resource not found), and codes in the 5xx range indicate an error with our servers.\n\n## HTTP Status Code Summary\n\n- `200 OK` - Everything worked as expected.\n- `400 Bad Request` - Often missing a required parameter.\n- `401 Unauthorized` - No valid API key provided.\n- `402 Request Failed` - Parameters were valid, but the request failed.\n- `403 Forbidden` - Insufficient privileges to access the requested resource.\n- `404 Not Found` - The requested item doesn't exist.\n- `50x` Server errors - Something went wrong on the API domain's end.\n\nInput and output data must be valid JSON with the appropriate Content-Type header set.\n\n## Attributes\n\n- code:\n\n  - `invalid_argument`: Occur when your request has invalid parameters.\n  - `unknown_resource`: Occur when the resource doesn't exist.\n  - `authentication_error`: Arise when there is a problem with authentication.\n  - `rate_limit_error`: Too many requests hit the API too quickly.\n  - `authorization_required`: You don't have sufficient right to access the resource.\n  - `api_error`: API errors use in case of a problem with api domain's servers (extremely uncommon).\n\n- message:\n\n  - A human-readable error giving more details about the error\n\n- status:\n\n  - The HTTP code returned by the server.\n\n- fields (Optional):\n\n  - An array of parameters with a human-readable message giving more details about the error.\n\n## Errors responses example\n\nResponse 400 (application/json)\n\n```\n{\n  \"status\": 400,\n  \"code\": \"invalid_argument\",\n  \"message\": \"Invalid argument\",\n  \"fields\": [\n    {\n      \"field\": \"definition.docker.image\",\n      \"description\": \"cannot be blank\"\n    }\n  ]\n}\n```\n\nResponse 401 (application/json)\n\n```\n{\n  \"status\": 401,\n  \"code\": \"authentication_error\",\n  \"message\": \"Request unauthenticated with bearer\"\n}\n```\n\nResponse 403 (application/json)\n\n```\n{\n  \"status\": 403,\n  \"code\": \"authentication_required\",\n  \"message\": \"You don't have the requested permission to access to resource.\"\n}\n```\n\n\nResponse 404 (application/json)\n\n```\n{\n  \"status\": 404,\n  \"code\": \"unknown_resource\",\n  \"message\": \"App not found\"\n}\n```\n\n# Pagination\n\nAll top-level API resources receive a paginated response. For instance, list Apps, list Services, and others share a standard structure, taking two parameters: limit and offset.\n\n**Paginated request**\n\nRequests against paginated endpoints accept two query string arguments:\n\n* *limit*, a positive integer lower or equal to 100 to select the number of items to display.\n* *offset*, an integer to indicate the position to start at.\n\nPaginated endpoints usually also accept filters to search and sort results.\nThese filters are documented along with each endpoint documentation.\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Introduction",
      "tags": [
        "intro"
      ]
    },
    {
      "name": "API",
      "tags": [
        "profile",
        "organization",
        "credentials",
        "Secrets",
        "activity",
        "Catalog",
        "stack",
        "Functions",
        "logs",
        "store",
        "S3Credentials",
        "Connectors",
        "Apps",
        "Services",
        "Regions",
        "Instances"
      ]
    }
  ],
  "paths": {
    "/v1/apps/{app_id_or_name}/services/{service_id_or_name}/revisions/{revision_id}/instances/{instance_id}/logs/{stream}/tail": {
      "get": {
        "operationId": "TailInstanceLogs",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/LogEntry"
                },
                "error": {
                  "$ref": "#/definitions/google.rpc.Status"
                }
              },
              "title": "Stream result of LogEntry"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "service_id_or_name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "revision_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "stream",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "-1 is from the end, 0 is from the start anything else is from this offset in the file.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "logs"
        ]
      }
    },
    "/v1/regions": {
      "get": {
        "summary": "List Region",
        "operationId": "ListRegions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListRegionsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "(Optional) The number of items to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "(Optional) A filter for regions.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Regions"
        ]
      }
    },
    "/v1/regions/{id}": {
      "get": {
        "summary": "Get Region",
        "operationId": "GetRegion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetRegionReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The name of the region",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Regions"
        ]
      }
    },
    "/v1/instances": {
      "get": {
        "summary": "List Instance",
        "operationId": "ListInstances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListInstancesReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "(Optional) The number of items to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "(Optional) A filter for instances.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Instances"
        ]
      }
    },
    "/v1/instances/{id}": {
      "get": {
        "summary": "Get Instance",
        "operationId": "GetInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetInstanceReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The name of the instance",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Instances"
        ]
      }
    },
    "/v1/account/activities": {
      "get": {
        "operationId": "GetAccountActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActivityList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "activity"
        ]
      }
    },
    "/v1/account/invite": {
      "post": {
        "operationId": "CreateInvite",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InviteUserRequest"
            }
          }
        ],
        "tags": [
          "invite"
        ]
      }
    },
    "/v1/account/login": {
      "post": {
        "summary": "Login user",
        "operationId": "Login",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "tags": [
          "session"
        ]
      }
    },
    "/v1/account/logout": {
      "delete": {
        "summary": "Logout user",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LogoutReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "tags": [
          "session"
        ]
      }
    },
    "/v1/account/oauth": {
      "get": {
        "summary": "Get OAuth Providers",
        "operationId": "GetOAuthOptions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetOAuthOptionsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "action",
            "description": "Which authentication flow is being initiated.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "signin",
              "signup",
              "register"
            ],
            "default": "signin"
          },
          {
            "name": "metadata",
            "description": "A small (limited to 400 characters) string of arbitrary metadata which will be encoded in the state.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "profile"
        ]
      },
      "post": {
        "summary": "Authenticate using OAuth",
        "operationId": "OAuthCallback",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/OAuthCallbackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OAuthCallbackRequest"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/passwordless_login": {
      "post": {
        "operationId": "PasswordlessLogin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/PasswordlessLoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordlessLoginRequest"
            }
          }
        ],
        "tags": [
          "session"
        ]
      }
    },
    "/v1/account/profile": {
      "get": {
        "operationId": "GetCurrentUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "tags": [
          "profile"
        ]
      },
      "delete": {
        "operationId": "DeleteAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteAccountReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "tags": [
          "profile"
        ]
      },
      "put": {
        "operationId": "UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserRequest.UserUpdateBody"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "profile"
        ]
      },
      "patch": {
        "operationId": "UpdateUser2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserRequest.UserUpdateBody"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/refresh": {
      "put": {
        "summary": "Refresh token",
        "operationId": "RefreshToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "tags": [
          "session"
        ]
      }
    },
    "/v1/account/resend_validation": {
      "post": {
        "operationId": "ResendEmailValidation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ResendEmailValidationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResendEmailValidationRequest"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/reset_password": {
      "post": {
        "operationId": "ResetPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ResetPasswordReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPasswordRequest"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/signup": {
      "post": {
        "operationId": "Signup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAccountRequest"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/update_password": {
      "post": {
        "operationId": "UpdatePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePasswordRequest"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/validate/{id}": {
      "post": {
        "operationId": "Validate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/credentials": {
      "get": {
        "operationId": "ListCredentials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListCredentialsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "credentials"
        ]
      },
      "post": {
        "operationId": "CreateCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCredential"
            }
          }
        ],
        "tags": [
          "credentials"
        ]
      }
    },
    "/v1/credentials/{id}": {
      "get": {
        "operationId": "GetCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "credentials"
        ]
      },
      "delete": {
        "operationId": "DeleteCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "credentials"
        ]
      },
      "put": {
        "operationId": "UpdateCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "credentials"
        ]
      },
      "patch": {
        "operationId": "UpdateCredential2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "credentials"
        ]
      }
    },
    "/v1/github/installation": {
      "get": {
        "summary": "Start github installation",
        "operationId": "GithubInstallation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GithubInstallationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "metadata",
            "description": "A small (limited to 400 characters) string of arbitrary metadata which will be encoded in the state.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/github/installation/callback": {
      "post": {
        "summary": "Github callback for app installation",
        "operationId": "GithubInstallationCallback",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GithubInstallationCallbackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GithubInstallationCallbackRequest"
            }
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/github/installation/repositories": {
      "get": {
        "summary": "List Github repos of the organization",
        "operationId": "GithubInstallationRepoList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GithubInstallationRepoListReply"
            }
          },
          "400": {
            "description": "Organization is not linked to a github organization",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "": "{ \"status\": \"400\", \"code\": \"failed_precondition\", \"message\": \"No github Installation\" }"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "The page id (starting from 1): Maps to: https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "perPage",
            "description": "The number of page elements per page (max 100): Maps to: https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/organizations/{id}": {
      "get": {
        "summary": "Get organization",
        "operationId": "GetOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetOrganizationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "organization"
        ]
      },
      "put": {
        "summary": "Update organization",
        "operationId": "UpdateOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateOrganizationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "organization"
        ]
      },
      "patch": {
        "summary": "Update organization",
        "operationId": "UpdateOrganization2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateOrganizationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/s3_credentials": {
      "get": {
        "operationId": "ListS3Credentials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListS3CredentialsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "s3Credentials"
        ]
      },
      "post": {
        "operationId": "CreateS3Credential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/S3CredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateS3Credential"
            }
          }
        ],
        "tags": [
          "s3Credentials"
        ]
      }
    },
    "/v1/s3_credentials/{id}": {
      "get": {
        "operationId": "GetS3Credential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/S3CredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "s3Credentials"
        ]
      },
      "delete": {
        "operationId": "DeleteS3Credential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "s3Credentials"
        ]
      },
      "put": {
        "operationId": "UpdateS3Credential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/S3CredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/S3Credential"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "s3Credentials"
        ]
      },
      "patch": {
        "operationId": "UpdateS3Credential2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/S3CredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/S3Credential"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "s3Credentials"
        ]
      }
    },
    "/v1/sso/canny": {
      "post": {
        "operationId": "CannyAuth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CannyAuthReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CannyAuthRequest"
            }
          }
        ],
        "tags": [
          "sso"
        ]
      }
    },
    "/v1/activities": {
      "get": {
        "operationId": "ListActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActivityList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "activity"
        ]
      }
    },
    "/v1/hooks/github/payload": {
      "post": {
        "summary": "Github hook receiver",
        "description": "An implementation of github hooks. The payload is a freefrom JSON and the response will always be empty.",
        "operationId": "Github",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GithubHookReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "hooks"
        ],
        "externalDocs": {
          "description": "github documentation",
          "url": "https://developer.github.com/webhooks/"
        }
      }
    },
    "/v1/notifications": {
      "get": {
        "operationId": "ListNotifications",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/NotificationList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mark_read",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mark_seen",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "unread",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "unseen",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "activity"
        ]
      }
    },
    "/v1/catalog/functions": {
      "get": {
        "summary": "Show catalog of functions",
        "operationId": "ListCatalogFunctions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListCatalogFunctionsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    },
    "/v1/catalog/functions/{name}": {
      "get": {
        "summary": "Fetch an item of the function catalog",
        "operationId": "GetCatalogFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetCatalogFunctionsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the function",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "An optional function version, if it is not set return the latest.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    },
    "/v1/catalog/stacks": {
      "get": {
        "summary": "Show catalog of stacks",
        "operationId": "ListCatalogStacks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListCatalogStacksReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    },
    "/v1/catalog/stacks/{name}": {
      "get": {
        "summary": "Fetch an item of the stack catalog",
        "operationId": "GetCatalogStack",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetCatalogStackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    },
    "/v1/catalog/stores": {
      "get": {
        "summary": "Show catalog of stores",
        "operationId": "ListCatalogStores",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListCatalogStoresReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    },
    "/v1/catalog/stores/{name}": {
      "get": {
        "summary": "Fetch an item of the store catalog",
        "operationId": "GetCatalogStore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CatalogStoreReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    },
    "/v1/connectors": {
      "get": {
        "summary": "List connectors",
        "operationId": "ListConnectors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListConnectorsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "(Optional) The number of items to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name_filter",
            "description": "(Optional) Filter by name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "description": "(Optional) A way to retrieve connectors only of a specific type.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "unknown",
              "cloudevent",
              "webhook"
            ],
            "default": "unknown"
          }
        ],
        "tags": [
          "Connectors"
        ]
      },
      "post": {
        "summary": "Create a new connector",
        "operationId": "CreateConnector",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateConnectorReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectorUpsert"
            }
          }
        ],
        "tags": [
          "Connectors"
        ]
      }
    },
    "/v1/connectors/{idOrName}": {
      "get": {
        "summary": "Fetch a connector",
        "operationId": "GetConnector",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetConnectorReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Connectors"
        ]
      },
      "delete": {
        "summary": "Delete a connector",
        "operationId": "DeleteConnector",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteConnectorReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Connectors"
        ]
      },
      "put": {
        "summary": "Update a connector",
        "operationId": "UpdateConnector",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateConnectorReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectorUpsert"
            }
          }
        ],
        "tags": [
          "Connectors"
        ]
      }
    },
    "/v1/connectors/{idOrName}/logs/tail": {
      "get": {
        "operationId": "TailConnectorLogs",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/LogEntry"
                },
                "error": {
                  "$ref": "#/definitions/google.rpc.Status"
                }
              },
              "title": "Stream result of LogEntry"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The id or name of the connector to tail",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "description": "A timestamp to indicate when to pull the logs from.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "logs"
        ]
      }
    },
    "/v1/secrets": {
      "get": {
        "operationId": "ListSecrets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListSecretsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      },
      "post": {
        "operationId": "CreateSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSecret"
            }
          }
        ],
        "tags": [
          "Secrets"
        ]
      }
    },
    "/v1/secrets/{id}": {
      "get": {
        "operationId": "GetSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      },
      "delete": {
        "operationId": "DeleteSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      },
      "put": {
        "operationId": "UpdateSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      },
      "patch": {
        "operationId": "UpdateSecret2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      }
    },
    "/v1/secrets/{id}/activities": {
      "get": {
        "summary": "View stack activities",
        "operationId": "GetSecretActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActivityList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      }
    },
    "/v1/stacks": {
      "get": {
        "summary": "List stacks",
        "operationId": "ListStacks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListStacksReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repository.type",
            "description": "Where the repo lives.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "GITHUB"
            ],
            "default": "GITHUB"
          },
          {
            "name": "repository.name",
            "description": "The url to find the repo (.e.g: koyeb/gateway).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repository.branch",
            "description": "The branch to track changes on.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      },
      "post": {
        "summary": "Create a stack",
        "operationId": "CreateStack",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateStackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StackUpsert"
            }
          }
        ],
        "tags": [
          "stack"
        ]
      }
    },
    "/v1/stacks/{id}": {
      "get": {
        "summary": "Fetch a stack",
        "operationId": "GetStack",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetStackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      },
      "delete": {
        "summary": "Delete an existing stack",
        "operationId": "DeleteStack",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteStackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      },
      "put": {
        "summary": "Update an existing stack",
        "operationId": "UpdateStack",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateStackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StackUpsert"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      },
      "patch": {
        "summary": "Update an existing stack",
        "operationId": "UpdateStack2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateStackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StackUpsert"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      }
    },
    "/v1/stacks/{id}/activities": {
      "get": {
        "summary": "View stack activities",
        "operationId": "GetStackActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActivityList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      }
    },
    "/v1/stacks/{stack_id}/events": {
      "post": {
        "summary": "Send event to stack",
        "operationId": "CreateStackEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateStackEventReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "stack"
        ]
      }
    },
    "/v1/stacks/{stack_id}/events/tail": {
      "get": {
        "operationId": "TailStackEvents",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/Event"
                },
                "error": {
                  "$ref": "#/definitions/google.rpc.Status"
                }
              },
              "title": "Stream result of Event"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "logs"
        ]
      }
    },
    "/v1/stacks/{stack_id}/executions/{run_id}/cancel": {
      "post": {
        "summary": "Cancel the execution of a function",
        "operationId": "CancelFunctionExecution",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CancelFunctionExecutionReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Functions"
        ]
      }
    },
    "/v1/stacks/{stack_id}/executions/{run_id}/retrigger": {
      "post": {
        "summary": "Relaunch the execution of a function",
        "operationId": "RetryFunctionExecution",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/RetryFunctionExecutionReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Functions"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions": {
      "get": {
        "summary": "List stack revisions",
        "operationId": "ListStackRevisions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListStackRevisionsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      },
      "post": {
        "summary": "Create stack revisions",
        "operationId": "CreateStackRevision",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetStackRevisionReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateStackRevisionRequest"
            }
          }
        ],
        "tags": [
          "stack"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}": {
      "get": {
        "summary": "Fetch a stack revision",
        "operationId": "GetStackRevision",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetStackRevisionReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/activities": {
      "get": {
        "summary": "Get a stack revision activities",
        "operationId": "GetStackRevisionActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActivityList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/build/cancel": {
      "post": {
        "summary": "Cancel the execution of a build",
        "operationId": "CancelBuild",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CancelBuildReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/build/retrigger": {
      "post": {
        "summary": "Relaunch the execution of a build",
        "operationId": "RetryBuild",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/RetryBuildReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/builds/tail": {
      "get": {
        "operationId": "TailStackRevisionBuildLogs",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/LogEntry"
                },
                "error": {
                  "$ref": "#/definitions/google.rpc.Status"
                }
              },
              "title": "Stream result of LogEntry"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "description": "The name of the stack",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "description": "The sha or _latest to indicate the latest revision",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "description": "A timestamp to indicate when to pull the logs from.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "logs"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/functions": {
      "get": {
        "summary": "List functions for a revision",
        "operationId": "ListFunctions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListFunctionsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "description": "The sha of the revision (either short of long form, `_latest` returns the latest deployed revision)",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Functions"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/functions/{fn_name}/logs/tail": {
      "get": {
        "operationId": "TailStackRevisionLogsForFunction",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/LogEntry"
                },
                "error": {
                  "$ref": "#/definitions/google.rpc.Status"
                }
              },
              "title": "Stream result of LogEntry"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "description": "The name of the stack",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "description": "The sha or _latest to indicate the latest revision",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fn_name",
            "description": "The name of the function",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "description": "A timestamp.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "event_id",
            "description": "An optional event_id to filter on to only see runs from this id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "logs"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/functions/{function}": {
      "get": {
        "summary": "Get function",
        "operationId": "GetFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetFunctionReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "description": "The sha of the revision (either short of long form, `_latest` returns the latest deployed revision)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "function",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Functions"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/functions/{function}/executions": {
      "get": {
        "summary": "Get the executions of function runs",
        "operationId": "FetchFunctionExecutions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/FetchFunctionExecutionsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "description": "The sha of the revision (either short of long form, `_latest` returns the latest deployed revision)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "function",
            "description": "The name of the function or `:all` to get the history for all the functions",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Functions"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/functions/{function}/invoke": {
      "post": {
        "summary": "Send an event to a specific function",
        "operationId": "InvokeFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/InvokeFunctionReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "function",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "Functions"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/logs/tail": {
      "get": {
        "operationId": "TailStackRevisionLogs",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/LogEntry"
                },
                "error": {
                  "$ref": "#/definitions/google.rpc.Status"
                }
              },
              "title": "Stream result of LogEntry"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "description": "The name of the stack",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "description": "The sha or _latest to indicate the latest revision",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "description": "A timestamp to indicate when to pull the logs from.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "logs"
        ]
      }
    },
    "/v1/stores": {
      "get": {
        "operationId": "ListStores",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListStoresReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "store"
        ]
      },
      "post": {
        "operationId": "CreateStore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/StoreReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateStore"
            }
          }
        ],
        "tags": [
          "store"
        ]
      }
    },
    "/v1/stores/{id}": {
      "get": {
        "operationId": "GetStore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/StoreReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "store"
        ]
      },
      "delete": {
        "operationId": "DeleteStore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "store"
        ]
      },
      "put": {
        "operationId": "UpdateStore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/StoreReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Store"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "store"
        ]
      },
      "patch": {
        "operationId": "UpdateStore2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/StoreReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Store"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "store"
        ]
      }
    },
    "/v1/stores/{id}/activities": {
      "get": {
        "operationId": "GetStoreActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActivityList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "store"
        ]
      }
    },
    "/v1/stores/{id}/status": {
      "post": {
        "operationId": "CheckStoreStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "store"
        ]
      }
    },
    "/v1/summary": {
      "get": {
        "operationId": "GetStorageSummary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/StorageSummaryReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "tags": [
          "StorageMetrics"
        ]
      }
    },
    "/v1/validate_yaml": {
      "post": {
        "summary": "Validate a yaml stack",
        "operationId": "ValidateYaml",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ValidateYamlReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    },
    "/v1/apps/{app_id_or_name}/services": {
      "get": {
        "summary": "List Service",
        "operationId": "ListServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListServicesReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "(Optional) The number of items to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "(Optional) A filter for regions.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Services"
        ]
      },
      "post": {
        "summary": "Create Service",
        "operationId": "CreateService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateServiceReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "description": "The id or the name of the App",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateService"
            }
          },
          {
            "name": "dry_run",
            "description": "If set only run validation.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/apps/{app_id_or_name}/services/{id_or_name}": {
      "get": {
        "summary": "Get Service",
        "operationId": "GetService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetServiceReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "description": "The id or the name of the App",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id_or_name",
            "description": "The id or the name of the Service",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Services"
        ]
      },
      "delete": {
        "summary": "Delete Service",
        "operationId": "DeleteService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteServiceReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "description": "The id or the name of the App",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id_or_name",
            "description": "The id or the name of the entity to delete",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Services"
        ]
      },
      "put": {
        "summary": "Update Service",
        "operationId": "UpdateService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateServiceReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "description": "The id or the name of the App",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id_or_name",
            "description": "The id or the name of the entity to update",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateService"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dry_run",
            "description": "If set only run validation.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Services"
        ]
      },
      "patch": {
        "summary": "Update Service",
        "operationId": "UpdateService2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateServiceReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "description": "The id or the name of the App",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id_or_name",
            "description": "The id or the name of the entity to update",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateService"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dry_run",
            "description": "If set only run validation.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/apps/{app_id_or_name}/services/{id_or_name}/revisions": {
      "get": {
        "summary": "List Revisions",
        "operationId": "ListRevisions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListServiceRevisionsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id_or_name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "(Optional) The number of items to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statuses",
            "description": "(Optional) Statuses to filter on.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNKNOWN",
                "STARTING",
                "ACTIVE",
                "STOPPING",
                "STOPPED",
                "FAILED",
                "BUILDING",
                "TERMINATED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "deployment_groups",
            "description": "(Optional) Only fetch revisions in this deployment group.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/apps/{app_id_or_name}/services/{id_or_name}/revisions/{id}": {
      "get": {
        "summary": "Get Revision",
        "operationId": "GetRevision",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetServiceRevisionReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id_or_name",
            "description": "The id or the name of the app",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id_or_name",
            "description": "The id or the name of the service",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "The id of the revision to fetch or `_latest` to get the latest one",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/apps": {
      "get": {
        "summary": "List App",
        "operationId": "ListApps",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListAppsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "(Optional) The number of items to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "(Optional) A filter for regions.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      },
      "post": {
        "summary": "Create App",
        "operationId": "CreateApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateAppReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateApp"
            }
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v1/apps/{id_or_name}": {
      "get": {
        "summary": "Get App",
        "operationId": "GetApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetAppReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id_or_name",
            "description": "The id or the name of the App",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      },
      "delete": {
        "summary": "Delete App",
        "operationId": "DeleteApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteAppReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id_or_name",
            "description": "The id or the name of the entity to delete",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      },
      "put": {
        "summary": "Update App",
        "operationId": "UpdateApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateAppReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id_or_name",
            "description": "The id or the name of the entity to update",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      },
      "patch": {
        "summary": "Update App",
        "operationId": "UpdateApp2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateAppReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id_or_name",
            "description": "The id or the name of the entity to update",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateApp"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    }
  },
  "definitions": {
    "google.protobuf.Any": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "google.rpc.Status": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/google.protobuf.Any"
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ErrorField": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "ErrorWithFields": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorField"
          }
        }
      }
    },
    "LogEntry": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "level": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "stream": {
          "type": "string",
          "title": "The stream (stdout/stderr) this log was emitted to"
        }
      }
    },
    "GetRegionReply": {
      "type": "object",
      "properties": {
        "region": {
          "$ref": "#/definitions/Region",
          "title": "The Region retrieved"
        }
      }
    },
    "ListRegionsReply": {
      "type": "object",
      "properties": {
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegionListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "Region": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the region"
        },
        "name": {
          "type": "string",
          "title": "The name of the region"
        },
        "coordinates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The coordinates of the region (lat/long)"
        },
        "status": {
          "type": "string",
          "title": "The status of the region"
        },
        "instances": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of instances available in this region"
        },
        "datacenters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of datacenters available in this region"
        }
      }
    },
    "RegionListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the region"
        },
        "name": {
          "type": "string",
          "title": "The name of the region"
        },
        "coordinates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The coordinates of the region (lat/long)"
        },
        "status": {
          "type": "string",
          "title": "The status of the region"
        },
        "instances": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of instances available in this region"
        },
        "datacenters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of datacenters available in this region"
        }
      }
    },
    "GetInstanceReply": {
      "type": "object",
      "properties": {
        "instance": {
          "$ref": "#/definitions/Instance",
          "title": "The instance retrieved"
        }
      }
    },
    "Instance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The name of the instance"
        },
        "description": {
          "type": "string",
          "title": "A short description of the instance"
        },
        "vcpu": {
          "type": "integer",
          "format": "int64",
          "title": "The number of cpus"
        },
        "memory": {
          "type": "string",
          "title": "The memory in bytes in a format like 5MB"
        },
        "disk": {
          "type": "string",
          "title": "The size of the disk in bytes in a format like 5MB"
        },
        "price_hourly": {
          "type": "string",
          "title": "The price to pay per hour"
        },
        "price_monthly": {
          "type": "string",
          "title": "The price to pay per month"
        },
        "regions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The regions where this instance type is available"
        },
        "status": {
          "type": "string",
          "title": "The status of the instance"
        }
      }
    },
    "InstanceListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The name of the instance"
        },
        "description": {
          "type": "string",
          "title": "A short description of the instance"
        },
        "vcpu": {
          "type": "integer",
          "format": "int64",
          "title": "The number of cpus"
        },
        "memory": {
          "type": "string",
          "title": "The memory in bytes in a format like 5MB"
        },
        "disk": {
          "type": "string",
          "title": "The size of the disk in bytes in a format like 5MB"
        },
        "price_hourly": {
          "type": "string",
          "title": "The price to pay per hour"
        },
        "price_monthly": {
          "type": "string",
          "title": "The price to pay per month"
        },
        "regions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The regions where this instance type is available"
        },
        "status": {
          "type": "string",
          "title": "The status of the instance"
        }
      }
    },
    "ListInstancesReply": {
      "type": "object",
      "properties": {
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "google.protobuf.NullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "Action": {
      "type": "string",
      "enum": [
        "signin",
        "signup",
        "register"
      ],
      "default": "signin"
    },
    "CannyAuthReply": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "CannyAuthRequest": {
      "type": "object"
    },
    "CreateAccountRequest": {
      "type": "object",
      "example": {
        "email": "john@snow.com",
        "password": "..."
      },
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "description": "Create new account",
      "title": "Create new account",
      "required": [
        "email",
        "password"
      ]
    },
    "CreateCredential": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "CreateS3Credential": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "Credential": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CredentialReply": {
      "type": "object",
      "properties": {
        "credential": {
          "$ref": "#/definitions/Credential"
        }
      }
    },
    "DeleteAccountReply": {
      "type": "object"
    },
    "GetOAuthOptionsReply": {
      "type": "object",
      "properties": {
        "oauth_providers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OAuthProvider"
          }
        }
      },
      "description": "A list of providers which you can use for single sign-on."
    },
    "GetOrganizationReply": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/Organization"
        }
      }
    },
    "GithubInstallationCallbackReply": {
      "type": "object"
    },
    "GithubInstallationCallbackRequest": {
      "type": "object",
      "properties": {
        "installation_id": {
          "type": "string"
        },
        "setup_action": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "GithubInstallationReply": {
      "type": "object",
      "properties": {
        "app_name": {
          "type": "string",
          "title": "The github app name"
        },
        "app_id": {
          "type": "string",
          "format": "int64",
          "title": "The github app id"
        },
        "url": {
          "type": "string",
          "title": "The url to start the installation flow"
        },
        "state": {
          "type": "string",
          "title": "The state required by the protocol, it is only valid 10 minutes and encodes information about the type of flow"
        }
      }
    },
    "GithubInstallationRepoListReply": {
      "type": "object",
      "properties": {
        "repositories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GithubRepo"
          }
        },
        "installationId": {
          "type": "string"
        }
      }
    },
    "GithubRepo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "private": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "default_branch": {
          "type": "string"
        }
      }
    },
    "InviteUserRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ListCredentialsReply": {
      "type": "object",
      "properties": {
        "credentials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Credential"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ListS3CredentialsReply": {
      "type": "object",
      "properties": {
        "s3_credentials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/S3Credential"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "LoginReply": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/Token"
        }
      }
    },
    "LoginRequest": {
      "type": "object",
      "example": {
        "email": "john@snow.com",
        "password": "..."
      },
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "LogoutReply": {
      "type": "object"
    },
    "OAuthCallbackReply": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/Token",
          "title": "A jwt token to be used for session"
        }
      }
    },
    "OAuthCallbackRequest": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "title": "The state created at the origin of the OAuth flow"
        },
        "code": {
          "type": "string",
          "title": "The code returned by the OAuth provider"
        }
      }
    },
    "OAuthProvider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The name of the provider (.e.g github, google)"
        },
        "url": {
          "type": "string",
          "title": "The URL to call to initiate the OAuth flow"
        },
        "state": {
          "type": "string",
          "title": "The OAuth state required by the protocol, it is only valid 10 minutes and encodes information about the type of flow"
        }
      }
    },
    "Organization": {
      "type": "object",
      "properties": {
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "company": {
          "type": "boolean"
        },
        "vat_number": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "plan": {
          "type": "string"
        }
      }
    },
    "PasswordlessLoginReply": {
      "type": "object"
    },
    "PasswordlessLoginRequest": {
      "type": "object",
      "example": {
        "email": "john@snow.com"
      },
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "Permission": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      }
    },
    "ResendEmailValidationReply": {
      "type": "object"
    },
    "ResendEmailValidationRequest": {
      "type": "object"
    },
    "ResetPasswordReply": {
      "type": "object"
    },
    "ResetPasswordRequest": {
      "type": "object",
      "example": {
        "email": "john@snow.com"
      },
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "S3Credential": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "access_key": {
          "type": "string"
        },
        "secret_key": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Permission"
          }
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "S3CredentialReply": {
      "type": "object",
      "properties": {
        "s3_credential": {
          "$ref": "#/definitions/S3Credential"
        }
      }
    },
    "Token": {
      "type": "object",
      "example": {
        "id": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
        "expires": "0001-01-01T00:00:00Z",
        "user_id": "996d7822-6b58-11e9-956f-32001b70f000",
        "organization_id": "9f33b2c6-6b58-11e9-883c-32001b70f000"
      },
      "properties": {
        "id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "UpdateOrganizationReply": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/Organization"
        }
      }
    },
    "UpdatePasswordRequest": {
      "type": "object",
      "example": {
        "id": "...",
        "password": "..."
      },
      "properties": {
        "id": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "UpdateUserRequest.UserUpdateBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "current_password": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "newsletter_subscribed": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "example": {
        "id": "78352123-a06f-4ec2-81ed-27a056725385",
        "email": "john@snow.com",
        "name": "John Snow",
        "status": "ACTIVE",
        "status_message": "active",
        "avatar_url": "https://www.gravatar.com/avatar/00000000000000000000000000000000",
        "verified": true,
        "is_admin": false,
        "is_test": true,
        "two_factor_authentication": false,
        "last_login": "0001-01-01T00:00:00Z",
        "last_login_id": "10.1.1.1",
        "updated_at": "0001-01-01T00:00:00Z",
        "created_at": "0001-01-01T00:00:00Z",
        "default_organization_id": "78352123-a06f-4ec2-81ed-27a056725385",
        "newsletter_subscribed": true
      },
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/User.AccountStatus"
        },
        "status_message": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        },
        "two_factor_authentication": {
          "type": "boolean"
        },
        "last_login": {
          "type": "string",
          "format": "date-time"
        },
        "last_login_ip": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "default_organization_id": {
          "type": "string"
        },
        "newsletter_subscribed": {
          "type": "boolean"
        },
        "github_id": {
          "type": "string"
        },
        "github_user": {
          "type": "string"
        },
        "flags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserFlags"
          }
        },
        "name": {
          "type": "string"
        }
      },
      "description": "Represent a User",
      "title": "User"
    },
    "User.AccountStatus": {
      "type": "string",
      "enum": [
        "WARNING",
        "LOCKED",
        "ACTIVE"
      ],
      "default": "WARNING"
    },
    "UserFlags": {
      "type": "string",
      "enum": [
        "ADMIN",
        "TEST",
        "RESTRICTED",
        "ACTIVE",
        "BETA"
      ],
      "default": "ADMIN",
      "title": "- ADMIN: A user is an admin user\n - TEST: A user is a test user\n - RESTRICTED: Whether this account as restricted access\n - ACTIVE: Whether this account is active\n - BETA: Account in beta program"
    },
    "UserReply": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "Activity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "actor": {
          "$ref": "#/definitions/Object"
        },
        "object": {
          "$ref": "#/definitions/Object"
        },
        "verb": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ActivityList": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Activity"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Object": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "Empty": {
      "type": "object"
    },
    "GithubHookReply": {
      "type": "object"
    },
    "Notification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "activity": {
          "$ref": "#/definitions/Activity"
        },
        "is_read": {
          "type": "boolean"
        },
        "is_seen": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "NotificationList": {
      "type": "object",
      "properties": {
        "notifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Notification"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "is_read": {
          "type": "boolean"
        },
        "is_seen": {
          "type": "boolean"
        },
        "unread": {
          "type": "integer",
          "format": "int64"
        },
        "unseen": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BaseCatalog.Status": {
      "type": "string",
      "enum": [
        "COMING_SOON",
        "ACTIVE",
        "DEPRECATED",
        "DISABLED",
        "UNKNOWN"
      ],
      "default": "COMING_SOON",
      "title": "The status of a catalog entry"
    },
    "CancelBuildReply": {
      "type": "object"
    },
    "CancelFunctionExecutionReply": {
      "type": "object"
    },
    "CatalogFunction": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the tag in a slug valid format"
        },
        "display_name": {
          "type": "string",
          "title": "A display name for a stack"
        },
        "short_description": {
          "type": "string",
          "title": "An short description of the stack (<140 characters)"
        },
        "description": {
          "type": "string",
          "title": "A longer description of the stack akin to a README in markdown"
        },
        "icon": {
          "type": "string",
          "title": "An optional url to an icon for this stack (What file format?!)"
        },
        "website": {
          "type": "string",
          "title": "The website to get more info about this function (for example the source code)"
        },
        "status": {
          "$ref": "#/definitions/BaseCatalog.Status",
          "title": "The current status on the stack catalog"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A set of tags to identify the catalog"
        },
        "version": {
          "type": "string",
          "title": "The version of the function in semver format: https://semver.org/"
        },
        "image": {
          "type": "string",
          "title": "The image this function will use"
        },
        "template": {
          "type": "string",
          "title": "The template that is used for expanding a catalog function"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FunctionParameter"
          },
          "title": "A list of parameters for the function"
        }
      }
    },
    "CatalogFunctionListItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the tag in a slug valid format"
        },
        "display_name": {
          "type": "string",
          "title": "A display name for a stack"
        },
        "short_description": {
          "type": "string",
          "title": "An short description of the stack (<140 characters)"
        },
        "icon": {
          "type": "string",
          "title": "An optional url to an icon for this stack (What file format?!)"
        },
        "website": {
          "type": "string",
          "title": "The website to get more info about this function (for example the source code)"
        },
        "status": {
          "$ref": "#/definitions/BaseCatalog.Status",
          "title": "The current status on the stack catalog"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A set of tags to identify the catalog"
        },
        "version": {
          "type": "string",
          "title": "The version of the function in semver format: https://semver.org/"
        },
        "image": {
          "type": "string",
          "title": "The image this function will use"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FunctionParameter"
          },
          "title": "A list of parameters for the function"
        }
      },
      "title": "A shorter version o a CatalogFunction for listing"
    },
    "CatalogStack": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the tag in a slug valid format"
        },
        "display_name": {
          "type": "string",
          "title": "A display name for a stack"
        },
        "short_description": {
          "type": "string",
          "title": "An short description of the stack (<140 characters)"
        },
        "description": {
          "type": "string",
          "title": "A longer description of the stack akin to a README in markdown"
        },
        "icon": {
          "type": "string",
          "title": "An optional url to an icon for this stack (What file format?!)"
        },
        "status": {
          "$ref": "#/definitions/BaseCatalog.Status",
          "title": "The current status on the stack catalog"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A set of tags to identify the catalog"
        },
        "source_control_ref": {
          "$ref": "#/definitions/SCMReference",
          "title": "A reference to where the stack is defined"
        },
        "is_yaml_only": {
          "type": "boolean",
          "description": "Whether this stack is only a yaml or not (in which case it can be created as a non git managed stack)."
        },
        "yaml": {
          "type": "string",
          "description": "The yaml that is represented the stack."
        }
      },
      "title": "A stack entry in the catalog"
    },
    "CatalogStackListItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "short_description": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/BaseCatalog.Status"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "source_control_ref": {
          "$ref": "#/definitions/SCMReference"
        }
      },
      "title": "A shorter version of a CatalogStack for listing"
    },
    "CatalogStore": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "short_description": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/BaseCatalog.Status"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        }
      }
    },
    "CatalogStoreReply": {
      "type": "object",
      "properties": {
        "catalog_store": {
          "$ref": "#/definitions/CatalogStore"
        }
      }
    },
    "CommitInfo": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "origin": {
          "type": "string"
        }
      }
    },
    "Connector": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the connector"
        },
        "name": {
          "type": "string",
          "title": "Name of the connector"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the entity was last updated"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the entity was created"
        },
        "url": {
          "type": "string",
          "title": "The url of the connector"
        },
        "type": {
          "$ref": "#/definitions/Connector.Type",
          "title": "The type of the connector"
        },
        "organization_id": {
          "type": "string",
          "title": "The organisation id of the connector"
        },
        "with": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "title": "The metadata attached to the type"
        }
      }
    },
    "Connector.Type": {
      "type": "string",
      "enum": [
        "unknown",
        "cloudevent",
        "webhook"
      ],
      "default": "unknown"
    },
    "ConnectorListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the connector"
        },
        "name": {
          "type": "string",
          "title": "Name of the connector"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the entity was last updated"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the entity was created"
        },
        "url": {
          "type": "string",
          "title": "The url of the connector"
        },
        "type": {
          "$ref": "#/definitions/Connector.Type",
          "title": "The type of the connector"
        }
      }
    },
    "ConnectorUpsert": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the connector"
        },
        "change_url": {
          "type": "boolean",
          "title": "Only valid for update (whether or not to regen the url)"
        },
        "type": {
          "$ref": "#/definitions/Connector.Type",
          "title": "The tyoe of the connector"
        },
        "with": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "title": "The metadata attached to the type"
        }
      }
    },
    "CreateConnectorReply": {
      "type": "object",
      "properties": {
        "connector": {
          "$ref": "#/definitions/Connector"
        }
      }
    },
    "CreateSecret": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "CreateSecretReply": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/Secret"
        }
      }
    },
    "CreateStackEventReply": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "CreateStackReply": {
      "type": "object",
      "properties": {
        "stack": {
          "$ref": "#/definitions/Stack"
        }
      }
    },
    "CreateStackRevisionRequest": {
      "type": "object",
      "properties": {
        "stack_id": {
          "type": "string"
        },
        "yaml": {
          "type": "object"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "CreateStore": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "with": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "DeleteConnectorReply": {
      "type": "object"
    },
    "DeleteSecretReply": {
      "type": "object"
    },
    "DeleteStackReply": {
      "type": "object"
    },
    "Event": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "event": {
          "type": "object",
          "title": "(Deprecated) Use cloudevent instead"
        },
        "data": {
          "type": "string",
          "title": "(Depreacted) Use cloudevent instead"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "cloudevent": {
          "type": "object",
          "title": "A cloudevent in the json format: https://cloudevents.io/"
        }
      }
    },
    "FetchFunctionExecutionsReply": {
      "type": "object",
      "properties": {
        "executions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FunctionRunInfoListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Function": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FunctionType"
        }
      }
    },
    "FunctionExecution": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/FunctionRunInfo.State"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "The possibly empty time at which this function started"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "title": "The possibly empty time at which this function stopped"
        },
        "exitCode": {
          "type": "integer",
          "format": "int32",
          "title": "The exitCode of the run, it will be -1 if it's meaningless (.e.g. STARTING, RUNNING states), this only makes sense if the state is FAILED or SUCCEEDED (succeeded will always be 0)"
        }
      }
    },
    "FunctionListItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FunctionType"
        }
      }
    },
    "FunctionParameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the parameter"
        },
        "description": {
          "type": "string",
          "title": "A description of this parameter"
        },
        "required": {
          "type": "boolean",
          "title": "Whether or not this parameter must be set"
        },
        "type": {
          "$ref": "#/definitions/FunctionParameter.Type",
          "title": "The type of the parameter"
        },
        "default": {
          "type": "object"
        }
      }
    },
    "FunctionParameter.Type": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "STORE_REF",
        "SECRET_REF",
        "STRING",
        "NUMBER",
        "BOOLEAN"
      ],
      "default": "UNKNOWN",
      "title": "- UNKNOWN: Only used for error handling\n - STORE_REF: A reference to an existing store\n - SECRET_REF: A reference to an existing secret"
    },
    "FunctionRunInfo.State": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "STARTING",
        "RUNNING",
        "FAILED",
        "SUCCEEDED",
        "CANCELLED",
        "TIMEOUT"
      ],
      "default": "UNKNOWN"
    },
    "FunctionRunInfoListItem": {
      "type": "object",
      "properties": {
        "run_id": {
          "type": "string"
        },
        "event_id": {
          "type": "string"
        },
        "fn_name": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/FunctionRunInfo.State"
        },
        "executions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FunctionExecution"
          },
          "description": "A list of executions, with the first one being the most recent one."
        }
      }
    },
    "FunctionType": {
      "type": "string",
      "enum": [
        "DOCKER",
        "CATALOG",
        "CODE"
      ],
      "default": "DOCKER"
    },
    "GetCatalogFunctionsReply": {
      "type": "object",
      "properties": {
        "catalog_function": {
          "$ref": "#/definitions/CatalogFunction"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GetCatalogStackReply": {
      "type": "object",
      "properties": {
        "catalog_stack": {
          "$ref": "#/definitions/CatalogStack"
        }
      }
    },
    "GetConnectorByUrlReply": {
      "type": "object",
      "properties": {
        "connector": {
          "$ref": "#/definitions/Connector"
        }
      }
    },
    "GetConnectorReply": {
      "type": "object",
      "properties": {
        "connector": {
          "$ref": "#/definitions/Connector"
        }
      }
    },
    "GetFunctionReply": {
      "type": "object",
      "properties": {
        "function": {
          "$ref": "#/definitions/Function"
        }
      }
    },
    "GetSecretReply": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/Secret"
        }
      }
    },
    "GetStackReply": {
      "type": "object",
      "properties": {
        "stack": {
          "$ref": "#/definitions/Stack"
        }
      }
    },
    "GetStackRevisionReply": {
      "type": "object",
      "properties": {
        "revision": {
          "$ref": "#/definitions/StackRevision"
        }
      }
    },
    "InvokeFunctionReply": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "ListCatalogFunctionsReply": {
      "type": "object",
      "properties": {
        "catalog_functions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogFunctionListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ListCatalogStacksReply": {
      "type": "object",
      "properties": {
        "catalog_stacks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogStackListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ListCatalogStoresReply": {
      "type": "object",
      "properties": {
        "catalog_stores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogStore"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ListConnectorsReply": {
      "type": "object",
      "properties": {
        "connectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "ListFunctionsReply": {
      "type": "object",
      "properties": {
        "functions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FunctionListItem"
          }
        }
      }
    },
    "ListSecretsReply": {
      "type": "object",
      "properties": {
        "secrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Secret"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ListStackRevisionsReply": {
      "type": "object",
      "properties": {
        "revisions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackRevisionListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ListStacksReply": {
      "type": "object",
      "properties": {
        "stacks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ListStoresReply": {
      "type": "object",
      "properties": {
        "stores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Store"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Parameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/Parameter.ParameterType"
        },
        "sensitive": {
          "type": "boolean"
        },
        "options": {
          "type": "object"
        },
        "default": {
          "type": "object"
        }
      }
    },
    "Parameter.ParameterType": {
      "type": "string",
      "enum": [
        "STRING",
        "NUMBER",
        "BOOLEAN",
        "LIST",
        "STRUCT"
      ],
      "default": "STRING"
    },
    "RetryBuildReply": {
      "type": "object"
    },
    "RetryFunctionExecutionReply": {
      "type": "object"
    },
    "SCMReference": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/SCMReference.SCMType",
          "title": "The place where the repository is hosted (github is the only supported place at the moment)"
        },
        "repo": {
          "type": "string",
          "title": "A way to identify the repository within the git provider"
        },
        "ref": {
          "type": "string",
          "title": "A git ref to identify the data that needs to be taken from the repo (it can be a commit, a tag, a branch...)"
        }
      }
    },
    "SCMReference.SCMType": {
      "type": "string",
      "enum": [
        "GITHUB",
        "UNKNOWN"
      ],
      "default": "GITHUB"
    },
    "SCMRepository": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/SCMRepository.Type",
          "title": "Where the repo lives"
        },
        "name": {
          "type": "string",
          "title": "The url to find the repo (.e.g: koyeb/gateway)"
        },
        "branch": {
          "type": "string",
          "description": "The branch to track changes on."
        }
      }
    },
    "SCMRepository.Type": {
      "type": "string",
      "enum": [
        "GITHUB"
      ],
      "default": "GITHUB"
    },
    "Secret": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Stack": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the stack"
        },
        "name": {
          "type": "string",
          "title": "The name of the stack"
        },
        "organization_id": {
          "type": "string",
          "title": "The organisation id of the stack"
        },
        "latest_revision": {
          "$ref": "#/definitions/StackRevision",
          "title": "The latest definition of the stack"
        },
        "latest_revision_sha": {
          "type": "string",
          "title": "Sha of the latest revision"
        },
        "deployed_revision_sha": {
          "type": "string",
          "title": "Sha of the revision that was successfully deployed"
        },
        "repository": {
          "$ref": "#/definitions/SCMRepository",
          "title": "Where is this stack managed in the VCS"
        },
        "status": {
          "$ref": "#/definitions/Stack.Status"
        },
        "status_message": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "A Stack"
    },
    "Stack.Status": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "DRAINING",
        "PROVISIONING",
        "ACTIVE",
        "ERROR",
        "WARNING",
        "DEPLOYING"
      ],
      "default": "UNKNOWN",
      "title": "- UNKNOWN: This shouldn't happen but for API completion\n - DRAINING: The stack is getting deleted\n - PROVISIONING: A stack is starting up but doesn't have a deployed revision yet\n - ACTIVE: Everything is ok\n - ERROR: There's no active release and recent releases have failed\n - WARNING: There's an active release, however the most recent release is unhealthy\n - DEPLOYING: There's an active release, and we're deploying a newer release"
    },
    "StackListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "latest_revision_sha": {
          "type": "string"
        },
        "deployed_revision_sha": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Stack.Status"
        },
        "repository": {
          "$ref": "#/definitions/SCMRepository"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "organization_id": {
          "type": "string"
        }
      },
      "description": "A smaller representation of a stack to use when listing entities."
    },
    "StackRevision": {
      "type": "object",
      "properties": {
        "sha": {
          "type": "string",
          "title": "The sha of the revision"
        },
        "yaml": {
          "type": "string",
          "title": "The raw yaml"
        },
        "version": {
          "type": "string",
          "title": "The version of the schema definition"
        },
        "parent_sha": {
          "type": "string",
          "title": "The sha of the previous revision of this stack (empty if it's the first revision)"
        },
        "status": {
          "$ref": "#/definitions/StackRevision.Status"
        },
        "status_message": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "commit_info": {
          "$ref": "#/definitions/CommitInfo",
          "title": "Information about the commit that generated this revision (potentially absent)"
        },
        "releaseId": {
          "type": "string",
          "title": "The release this stack revision was included in (possibly null if not release was done yet)"
        }
      },
      "description": "The actual concrete definition of a stack."
    },
    "StackRevision.Status": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "UNAVAILABLE",
        "PROVISIONING",
        "STOPPING",
        "ERROR",
        "ACTIVE",
        "VALIDATION_ERROR",
        "STOPPED",
        "BUILDING",
        "BUILD_FAILED"
      ],
      "default": "UNKNOWN",
      "title": "- PROVISIONING: The revision is starting up, events won't be triggered to it\n - STOPPING: The revision is being shutdown, existing runs won't get cancelled but new ones won't be triggered on it.\n - ERROR: An error happened when deploying the new revision or when checking it's availability\n - ACTIVE: The revision is active and everything goes well\n - VALIDATION_ERROR: Indicate that the revision was not valid\n - STOPPED: The revision is fully stopped nothing will get triggered\n - BUILDING: The revision is being built\n - BUILD_FAILED: The revision has failed to build"
    },
    "StackRevisionListItem": {
      "type": "object",
      "properties": {
        "sha": {
          "type": "string",
          "title": "The sha of the revision"
        },
        "version": {
          "type": "string",
          "title": "The version of the schema definition"
        },
        "parent_sha": {
          "type": "string",
          "title": "The sha of the previous revision of this stack (empty if it's the first revision)"
        },
        "status": {
          "$ref": "#/definitions/StackRevision.Status"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "commit_info": {
          "$ref": "#/definitions/CommitInfo",
          "title": "Information about the commit that generated this revision (potentially absent)"
        },
        "releaseId": {
          "type": "string",
          "title": "The release this stack revision was included in (possibly null if not release was done yet)"
        }
      }
    },
    "StackUpsert": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Stack name"
        },
        "repository": {
          "$ref": "#/definitions/SCMRepository",
          "title": "Where is this stack managed in the VCS"
        }
      }
    },
    "StorageSummaryReply": {
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/StorageSummaryReply.Summary"
        }
      }
    },
    "StorageSummaryReply.Summary": {
      "type": "object",
      "properties": {
        "store_count": {
          "type": "number",
          "format": "double"
        },
        "stack_count": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "Store": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "with": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "region": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "title": "The url to the storage endpoint"
        },
        "status": {
          "$ref": "#/definitions/Store.Status"
        },
        "status_message": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "store_url": {
          "type": "string",
          "title": "The url to the bucket specifically"
        }
      }
    },
    "Store.Status": {
      "type": "string",
      "enum": [
        "PROVISIONING",
        "UPDATING",
        "ENABLING",
        "ENABLED",
        "DISABING",
        "DISABLED",
        "LOCKING",
        "LOCKED",
        "ERROR",
        "DELETING",
        "DELETED"
      ],
      "default": "PROVISIONING"
    },
    "StoreReply": {
      "type": "object",
      "properties": {
        "store": {
          "$ref": "#/definitions/Store"
        }
      }
    },
    "UpdateConnectorReply": {
      "type": "object",
      "properties": {
        "connector": {
          "$ref": "#/definitions/Connector"
        }
      }
    },
    "UpdateSecretReply": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/Secret"
        }
      }
    },
    "UpdateStackReply": {
      "type": "object",
      "properties": {
        "stack": {
          "$ref": "#/definitions/Stack"
        }
      }
    },
    "ValidateYamlReply": {
      "type": "object"
    },
    "CreateService": {
      "type": "object",
      "properties": {
        "definition": {
          "$ref": "#/definitions/ServiceDefinition"
        }
      }
    },
    "CreateServiceReply": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/Service",
          "title": "The entity created"
        }
      }
    },
    "DeleteServiceReply": {
      "type": "object"
    },
    "DeploymentState": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentState.Group"
          }
        }
      }
    },
    "DeploymentState.Group": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "revision_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DockerSource": {
      "type": "object",
      "properties": {
        "image": {
          "type": "string"
        },
        "command": {
          "type": "string"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "image_registry_secret": {
          "type": "string"
        }
      }
    },
    "Env": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "value_from_secret": {
          "type": "string"
        }
      }
    },
    "FetchGatewayReply": {
      "type": "object",
      "properties": {
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GatewayRoute"
          }
        }
      }
    },
    "FetchInternalRevisionReply": {
      "type": "object",
      "properties": {
        "revision": {
          "$ref": "#/definitions/ServiceRevision"
        }
      }
    },
    "FetchInternalServiceReply": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/Service"
        }
      }
    },
    "GatewayRoute": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "deployment_group": {
          "type": "string"
        },
        "revision_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int64"
        },
        "datacenters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GetServiceReply": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/Service",
          "title": "The Service retrieved"
        }
      }
    },
    "GetServiceRevisionReply": {
      "type": "object",
      "properties": {
        "revision": {
          "$ref": "#/definitions/ServiceRevision"
        }
      }
    },
    "GitSource": {
      "type": "object",
      "properties": {
        "repository": {
          "type": "string",
          "description": "A url to a git repository (contains the provider as well) .e.g: github.com/koyeb/test."
        },
        "reference": {
          "type": "string",
          "description": "A git reference of the code that needs to be build (.e.g: refs/heads/my-branch refs/tags/my-tag deadbeef)."
        },
        "deploy_on_push": {
          "type": "boolean",
          "description": "If true a new revision will be triggered when the hash of the reference is pushed."
        }
      }
    },
    "ListInternalRevisionsReply": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "revision_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceRevisionId"
          }
        }
      }
    },
    "ListInternalServicesReply": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "service_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceId"
          }
        }
      }
    },
    "ListServiceRevisionsReply": {
      "type": "object",
      "properties": {
        "revisions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceRevisionListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "ListServicesReply": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "Port": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int64"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "Route": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int64"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "Scaling": {
      "type": "object",
      "properties": {
        "min": {
          "type": "integer",
          "format": "int64"
        },
        "max": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Service": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string",
          "format": "uint64",
          "title": "A version updated whenever this state changes (useful for caching)"
        },
        "state": {
          "$ref": "#/definitions/ServiceState"
        }
      }
    },
    "ServiceDefinition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Route"
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          }
        },
        "env": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Env"
          }
        },
        "regions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scaling": {
          "$ref": "#/definitions/Scaling"
        },
        "instance_type": {
          "type": "string"
        },
        "deployment_group": {
          "type": "string"
        },
        "docker": {
          "$ref": "#/definitions/DockerSource"
        },
        "git": {
          "$ref": "#/definitions/GitSource"
        }
      }
    },
    "ServiceId": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        }
      }
    },
    "ServiceInstance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "datacenter": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/ServiceInstance.Status"
        },
        "status_message": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ServiceInstance.Status": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "STARTING",
        "HEALTHY",
        "UNHEALTHY",
        "FAILED",
        "STOPPED"
      ],
      "default": "UNKNOWN"
    },
    "ServiceListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string",
          "format": "uint64",
          "title": "A version updated whenever this state changes (useful for caching)"
        },
        "state": {
          "$ref": "#/definitions/ServiceState"
        }
      }
    },
    "ServiceRevision": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "parent_id": {
          "type": "string"
        },
        "child_id": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "format": "int64",
          "title": "A version updated whenever this state changes (useful for caching)"
        },
        "definition": {
          "$ref": "#/definitions/ServiceDefinition"
        },
        "state": {
          "$ref": "#/definitions/ServiceRevisionState"
        }
      }
    },
    "ServiceRevisionId": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "revision_id": {
          "type": "string"
        }
      }
    },
    "ServiceRevisionListItem": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "parent_id": {
          "type": "string"
        },
        "child_id": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "format": "int64",
          "title": "A version updated whenever the state changes (useful for caching or CAS updates)"
        },
        "deployment_group": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/ServiceRevisionState.Status"
        }
      }
    },
    "ServiceRevisionState": {
      "type": "object",
      "properties": {
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceInstance"
          },
          "title": "Information about instances"
        },
        "status": {
          "$ref": "#/definitions/ServiceRevisionState.Status",
          "title": "A simple status to indicate where this revision is at"
        },
        "status_message": {
          "type": "string",
          "title": "Some extra information of the status"
        },
        "datacenters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The datacenters this revision will run in"
        },
        "build_info": {
          "$ref": "#/definitions/ServiceRevisionState.BuildInfo",
          "title": "Information about builds"
        }
      }
    },
    "ServiceRevisionState.BuildInfo": {
      "type": "object",
      "properties": {
        "sha": {
          "type": "string",
          "description": "The git sha for this build (we resolve the reference at the start of the build)."
        },
        "image": {
          "type": "string",
          "description": "The docker image built as a result of this build."
        },
        "build_job_id": {
          "type": "string",
          "description": "The id of the job that ran the build."
        }
      }
    },
    "ServiceRevisionState.Status": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "STARTING",
        "ACTIVE",
        "STOPPING",
        "STOPPED",
        "FAILED",
        "BUILDING",
        "TERMINATED"
      ],
      "default": "UNKNOWN"
    },
    "ServiceState": {
      "type": "object",
      "properties": {
        "desired_deployment": {
          "$ref": "#/definitions/DeploymentState"
        },
        "status": {
          "$ref": "#/definitions/ServiceState.Status"
        }
      }
    },
    "ServiceState.Status": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CREATING",
        "ACTIVE",
        "STOPPING",
        "STOPPED"
      ],
      "default": "UNKNOWN"
    },
    "UpdateRevisionStateReply": {
      "type": "object"
    },
    "UpdateService": {
      "type": "object",
      "properties": {
        "definition": {
          "$ref": "#/definitions/ServiceDefinition"
        }
      }
    },
    "UpdateServiceReply": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/Service",
          "title": "The entity updated"
        }
      }
    },
    "UpdateServiceStateReply": {
      "type": "object"
    },
    "App": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "domains": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Domain"
          }
        }
      }
    },
    "AppListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "domains": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Domain"
          }
        }
      }
    },
    "CreateApp": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "CreateAppReply": {
      "type": "object",
      "properties": {
        "app": {
          "$ref": "#/definitions/App",
          "title": "The entity created"
        }
      }
    },
    "DeleteAppReply": {
      "type": "object"
    },
    "Domain": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "deployment_group": {
          "type": "string"
        }
      }
    },
    "GetAppReply": {
      "type": "object",
      "properties": {
        "app": {
          "$ref": "#/definitions/App",
          "title": "The App retrieved"
        }
      }
    },
    "GetInternalAppReply": {
      "type": "object",
      "properties": {
        "app": {
          "$ref": "#/definitions/App"
        }
      }
    },
    "ListAppsReply": {
      "type": "object",
      "properties": {
        "apps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "UpdateApp": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "UpdateAppReply": {
      "type": "object",
      "properties": {
        "app": {
          "$ref": "#/definitions/App",
          "title": "The entity updated"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}