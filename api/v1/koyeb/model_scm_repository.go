/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// SCMRepository struct for SCMRepository
type SCMRepository struct {
	Type *SCMRepositoryType `json:"type,omitempty"`
	Name *string `json:"name,omitempty"`
	// The branch to track changes on.
	Branch *string `json:"branch,omitempty"`
}

// NewSCMRepository instantiates a new SCMRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSCMRepository() *SCMRepository {
	this := SCMRepository{}
	var type_ SCMRepositoryType = SCMREPOSITORYTYPE_GITHUB
	this.Type = &type_
	return &this
}

// NewSCMRepositoryWithDefaults instantiates a new SCMRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSCMRepositoryWithDefaults() *SCMRepository {
	this := SCMRepository{}
	var type_ SCMRepositoryType = SCMREPOSITORYTYPE_GITHUB
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SCMRepository) GetType() SCMRepositoryType {
	if o == nil || o.Type == nil {
		var ret SCMRepositoryType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCMRepository) GetTypeOk() (*SCMRepositoryType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SCMRepository) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given SCMRepositoryType and assigns it to the Type field.
func (o *SCMRepository) SetType(v SCMRepositoryType) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SCMRepository) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCMRepository) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SCMRepository) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SCMRepository) SetName(v string) {
	o.Name = &v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *SCMRepository) GetBranch() string {
	if o == nil || o.Branch == nil {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCMRepository) GetBranchOk() (*string, bool) {
	if o == nil || o.Branch == nil {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *SCMRepository) HasBranch() bool {
	if o != nil && o.Branch != nil {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *SCMRepository) SetBranch(v string) {
	o.Branch = &v
}

func (o SCMRepository) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Branch != nil {
		toSerialize["branch"] = o.Branch
	}
	return json.Marshal(toSerialize)
}

type NullableSCMRepository struct {
	value *SCMRepository
	isSet bool
}

func (v NullableSCMRepository) Get() *SCMRepository {
	return v.value
}

func (v *NullableSCMRepository) Set(val *SCMRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableSCMRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableSCMRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSCMRepository(val *SCMRepository) *NullableSCMRepository {
	return &NullableSCMRepository{value: val, isSet: true}
}

func (v NullableSCMRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSCMRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


