/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// GetFunctionReply struct for GetFunctionReply
type GetFunctionReply struct {
	Function *Function `json:"function,omitempty"`
}

// NewGetFunctionReply instantiates a new GetFunctionReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetFunctionReply() *GetFunctionReply {
	this := GetFunctionReply{}
	return &this
}

// NewGetFunctionReplyWithDefaults instantiates a new GetFunctionReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetFunctionReplyWithDefaults() *GetFunctionReply {
	this := GetFunctionReply{}
	return &this
}

// GetFunction returns the Function field value if set, zero value otherwise.
func (o *GetFunctionReply) GetFunction() Function {
	if o == nil || o.Function == nil {
		var ret Function
		return ret
	}
	return *o.Function
}

// GetFunctionOk returns a tuple with the Function field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetFunctionReply) GetFunctionOk() (*Function, bool) {
	if o == nil || o.Function == nil {
		return nil, false
	}
	return o.Function, true
}

// HasFunction returns a boolean if a field has been set.
func (o *GetFunctionReply) HasFunction() bool {
	if o != nil && o.Function != nil {
		return true
	}

	return false
}

// SetFunction gets a reference to the given Function and assigns it to the Function field.
func (o *GetFunctionReply) SetFunction(v Function) {
	o.Function = &v
}

func (o GetFunctionReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Function != nil {
		toSerialize["function"] = o.Function
	}
	return json.Marshal(toSerialize)
}

type NullableGetFunctionReply struct {
	value *GetFunctionReply
	isSet bool
}

func (v NullableGetFunctionReply) Get() *GetFunctionReply {
	return v.value
}

func (v *NullableGetFunctionReply) Set(val *GetFunctionReply) {
	v.value = val
	v.isSet = true
}

func (v NullableGetFunctionReply) IsSet() bool {
	return v.isSet
}

func (v *NullableGetFunctionReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetFunctionReply(val *GetFunctionReply) *NullableGetFunctionReply {
	return &NullableGetFunctionReply{value: val, isSet: true}
}

func (v NullableGetFunctionReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetFunctionReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


