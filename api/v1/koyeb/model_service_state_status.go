/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// ServiceStateStatus the model 'ServiceStateStatus'
type ServiceStateStatus string

// List of ServiceState.Status
const (
	SERVICESTATESTATUS_UNKNOWN ServiceStateStatus = "UNKNOWN"
	SERVICESTATESTATUS_CREATING ServiceStateStatus = "CREATING"
	SERVICESTATESTATUS_ACTIVE ServiceStateStatus = "ACTIVE"
	SERVICESTATESTATUS_STOPPING ServiceStateStatus = "STOPPING"
	SERVICESTATESTATUS_STOPPED ServiceStateStatus = "STOPPED"
)

var allowedServiceStateStatusEnumValues = []ServiceStateStatus{
	"UNKNOWN",
	"CREATING",
	"ACTIVE",
	"STOPPING",
	"STOPPED",
}

func (v *ServiceStateStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceStateStatus(value)
	for _, existing := range allowedServiceStateStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceStateStatus", value)
}

// NewServiceStateStatusFromValue returns a pointer to a valid ServiceStateStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceStateStatusFromValue(v string) (*ServiceStateStatus, error) {
	ev := ServiceStateStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceStateStatus: valid values are %v", v, allowedServiceStateStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceStateStatus) IsValid() bool {
	for _, existing := range allowedServiceStateStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceState.Status value
func (v ServiceStateStatus) Ptr() *ServiceStateStatus {
	return &v
}

type NullableServiceStateStatus struct {
	value *ServiceStateStatus
	isSet bool
}

func (v NullableServiceStateStatus) Get() *ServiceStateStatus {
	return v.value
}

func (v *NullableServiceStateStatus) Set(val *ServiceStateStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceStateStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceStateStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceStateStatus(val *ServiceStateStatus) *NullableServiceStateStatus {
	return &NullableServiceStateStatus{value: val, isSet: true}
}

func (v NullableServiceStateStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceStateStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

