/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// DockerSource struct for DockerSource
type DockerSource struct {
	Image *string `json:"image,omitempty"`
	Command *string `json:"command,omitempty"`
	Args []string `json:"args,omitempty"`
	ImageRegistrySecret *string `json:"image_registry_secret,omitempty"`
	Entrypoint []string `json:"entrypoint,omitempty"`
}

// NewDockerSource instantiates a new DockerSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDockerSource() *DockerSource {
	this := DockerSource{}
	return &this
}

// NewDockerSourceWithDefaults instantiates a new DockerSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDockerSourceWithDefaults() *DockerSource {
	this := DockerSource{}
	return &this
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *DockerSource) GetImage() string {
	if o == nil || isNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerSource) GetImageOk() (*string, bool) {
	if o == nil || isNil(o.Image) {
    return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *DockerSource) HasImage() bool {
	if o != nil && !isNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *DockerSource) SetImage(v string) {
	o.Image = &v
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *DockerSource) GetCommand() string {
	if o == nil || isNil(o.Command) {
		var ret string
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerSource) GetCommandOk() (*string, bool) {
	if o == nil || isNil(o.Command) {
    return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *DockerSource) HasCommand() bool {
	if o != nil && !isNil(o.Command) {
		return true
	}

	return false
}

// SetCommand gets a reference to the given string and assigns it to the Command field.
func (o *DockerSource) SetCommand(v string) {
	o.Command = &v
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *DockerSource) GetArgs() []string {
	if o == nil || isNil(o.Args) {
		var ret []string
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerSource) GetArgsOk() ([]string, bool) {
	if o == nil || isNil(o.Args) {
    return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *DockerSource) HasArgs() bool {
	if o != nil && !isNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []string and assigns it to the Args field.
func (o *DockerSource) SetArgs(v []string) {
	o.Args = v
}

// GetImageRegistrySecret returns the ImageRegistrySecret field value if set, zero value otherwise.
func (o *DockerSource) GetImageRegistrySecret() string {
	if o == nil || isNil(o.ImageRegistrySecret) {
		var ret string
		return ret
	}
	return *o.ImageRegistrySecret
}

// GetImageRegistrySecretOk returns a tuple with the ImageRegistrySecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerSource) GetImageRegistrySecretOk() (*string, bool) {
	if o == nil || isNil(o.ImageRegistrySecret) {
    return nil, false
	}
	return o.ImageRegistrySecret, true
}

// HasImageRegistrySecret returns a boolean if a field has been set.
func (o *DockerSource) HasImageRegistrySecret() bool {
	if o != nil && !isNil(o.ImageRegistrySecret) {
		return true
	}

	return false
}

// SetImageRegistrySecret gets a reference to the given string and assigns it to the ImageRegistrySecret field.
func (o *DockerSource) SetImageRegistrySecret(v string) {
	o.ImageRegistrySecret = &v
}

// GetEntrypoint returns the Entrypoint field value if set, zero value otherwise.
func (o *DockerSource) GetEntrypoint() []string {
	if o == nil || isNil(o.Entrypoint) {
		var ret []string
		return ret
	}
	return o.Entrypoint
}

// GetEntrypointOk returns a tuple with the Entrypoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerSource) GetEntrypointOk() ([]string, bool) {
	if o == nil || isNil(o.Entrypoint) {
    return nil, false
	}
	return o.Entrypoint, true
}

// HasEntrypoint returns a boolean if a field has been set.
func (o *DockerSource) HasEntrypoint() bool {
	if o != nil && !isNil(o.Entrypoint) {
		return true
	}

	return false
}

// SetEntrypoint gets a reference to the given []string and assigns it to the Entrypoint field.
func (o *DockerSource) SetEntrypoint(v []string) {
	o.Entrypoint = v
}

func (o DockerSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !isNil(o.Command) {
		toSerialize["command"] = o.Command
	}
	if !isNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	if !isNil(o.ImageRegistrySecret) {
		toSerialize["image_registry_secret"] = o.ImageRegistrySecret
	}
	if !isNil(o.Entrypoint) {
		toSerialize["entrypoint"] = o.Entrypoint
	}
	return json.Marshal(toSerialize)
}

type NullableDockerSource struct {
	value *DockerSource
	isSet bool
}

func (v NullableDockerSource) Get() *DockerSource {
	return v.value
}

func (v *NullableDockerSource) Set(val *DockerSource) {
	v.value = val
	v.isSet = true
}

func (v NullableDockerSource) IsSet() bool {
	return v.isSet
}

func (v *NullableDockerSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDockerSource(val *DockerSource) *NullableDockerSource {
	return &NullableDockerSource{value: val, isSet: true}
}

func (v NullableDockerSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDockerSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


