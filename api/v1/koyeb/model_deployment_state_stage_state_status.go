/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// DeploymentStateStageStateStatus the model 'DeploymentStateStageStateStatus'
type DeploymentStateStageStateStatus string

// List of DeploymentState.StageState.Status
const (
	DEPLOYMENTSTATESTAGESTATESTATUS_UNKNOWN DeploymentStateStageStateStatus = "UNKNOWN"
	DEPLOYMENTSTATESTAGESTATESTATUS_RUNNING DeploymentStateStageStateStatus = "RUNNING"
	DEPLOYMENTSTATESTAGESTATESTATUS_FAILED DeploymentStateStageStateStatus = "FAILED"
	DEPLOYMENTSTATESTAGESTATESTATUS_COMPLETED DeploymentStateStageStateStatus = "COMPLETED"
)

var allowedDeploymentStateStageStateStatusEnumValues = []DeploymentStateStageStateStatus{
	"UNKNOWN",
	"RUNNING",
	"FAILED",
	"COMPLETED",
}

func (v *DeploymentStateStageStateStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeploymentStateStageStateStatus(value)
	for _, existing := range allowedDeploymentStateStageStateStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeploymentStateStageStateStatus", value)
}

// NewDeploymentStateStageStateStatusFromValue returns a pointer to a valid DeploymentStateStageStateStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeploymentStateStageStateStatusFromValue(v string) (*DeploymentStateStageStateStatus, error) {
	ev := DeploymentStateStageStateStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeploymentStateStageStateStatus: valid values are %v", v, allowedDeploymentStateStageStateStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeploymentStateStageStateStatus) IsValid() bool {
	for _, existing := range allowedDeploymentStateStageStateStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeploymentState.StageState.Status value
func (v DeploymentStateStageStateStatus) Ptr() *DeploymentStateStageStateStatus {
	return &v
}

type NullableDeploymentStateStageStateStatus struct {
	value *DeploymentStateStageStateStatus
	isSet bool
}

func (v NullableDeploymentStateStageStateStatus) Get() *DeploymentStateStageStateStatus {
	return v.value
}

func (v *NullableDeploymentStateStageStateStatus) Set(val *DeploymentStateStageStateStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentStateStageStateStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentStateStageStateStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentStateStageStateStatus(val *DeploymentStateStageStateStatus) *NullableDeploymentStateStageStateStatus {
	return &NullableDeploymentStateStageStateStatus{value: val, isSet: true}
}

func (v NullableDeploymentStateStageStateStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentStateStageStateStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

