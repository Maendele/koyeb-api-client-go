/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// DeploymentState struct for DeploymentState
type DeploymentState struct {
	Groups *[]DeploymentStateGroup `json:"groups,omitempty"`
}

// NewDeploymentState instantiates a new DeploymentState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentState() *DeploymentState {
	this := DeploymentState{}
	return &this
}

// NewDeploymentStateWithDefaults instantiates a new DeploymentState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentStateWithDefaults() *DeploymentState {
	this := DeploymentState{}
	return &this
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *DeploymentState) GetGroups() []DeploymentStateGroup {
	if o == nil || o.Groups == nil {
		var ret []DeploymentStateGroup
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentState) GetGroupsOk() (*[]DeploymentStateGroup, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *DeploymentState) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []DeploymentStateGroup and assigns it to the Groups field.
func (o *DeploymentState) SetGroups(v []DeploymentStateGroup) {
	o.Groups = &v
}

func (o DeploymentState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	return json.Marshal(toSerialize)
}

type NullableDeploymentState struct {
	value *DeploymentState
	isSet bool
}

func (v NullableDeploymentState) Get() *DeploymentState {
	return v.value
}

func (v *NullableDeploymentState) Set(val *DeploymentState) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentState) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentState(val *DeploymentState) *NullableDeploymentState {
	return &NullableDeploymentState{value: val, isSet: true}
}

func (v NullableDeploymentState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


