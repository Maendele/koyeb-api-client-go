/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// StoreStatus the model 'StoreStatus'
type StoreStatus string

// List of Store.Status
const (
	STORESTATUS_PROVISIONING StoreStatus = "PROVISIONING"
	STORESTATUS_UPDATING StoreStatus = "UPDATING"
	STORESTATUS_ENABLING StoreStatus = "ENABLING"
	STORESTATUS_ENABLED StoreStatus = "ENABLED"
	STORESTATUS_DISABING StoreStatus = "DISABING"
	STORESTATUS_DISABLED StoreStatus = "DISABLED"
	STORESTATUS_LOCKING StoreStatus = "LOCKING"
	STORESTATUS_LOCKED StoreStatus = "LOCKED"
	STORESTATUS_ERROR StoreStatus = "ERROR"
	STORESTATUS_DELETING StoreStatus = "DELETING"
	STORESTATUS_DELETED StoreStatus = "DELETED"
)

var allowedStoreStatusEnumValues = []StoreStatus{
	"PROVISIONING",
	"UPDATING",
	"ENABLING",
	"ENABLED",
	"DISABING",
	"DISABLED",
	"LOCKING",
	"LOCKED",
	"ERROR",
	"DELETING",
	"DELETED",
}

func (v *StoreStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StoreStatus(value)
	for _, existing := range allowedStoreStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StoreStatus", value)
}

// NewStoreStatusFromValue returns a pointer to a valid StoreStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStoreStatusFromValue(v string) (*StoreStatus, error) {
	ev := StoreStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StoreStatus: valid values are %v", v, allowedStoreStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StoreStatus) IsValid() bool {
	for _, existing := range allowedStoreStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Store.Status value
func (v StoreStatus) Ptr() *StoreStatus {
	return &v
}

type NullableStoreStatus struct {
	value *StoreStatus
	isSet bool
}

func (v NullableStoreStatus) Get() *StoreStatus {
	return v.value
}

func (v *NullableStoreStatus) Set(val *StoreStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreStatus(val *StoreStatus) *NullableStoreStatus {
	return &NullableStoreStatus{value: val, isSet: true}
}

func (v NullableStoreStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

