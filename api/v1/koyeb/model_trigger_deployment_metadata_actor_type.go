/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// TriggerDeploymentMetadataActorType the model 'TriggerDeploymentMetadataActorType'
type TriggerDeploymentMetadataActorType string

// List of TriggerDeploymentMetadata.ActorType
const (
	TRIGGERDEPLOYMENTMETADATAACTORTYPE_UNKNOWN_ACTOR TriggerDeploymentMetadataActorType = "UNKNOWN_ACTOR"
	TRIGGERDEPLOYMENTMETADATAACTORTYPE_USER TriggerDeploymentMetadataActorType = "USER"
	TRIGGERDEPLOYMENTMETADATAACTORTYPE_SYSTEM TriggerDeploymentMetadataActorType = "SYSTEM"
)

var allowedTriggerDeploymentMetadataActorTypeEnumValues = []TriggerDeploymentMetadataActorType{
	"UNKNOWN_ACTOR",
	"USER",
	"SYSTEM",
}

func (v *TriggerDeploymentMetadataActorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TriggerDeploymentMetadataActorType(value)
	for _, existing := range allowedTriggerDeploymentMetadataActorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TriggerDeploymentMetadataActorType", value)
}

// NewTriggerDeploymentMetadataActorTypeFromValue returns a pointer to a valid TriggerDeploymentMetadataActorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTriggerDeploymentMetadataActorTypeFromValue(v string) (*TriggerDeploymentMetadataActorType, error) {
	ev := TriggerDeploymentMetadataActorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TriggerDeploymentMetadataActorType: valid values are %v", v, allowedTriggerDeploymentMetadataActorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TriggerDeploymentMetadataActorType) IsValid() bool {
	for _, existing := range allowedTriggerDeploymentMetadataActorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TriggerDeploymentMetadata.ActorType value
func (v TriggerDeploymentMetadataActorType) Ptr() *TriggerDeploymentMetadataActorType {
	return &v
}

type NullableTriggerDeploymentMetadataActorType struct {
	value *TriggerDeploymentMetadataActorType
	isSet bool
}

func (v NullableTriggerDeploymentMetadataActorType) Get() *TriggerDeploymentMetadataActorType {
	return v.value
}

func (v *NullableTriggerDeploymentMetadataActorType) Set(val *TriggerDeploymentMetadataActorType) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerDeploymentMetadataActorType) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerDeploymentMetadataActorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerDeploymentMetadataActorType(val *TriggerDeploymentMetadataActorType) *NullableTriggerDeploymentMetadataActorType {
	return &NullableTriggerDeploymentMetadataActorType{value: val, isSet: true}
}

func (v NullableTriggerDeploymentMetadataActorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerDeploymentMetadataActorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

