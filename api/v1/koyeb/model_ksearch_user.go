/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// KsearchUser struct for KsearchUser
type KsearchUser struct {
	Id *string `json:"id,omitempty"`
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
	GithubUser *string `json:"github_user,omitempty"`
}

// NewKsearchUser instantiates a new KsearchUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKsearchUser() *KsearchUser {
	this := KsearchUser{}
	return &this
}

// NewKsearchUserWithDefaults instantiates a new KsearchUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKsearchUserWithDefaults() *KsearchUser {
	this := KsearchUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KsearchUser) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsearchUser) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KsearchUser) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *KsearchUser) SetId(v string) {
	o.Id = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *KsearchUser) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsearchUser) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *KsearchUser) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *KsearchUser) SetEmail(v string) {
	o.Email = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KsearchUser) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsearchUser) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KsearchUser) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KsearchUser) SetName(v string) {
	o.Name = &v
}

// GetGithubUser returns the GithubUser field value if set, zero value otherwise.
func (o *KsearchUser) GetGithubUser() string {
	if o == nil || o.GithubUser == nil {
		var ret string
		return ret
	}
	return *o.GithubUser
}

// GetGithubUserOk returns a tuple with the GithubUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsearchUser) GetGithubUserOk() (*string, bool) {
	if o == nil || o.GithubUser == nil {
		return nil, false
	}
	return o.GithubUser, true
}

// HasGithubUser returns a boolean if a field has been set.
func (o *KsearchUser) HasGithubUser() bool {
	if o != nil && o.GithubUser != nil {
		return true
	}

	return false
}

// SetGithubUser gets a reference to the given string and assigns it to the GithubUser field.
func (o *KsearchUser) SetGithubUser(v string) {
	o.GithubUser = &v
}

func (o KsearchUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.GithubUser != nil {
		toSerialize["github_user"] = o.GithubUser
	}
	return json.Marshal(toSerialize)
}

type NullableKsearchUser struct {
	value *KsearchUser
	isSet bool
}

func (v NullableKsearchUser) Get() *KsearchUser {
	return v.value
}

func (v *NullableKsearchUser) Set(val *KsearchUser) {
	v.value = val
	v.isSet = true
}

func (v NullableKsearchUser) IsSet() bool {
	return v.isSet
}

func (v *NullableKsearchUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKsearchUser(val *KsearchUser) *NullableKsearchUser {
	return &NullableKsearchUser{value: val, isSet: true}
}

func (v NullableKsearchUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKsearchUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


