/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// DomainType the model 'DomainType'
type DomainType string

// List of Domain.Type
const (
	DOMAINTYPE_AUTOASSIGNED DomainType = "AUTOASSIGNED"
	DOMAINTYPE_CUSTOM DomainType = "CUSTOM"
)

// All allowed values of DomainType enum
var AllowedDomainTypeEnumValues = []DomainType{
	"AUTOASSIGNED",
	"CUSTOM",
}

func (v *DomainType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DomainType(value)
	for _, existing := range AllowedDomainTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DomainType", value)
}

// NewDomainTypeFromValue returns a pointer to a valid DomainType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDomainTypeFromValue(v string) (*DomainType, error) {
	ev := DomainType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DomainType: valid values are %v", v, AllowedDomainTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DomainType) IsValid() bool {
	for _, existing := range AllowedDomainTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Domain.Type value
func (v DomainType) Ptr() *DomainType {
	return &v
}

type NullableDomainType struct {
	value *DomainType
	isSet bool
}

func (v NullableDomainType) Get() *DomainType {
	return v.value
}

func (v *NullableDomainType) Set(val *DomainType) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainType) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainType(val *DomainType) *NullableDomainType {
	return &NullableDomainType{value: val, isSet: true}
}

func (v NullableDomainType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

