/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// GitSource struct for GitSource
type GitSource struct {
	// A url to a git repository (contains the provider as well) .e.g: github.com/koyeb/test.
	Repository *string `json:"repository,omitempty"`
	// A git reference of the code that needs to be build (.e.g: refs/heads/my-branch refs/tags/my-tag deadbeef).
	Reference *string `json:"reference,omitempty"`
	// If true a new revision will be triggered when the hash of the reference is pushed.
	DeployOnPush *bool `json:"deploy_on_push,omitempty"`
}

// NewGitSource instantiates a new GitSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitSource() *GitSource {
	this := GitSource{}
	return &this
}

// NewGitSourceWithDefaults instantiates a new GitSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitSourceWithDefaults() *GitSource {
	this := GitSource{}
	return &this
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *GitSource) GetRepository() string {
	if o == nil || o.Repository == nil {
		var ret string
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitSource) GetRepositoryOk() (*string, bool) {
	if o == nil || o.Repository == nil {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *GitSource) HasRepository() bool {
	if o != nil && o.Repository != nil {
		return true
	}

	return false
}

// SetRepository gets a reference to the given string and assigns it to the Repository field.
func (o *GitSource) SetRepository(v string) {
	o.Repository = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *GitSource) GetReference() string {
	if o == nil || o.Reference == nil {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitSource) GetReferenceOk() (*string, bool) {
	if o == nil || o.Reference == nil {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *GitSource) HasReference() bool {
	if o != nil && o.Reference != nil {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *GitSource) SetReference(v string) {
	o.Reference = &v
}

// GetDeployOnPush returns the DeployOnPush field value if set, zero value otherwise.
func (o *GitSource) GetDeployOnPush() bool {
	if o == nil || o.DeployOnPush == nil {
		var ret bool
		return ret
	}
	return *o.DeployOnPush
}

// GetDeployOnPushOk returns a tuple with the DeployOnPush field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitSource) GetDeployOnPushOk() (*bool, bool) {
	if o == nil || o.DeployOnPush == nil {
		return nil, false
	}
	return o.DeployOnPush, true
}

// HasDeployOnPush returns a boolean if a field has been set.
func (o *GitSource) HasDeployOnPush() bool {
	if o != nil && o.DeployOnPush != nil {
		return true
	}

	return false
}

// SetDeployOnPush gets a reference to the given bool and assigns it to the DeployOnPush field.
func (o *GitSource) SetDeployOnPush(v bool) {
	o.DeployOnPush = &v
}

func (o GitSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Repository != nil {
		toSerialize["repository"] = o.Repository
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	if o.DeployOnPush != nil {
		toSerialize["deploy_on_push"] = o.DeployOnPush
	}
	return json.Marshal(toSerialize)
}

type NullableGitSource struct {
	value *GitSource
	isSet bool
}

func (v NullableGitSource) Get() *GitSource {
	return v.value
}

func (v *NullableGitSource) Set(val *GitSource) {
	v.value = val
	v.isSet = true
}

func (v NullableGitSource) IsSet() bool {
	return v.isSet
}

func (v *NullableGitSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitSource(val *GitSource) *NullableGitSource {
	return &NullableGitSource{value: val, isSet: true}
}

func (v NullableGitSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


