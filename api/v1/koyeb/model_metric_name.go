/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// MetricName the model 'MetricName'
type MetricName string

// List of MetricName
const (
	METRICNAME_UNKNOWN MetricName = "UNKNOWN"
	METRICNAME_CPU_TOTAL_PERCENT MetricName = "CPU_TOTAL_PERCENT"
	METRICNAME_MEM_RSS MetricName = "MEM_RSS"
	METRICNAME_HTTP_THROUGHPUT MetricName = "HTTP_THROUGHPUT"
	METRICNAME_HTTP_RESPONSE_TIME_50_P MetricName = "HTTP_RESPONSE_TIME_50P"
	METRICNAME_HTTP_RESPONSE_TIME_90_P MetricName = "HTTP_RESPONSE_TIME_90P"
	METRICNAME_HTTP_RESPONSE_TIME_99_P MetricName = "HTTP_RESPONSE_TIME_99P"
	METRICNAME_HTTP_RESPONSE_TIME_MAX MetricName = "HTTP_RESPONSE_TIME_MAX"
	METRICNAME_PUBLIC_DATA_TRANSFER_IN MetricName = "PUBLIC_DATA_TRANSFER_IN"
	METRICNAME_PUBLIC_DATA_TRANSFER_OUT MetricName = "PUBLIC_DATA_TRANSFER_OUT"
)

var allowedMetricNameEnumValues = []MetricName{
	"UNKNOWN",
	"CPU_TOTAL_PERCENT",
	"MEM_RSS",
	"HTTP_THROUGHPUT",
	"HTTP_RESPONSE_TIME_50P",
	"HTTP_RESPONSE_TIME_90P",
	"HTTP_RESPONSE_TIME_99P",
	"HTTP_RESPONSE_TIME_MAX",
	"PUBLIC_DATA_TRANSFER_IN",
	"PUBLIC_DATA_TRANSFER_OUT",
}

func (v *MetricName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetricName(value)
	for _, existing := range allowedMetricNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetricName", value)
}

// NewMetricNameFromValue returns a pointer to a valid MetricName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricNameFromValue(v string) (*MetricName, error) {
	ev := MetricName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetricName: valid values are %v", v, allowedMetricNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricName) IsValid() bool {
	for _, existing := range allowedMetricNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetricName value
func (v MetricName) Ptr() *MetricName {
	return &v
}

type NullableMetricName struct {
	value *MetricName
	isSet bool
}

func (v NullableMetricName) Get() *MetricName {
	return v.value
}

func (v *NullableMetricName) Set(val *MetricName) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricName) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricName(val *MetricName) *NullableMetricName {
	return &NullableMetricName{value: val, isSet: true}
}

func (v NullableMetricName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

