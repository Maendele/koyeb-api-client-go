/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// ConnectorType the model 'ConnectorType'
type ConnectorType string

// List of Connector.Type
const (
	CONNECTORTYPE_UNKNOWN ConnectorType = "unknown"
	CONNECTORTYPE_CLOUDEVENT ConnectorType = "cloudevent"
	CONNECTORTYPE_WEBHOOK ConnectorType = "webhook"
)

var allowedConnectorTypeEnumValues = []ConnectorType{
	"unknown",
	"cloudevent",
	"webhook",
}

func (v *ConnectorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectorType(value)
	for _, existing := range allowedConnectorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectorType", value)
}

// NewConnectorTypeFromValue returns a pointer to a valid ConnectorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectorTypeFromValue(v string) (*ConnectorType, error) {
	ev := ConnectorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectorType: valid values are %v", v, allowedConnectorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectorType) IsValid() bool {
	for _, existing := range allowedConnectorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Connector.Type value
func (v ConnectorType) Ptr() *ConnectorType {
	return &v
}

type NullableConnectorType struct {
	value *ConnectorType
	isSet bool
}

func (v NullableConnectorType) Get() *ConnectorType {
	return v.value
}

func (v *NullableConnectorType) Set(val *ConnectorType) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorType) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorType(val *ConnectorType) *NullableConnectorType {
	return &NullableConnectorType{value: val, isSet: true}
}

func (v NullableConnectorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

