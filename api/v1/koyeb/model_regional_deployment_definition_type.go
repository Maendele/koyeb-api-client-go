/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// RegionalDeploymentDefinitionType the model 'RegionalDeploymentDefinitionType'
type RegionalDeploymentDefinitionType string

// List of RegionalDeploymentDefinition.Type
const (
	REGIONALDEPLOYMENTDEFINITIONTYPE_INVALID RegionalDeploymentDefinitionType = "INVALID"
	REGIONALDEPLOYMENTDEFINITIONTYPE_WEB RegionalDeploymentDefinitionType = "WEB"
	REGIONALDEPLOYMENTDEFINITIONTYPE_WORKER RegionalDeploymentDefinitionType = "WORKER"
)

// All allowed values of RegionalDeploymentDefinitionType enum
var AllowedRegionalDeploymentDefinitionTypeEnumValues = []RegionalDeploymentDefinitionType{
	"INVALID",
	"WEB",
	"WORKER",
}

func (v *RegionalDeploymentDefinitionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RegionalDeploymentDefinitionType(value)
	for _, existing := range AllowedRegionalDeploymentDefinitionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RegionalDeploymentDefinitionType", value)
}

// NewRegionalDeploymentDefinitionTypeFromValue returns a pointer to a valid RegionalDeploymentDefinitionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRegionalDeploymentDefinitionTypeFromValue(v string) (*RegionalDeploymentDefinitionType, error) {
	ev := RegionalDeploymentDefinitionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RegionalDeploymentDefinitionType: valid values are %v", v, AllowedRegionalDeploymentDefinitionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RegionalDeploymentDefinitionType) IsValid() bool {
	for _, existing := range AllowedRegionalDeploymentDefinitionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RegionalDeploymentDefinition.Type value
func (v RegionalDeploymentDefinitionType) Ptr() *RegionalDeploymentDefinitionType {
	return &v
}

type NullableRegionalDeploymentDefinitionType struct {
	value *RegionalDeploymentDefinitionType
	isSet bool
}

func (v NullableRegionalDeploymentDefinitionType) Get() *RegionalDeploymentDefinitionType {
	return v.value
}

func (v *NullableRegionalDeploymentDefinitionType) Set(val *RegionalDeploymentDefinitionType) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionalDeploymentDefinitionType) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionalDeploymentDefinitionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionalDeploymentDefinitionType(val *RegionalDeploymentDefinitionType) *NullableRegionalDeploymentDefinitionType {
	return &NullableRegionalDeploymentDefinitionType{value: val, isSet: true}
}

func (v NullableRegionalDeploymentDefinitionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionalDeploymentDefinitionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

