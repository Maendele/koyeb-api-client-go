/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// ServiceRevisionStateStageStateStatus the model 'ServiceRevisionStateStageStateStatus'
type ServiceRevisionStateStageStateStatus string

// List of ServiceRevisionState.StageState.Status
const (
	SERVICEREVISIONSTATESTAGESTATESTATUS_UNKNOWN ServiceRevisionStateStageStateStatus = "UNKNOWN"
	SERVICEREVISIONSTATESTAGESTATESTATUS_RUNNING ServiceRevisionStateStageStateStatus = "RUNNING"
	SERVICEREVISIONSTATESTAGESTATESTATUS_FAILED ServiceRevisionStateStageStateStatus = "FAILED"
	SERVICEREVISIONSTATESTAGESTATESTATUS_COMPLETED ServiceRevisionStateStageStateStatus = "COMPLETED"
)

var allowedServiceRevisionStateStageStateStatusEnumValues = []ServiceRevisionStateStageStateStatus{
	"UNKNOWN",
	"RUNNING",
	"FAILED",
	"COMPLETED",
}

func (v *ServiceRevisionStateStageStateStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceRevisionStateStageStateStatus(value)
	for _, existing := range allowedServiceRevisionStateStageStateStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceRevisionStateStageStateStatus", value)
}

// NewServiceRevisionStateStageStateStatusFromValue returns a pointer to a valid ServiceRevisionStateStageStateStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceRevisionStateStageStateStatusFromValue(v string) (*ServiceRevisionStateStageStateStatus, error) {
	ev := ServiceRevisionStateStageStateStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceRevisionStateStageStateStatus: valid values are %v", v, allowedServiceRevisionStateStageStateStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceRevisionStateStageStateStatus) IsValid() bool {
	for _, existing := range allowedServiceRevisionStateStageStateStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceRevisionState.StageState.Status value
func (v ServiceRevisionStateStageStateStatus) Ptr() *ServiceRevisionStateStageStateStatus {
	return &v
}

type NullableServiceRevisionStateStageStateStatus struct {
	value *ServiceRevisionStateStageStateStatus
	isSet bool
}

func (v NullableServiceRevisionStateStageStateStatus) Get() *ServiceRevisionStateStageStateStatus {
	return v.value
}

func (v *NullableServiceRevisionStateStageStateStatus) Set(val *ServiceRevisionStateStageStateStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceRevisionStateStageStateStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceRevisionStateStageStateStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceRevisionStateStageStateStatus(val *ServiceRevisionStateStageStateStatus) *NullableServiceRevisionStateStageStateStatus {
	return &NullableServiceRevisionStateStageStateStatus{value: val, isSet: true}
}

func (v NullableServiceRevisionStateStageStateStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceRevisionStateStageStateStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

