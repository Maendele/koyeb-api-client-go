/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// SCMReferenceSCMType the model 'SCMReferenceSCMType'
type SCMReferenceSCMType string

// List of SCMReference.SCMType
const (
	SCMREFERENCESCMTYPE_GITHUB SCMReferenceSCMType = "GITHUB"
	SCMREFERENCESCMTYPE_UNKNOWN SCMReferenceSCMType = "UNKNOWN"
)

var allowedSCMReferenceSCMTypeEnumValues = []SCMReferenceSCMType{
	"GITHUB",
	"UNKNOWN",
}

func (v *SCMReferenceSCMType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SCMReferenceSCMType(value)
	for _, existing := range allowedSCMReferenceSCMTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SCMReferenceSCMType", value)
}

// NewSCMReferenceSCMTypeFromValue returns a pointer to a valid SCMReferenceSCMType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSCMReferenceSCMTypeFromValue(v string) (*SCMReferenceSCMType, error) {
	ev := SCMReferenceSCMType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SCMReferenceSCMType: valid values are %v", v, allowedSCMReferenceSCMTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SCMReferenceSCMType) IsValid() bool {
	for _, existing := range allowedSCMReferenceSCMTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SCMReference.SCMType value
func (v SCMReferenceSCMType) Ptr() *SCMReferenceSCMType {
	return &v
}

type NullableSCMReferenceSCMType struct {
	value *SCMReferenceSCMType
	isSet bool
}

func (v NullableSCMReferenceSCMType) Get() *SCMReferenceSCMType {
	return v.value
}

func (v *NullableSCMReferenceSCMType) Set(val *SCMReferenceSCMType) {
	v.value = val
	v.isSet = true
}

func (v NullableSCMReferenceSCMType) IsSet() bool {
	return v.isSet
}

func (v *NullableSCMReferenceSCMType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSCMReferenceSCMType(val *SCMReferenceSCMType) *NullableSCMReferenceSCMType {
	return &NullableSCMReferenceSCMType{value: val, isSet: true}
}

func (v NullableSCMReferenceSCMType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSCMReferenceSCMType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

