/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// DeactivateOrganizationReply struct for DeactivateOrganizationReply
type DeactivateOrganizationReply struct {
	Organization *Organization `json:"organization,omitempty"`
}

// NewDeactivateOrganizationReply instantiates a new DeactivateOrganizationReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeactivateOrganizationReply() *DeactivateOrganizationReply {
	this := DeactivateOrganizationReply{}
	return &this
}

// NewDeactivateOrganizationReplyWithDefaults instantiates a new DeactivateOrganizationReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeactivateOrganizationReplyWithDefaults() *DeactivateOrganizationReply {
	this := DeactivateOrganizationReply{}
	return &this
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *DeactivateOrganizationReply) GetOrganization() Organization {
	if o == nil || isNil(o.Organization) {
		var ret Organization
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeactivateOrganizationReply) GetOrganizationOk() (*Organization, bool) {
	if o == nil || isNil(o.Organization) {
    return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *DeactivateOrganizationReply) HasOrganization() bool {
	if o != nil && !isNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given Organization and assigns it to the Organization field.
func (o *DeactivateOrganizationReply) SetOrganization(v Organization) {
	o.Organization = &v
}

func (o DeactivateOrganizationReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	return json.Marshal(toSerialize)
}

type NullableDeactivateOrganizationReply struct {
	value *DeactivateOrganizationReply
	isSet bool
}

func (v NullableDeactivateOrganizationReply) Get() *DeactivateOrganizationReply {
	return v.value
}

func (v *NullableDeactivateOrganizationReply) Set(val *DeactivateOrganizationReply) {
	v.value = val
	v.isSet = true
}

func (v NullableDeactivateOrganizationReply) IsSet() bool {
	return v.isSet
}

func (v *NullableDeactivateOrganizationReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeactivateOrganizationReply(val *DeactivateOrganizationReply) *NullableDeactivateOrganizationReply {
	return &NullableDeactivateOrganizationReply{value: val, isSet: true}
}

func (v NullableDeactivateOrganizationReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeactivateOrganizationReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


