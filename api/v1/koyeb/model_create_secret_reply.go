/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// CreateSecretReply struct for CreateSecretReply
type CreateSecretReply struct {
	Secret *Secret `json:"secret,omitempty"`
}

// NewCreateSecretReply instantiates a new CreateSecretReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSecretReply() *CreateSecretReply {
	this := CreateSecretReply{}
	return &this
}

// NewCreateSecretReplyWithDefaults instantiates a new CreateSecretReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSecretReplyWithDefaults() *CreateSecretReply {
	this := CreateSecretReply{}
	return &this
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *CreateSecretReply) GetSecret() Secret {
	if o == nil || o.Secret == nil {
		var ret Secret
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSecretReply) GetSecretOk() (*Secret, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *CreateSecretReply) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given Secret and assigns it to the Secret field.
func (o *CreateSecretReply) SetSecret(v Secret) {
	o.Secret = &v
}

func (o CreateSecretReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	return json.Marshal(toSerialize)
}

type NullableCreateSecretReply struct {
	value *CreateSecretReply
	isSet bool
}

func (v NullableCreateSecretReply) Get() *CreateSecretReply {
	return v.value
}

func (v *NullableCreateSecretReply) Set(val *CreateSecretReply) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSecretReply) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSecretReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSecretReply(val *CreateSecretReply) *NullableCreateSecretReply {
	return &NullableCreateSecretReply{value: val, isSet: true}
}

func (v NullableCreateSecretReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSecretReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


