/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"time"
)

// StackRevisionListItem struct for StackRevisionListItem
type StackRevisionListItem struct {
	Sha *string `json:"sha,omitempty"`
	Version *string `json:"version,omitempty"`
	ParentSha *string `json:"parent_sha,omitempty"`
	Status *StackRevisionStatus `json:"status,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	CommitInfo *CommitInfo `json:"commit_info,omitempty"`
	ReleaseId *string `json:"releaseId,omitempty"`
}

// NewStackRevisionListItem instantiates a new StackRevisionListItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackRevisionListItem() *StackRevisionListItem {
	this := StackRevisionListItem{}
	var status StackRevisionStatus = STACKREVISIONSTATUS_UNKNOWN
	this.Status = &status
	return &this
}

// NewStackRevisionListItemWithDefaults instantiates a new StackRevisionListItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackRevisionListItemWithDefaults() *StackRevisionListItem {
	this := StackRevisionListItem{}
	var status StackRevisionStatus = STACKREVISIONSTATUS_UNKNOWN
	this.Status = &status
	return &this
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *StackRevisionListItem) GetSha() string {
	if o == nil || o.Sha == nil {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackRevisionListItem) GetShaOk() (*string, bool) {
	if o == nil || o.Sha == nil {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *StackRevisionListItem) HasSha() bool {
	if o != nil && o.Sha != nil {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *StackRevisionListItem) SetSha(v string) {
	o.Sha = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *StackRevisionListItem) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackRevisionListItem) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *StackRevisionListItem) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *StackRevisionListItem) SetVersion(v string) {
	o.Version = &v
}

// GetParentSha returns the ParentSha field value if set, zero value otherwise.
func (o *StackRevisionListItem) GetParentSha() string {
	if o == nil || o.ParentSha == nil {
		var ret string
		return ret
	}
	return *o.ParentSha
}

// GetParentShaOk returns a tuple with the ParentSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackRevisionListItem) GetParentShaOk() (*string, bool) {
	if o == nil || o.ParentSha == nil {
		return nil, false
	}
	return o.ParentSha, true
}

// HasParentSha returns a boolean if a field has been set.
func (o *StackRevisionListItem) HasParentSha() bool {
	if o != nil && o.ParentSha != nil {
		return true
	}

	return false
}

// SetParentSha gets a reference to the given string and assigns it to the ParentSha field.
func (o *StackRevisionListItem) SetParentSha(v string) {
	o.ParentSha = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *StackRevisionListItem) GetStatus() StackRevisionStatus {
	if o == nil || o.Status == nil {
		var ret StackRevisionStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackRevisionListItem) GetStatusOk() (*StackRevisionStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *StackRevisionListItem) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given StackRevisionStatus and assigns it to the Status field.
func (o *StackRevisionListItem) SetStatus(v StackRevisionStatus) {
	o.Status = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *StackRevisionListItem) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackRevisionListItem) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *StackRevisionListItem) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *StackRevisionListItem) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCommitInfo returns the CommitInfo field value if set, zero value otherwise.
func (o *StackRevisionListItem) GetCommitInfo() CommitInfo {
	if o == nil || o.CommitInfo == nil {
		var ret CommitInfo
		return ret
	}
	return *o.CommitInfo
}

// GetCommitInfoOk returns a tuple with the CommitInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackRevisionListItem) GetCommitInfoOk() (*CommitInfo, bool) {
	if o == nil || o.CommitInfo == nil {
		return nil, false
	}
	return o.CommitInfo, true
}

// HasCommitInfo returns a boolean if a field has been set.
func (o *StackRevisionListItem) HasCommitInfo() bool {
	if o != nil && o.CommitInfo != nil {
		return true
	}

	return false
}

// SetCommitInfo gets a reference to the given CommitInfo and assigns it to the CommitInfo field.
func (o *StackRevisionListItem) SetCommitInfo(v CommitInfo) {
	o.CommitInfo = &v
}

// GetReleaseId returns the ReleaseId field value if set, zero value otherwise.
func (o *StackRevisionListItem) GetReleaseId() string {
	if o == nil || o.ReleaseId == nil {
		var ret string
		return ret
	}
	return *o.ReleaseId
}

// GetReleaseIdOk returns a tuple with the ReleaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackRevisionListItem) GetReleaseIdOk() (*string, bool) {
	if o == nil || o.ReleaseId == nil {
		return nil, false
	}
	return o.ReleaseId, true
}

// HasReleaseId returns a boolean if a field has been set.
func (o *StackRevisionListItem) HasReleaseId() bool {
	if o != nil && o.ReleaseId != nil {
		return true
	}

	return false
}

// SetReleaseId gets a reference to the given string and assigns it to the ReleaseId field.
func (o *StackRevisionListItem) SetReleaseId(v string) {
	o.ReleaseId = &v
}

func (o StackRevisionListItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Sha != nil {
		toSerialize["sha"] = o.Sha
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.ParentSha != nil {
		toSerialize["parent_sha"] = o.ParentSha
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.CommitInfo != nil {
		toSerialize["commit_info"] = o.CommitInfo
	}
	if o.ReleaseId != nil {
		toSerialize["releaseId"] = o.ReleaseId
	}
	return json.Marshal(toSerialize)
}

type NullableStackRevisionListItem struct {
	value *StackRevisionListItem
	isSet bool
}

func (v NullableStackRevisionListItem) Get() *StackRevisionListItem {
	return v.value
}

func (v *NullableStackRevisionListItem) Set(val *StackRevisionListItem) {
	v.value = val
	v.isSet = true
}

func (v NullableStackRevisionListItem) IsSet() bool {
	return v.isSet
}

func (v *NullableStackRevisionListItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackRevisionListItem(val *StackRevisionListItem) *NullableStackRevisionListItem {
	return &NullableStackRevisionListItem{value: val, isSet: true}
}

func (v NullableStackRevisionListItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackRevisionListItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


