/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// FunctionParameterType the model 'FunctionParameterType'
type FunctionParameterType string

// List of FunctionParameter.Type
const (
	FUNCTIONPARAMETERTYPE_UNKNOWN FunctionParameterType = "UNKNOWN"
	FUNCTIONPARAMETERTYPE_STORE_REF FunctionParameterType = "STORE_REF"
	FUNCTIONPARAMETERTYPE_SECRET_REF FunctionParameterType = "SECRET_REF"
	FUNCTIONPARAMETERTYPE_STRING FunctionParameterType = "STRING"
	FUNCTIONPARAMETERTYPE_NUMBER FunctionParameterType = "NUMBER"
	FUNCTIONPARAMETERTYPE_BOOLEAN FunctionParameterType = "BOOLEAN"
)

var allowedFunctionParameterTypeEnumValues = []FunctionParameterType{
	"UNKNOWN",
	"STORE_REF",
	"SECRET_REF",
	"STRING",
	"NUMBER",
	"BOOLEAN",
}

func (v *FunctionParameterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FunctionParameterType(value)
	for _, existing := range allowedFunctionParameterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FunctionParameterType", value)
}

// NewFunctionParameterTypeFromValue returns a pointer to a valid FunctionParameterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFunctionParameterTypeFromValue(v string) (*FunctionParameterType, error) {
	ev := FunctionParameterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FunctionParameterType: valid values are %v", v, allowedFunctionParameterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FunctionParameterType) IsValid() bool {
	for _, existing := range allowedFunctionParameterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FunctionParameter.Type value
func (v FunctionParameterType) Ptr() *FunctionParameterType {
	return &v
}

type NullableFunctionParameterType struct {
	value *FunctionParameterType
	isSet bool
}

func (v NullableFunctionParameterType) Get() *FunctionParameterType {
	return v.value
}

func (v *NullableFunctionParameterType) Set(val *FunctionParameterType) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionParameterType) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionParameterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionParameterType(val *FunctionParameterType) *NullableFunctionParameterType {
	return &NullableFunctionParameterType{value: val, isSet: true}
}

func (v NullableFunctionParameterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionParameterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

