/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// SubscribeRequest struct for SubscribeRequest
type SubscribeRequest struct {
	Plan *Plan `json:"plan,omitempty"`
}

// NewSubscribeRequest instantiates a new SubscribeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscribeRequest() *SubscribeRequest {
	this := SubscribeRequest{}
	var plan Plan = PLAN_HOBBY
	this.Plan = &plan
	return &this
}

// NewSubscribeRequestWithDefaults instantiates a new SubscribeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscribeRequestWithDefaults() *SubscribeRequest {
	this := SubscribeRequest{}
	var plan Plan = PLAN_HOBBY
	this.Plan = &plan
	return &this
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *SubscribeRequest) GetPlan() Plan {
	if o == nil || o.Plan == nil {
		var ret Plan
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscribeRequest) GetPlanOk() (*Plan, bool) {
	if o == nil || o.Plan == nil {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *SubscribeRequest) HasPlan() bool {
	if o != nil && o.Plan != nil {
		return true
	}

	return false
}

// SetPlan gets a reference to the given Plan and assigns it to the Plan field.
func (o *SubscribeRequest) SetPlan(v Plan) {
	o.Plan = &v
}

func (o SubscribeRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Plan != nil {
		toSerialize["plan"] = o.Plan
	}
	return json.Marshal(toSerialize)
}

type NullableSubscribeRequest struct {
	value *SubscribeRequest
	isSet bool
}

func (v NullableSubscribeRequest) Get() *SubscribeRequest {
	return v.value
}

func (v *NullableSubscribeRequest) Set(val *SubscribeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscribeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscribeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscribeRequest(val *SubscribeRequest) *NullableSubscribeRequest {
	return &NullableSubscribeRequest{value: val, isSet: true}
}

func (v NullableSubscribeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscribeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


