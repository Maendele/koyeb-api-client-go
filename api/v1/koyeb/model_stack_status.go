/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// StackStatus the model 'StackStatus'
type StackStatus string

// List of Stack.Status
const (
	STACKSTATUS_UNKNOWN StackStatus = "UNKNOWN"
	STACKSTATUS_DRAINING StackStatus = "DRAINING"
	STACKSTATUS_PROVISIONING StackStatus = "PROVISIONING"
	STACKSTATUS_ACTIVE StackStatus = "ACTIVE"
	STACKSTATUS_ERROR StackStatus = "ERROR"
	STACKSTATUS_WARNING StackStatus = "WARNING"
	STACKSTATUS_DEPLOYING StackStatus = "DEPLOYING"
)

var allowedStackStatusEnumValues = []StackStatus{
	"UNKNOWN",
	"DRAINING",
	"PROVISIONING",
	"ACTIVE",
	"ERROR",
	"WARNING",
	"DEPLOYING",
}

func (v *StackStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StackStatus(value)
	for _, existing := range allowedStackStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StackStatus", value)
}

// NewStackStatusFromValue returns a pointer to a valid StackStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStackStatusFromValue(v string) (*StackStatus, error) {
	ev := StackStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StackStatus: valid values are %v", v, allowedStackStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StackStatus) IsValid() bool {
	for _, existing := range allowedStackStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Stack.Status value
func (v StackStatus) Ptr() *StackStatus {
	return &v
}

type NullableStackStatus struct {
	value *StackStatus
	isSet bool
}

func (v NullableStackStatus) Get() *StackStatus {
	return v.value
}

func (v *NullableStackStatus) Set(val *StackStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableStackStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStackStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackStatus(val *StackStatus) *NullableStackStatus {
	return &NullableStackStatus{value: val, isSet: true}
}

func (v NullableStackStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

