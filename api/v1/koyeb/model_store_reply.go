/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// StoreReply struct for StoreReply
type StoreReply struct {
	Store *Store `json:"store,omitempty"`
}

// NewStoreReply instantiates a new StoreReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreReply() *StoreReply {
	this := StoreReply{}
	return &this
}

// NewStoreReplyWithDefaults instantiates a new StoreReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreReplyWithDefaults() *StoreReply {
	this := StoreReply{}
	return &this
}

// GetStore returns the Store field value if set, zero value otherwise.
func (o *StoreReply) GetStore() Store {
	if o == nil || o.Store == nil {
		var ret Store
		return ret
	}
	return *o.Store
}

// GetStoreOk returns a tuple with the Store field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreReply) GetStoreOk() (*Store, bool) {
	if o == nil || o.Store == nil {
		return nil, false
	}
	return o.Store, true
}

// HasStore returns a boolean if a field has been set.
func (o *StoreReply) HasStore() bool {
	if o != nil && o.Store != nil {
		return true
	}

	return false
}

// SetStore gets a reference to the given Store and assigns it to the Store field.
func (o *StoreReply) SetStore(v Store) {
	o.Store = &v
}

func (o StoreReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Store != nil {
		toSerialize["store"] = o.Store
	}
	return json.Marshal(toSerialize)
}

type NullableStoreReply struct {
	value *StoreReply
	isSet bool
}

func (v NullableStoreReply) Get() *StoreReply {
	return v.value
}

func (v *NullableStoreReply) Set(val *StoreReply) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreReply) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreReply(val *StoreReply) *NullableStoreReply {
	return &NullableStoreReply{value: val, isSet: true}
}

func (v NullableStoreReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


