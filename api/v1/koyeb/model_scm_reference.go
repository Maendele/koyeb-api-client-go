/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// SCMReference struct for SCMReference
type SCMReference struct {
	Type *SCMReferenceSCMType `json:"type,omitempty"`
	Repo *string `json:"repo,omitempty"`
	Ref *string `json:"ref,omitempty"`
}

// NewSCMReference instantiates a new SCMReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSCMReference() *SCMReference {
	this := SCMReference{}
	var type_ SCMReferenceSCMType = SCMREFERENCESCMTYPE_GITHUB
	this.Type = &type_
	return &this
}

// NewSCMReferenceWithDefaults instantiates a new SCMReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSCMReferenceWithDefaults() *SCMReference {
	this := SCMReference{}
	var type_ SCMReferenceSCMType = SCMREFERENCESCMTYPE_GITHUB
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SCMReference) GetType() SCMReferenceSCMType {
	if o == nil || o.Type == nil {
		var ret SCMReferenceSCMType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCMReference) GetTypeOk() (*SCMReferenceSCMType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SCMReference) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given SCMReferenceSCMType and assigns it to the Type field.
func (o *SCMReference) SetType(v SCMReferenceSCMType) {
	o.Type = &v
}

// GetRepo returns the Repo field value if set, zero value otherwise.
func (o *SCMReference) GetRepo() string {
	if o == nil || o.Repo == nil {
		var ret string
		return ret
	}
	return *o.Repo
}

// GetRepoOk returns a tuple with the Repo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCMReference) GetRepoOk() (*string, bool) {
	if o == nil || o.Repo == nil {
		return nil, false
	}
	return o.Repo, true
}

// HasRepo returns a boolean if a field has been set.
func (o *SCMReference) HasRepo() bool {
	if o != nil && o.Repo != nil {
		return true
	}

	return false
}

// SetRepo gets a reference to the given string and assigns it to the Repo field.
func (o *SCMReference) SetRepo(v string) {
	o.Repo = &v
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *SCMReference) GetRef() string {
	if o == nil || o.Ref == nil {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCMReference) GetRefOk() (*string, bool) {
	if o == nil || o.Ref == nil {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *SCMReference) HasRef() bool {
	if o != nil && o.Ref != nil {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *SCMReference) SetRef(v string) {
	o.Ref = &v
}

func (o SCMReference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Repo != nil {
		toSerialize["repo"] = o.Repo
	}
	if o.Ref != nil {
		toSerialize["ref"] = o.Ref
	}
	return json.Marshal(toSerialize)
}

type NullableSCMReference struct {
	value *SCMReference
	isSet bool
}

func (v NullableSCMReference) Get() *SCMReference {
	return v.value
}

func (v *NullableSCMReference) Set(val *SCMReference) {
	v.value = val
	v.isSet = true
}

func (v NullableSCMReference) IsSet() bool {
	return v.isSet
}

func (v *NullableSCMReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSCMReference(val *SCMReference) *NullableSCMReference {
	return &NullableSCMReference{value: val, isSet: true}
}

func (v NullableSCMReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSCMReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


