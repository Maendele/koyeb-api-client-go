/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// ConnectorUpsert struct for ConnectorUpsert
type ConnectorUpsert struct {
	Name *string `json:"name,omitempty"`
	ChangeUrl *bool `json:"change_url,omitempty"`
	Type *ConnectorType `json:"type,omitempty"`
	With *map[string]interface{} `json:"with,omitempty"`
}

// NewConnectorUpsert instantiates a new ConnectorUpsert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorUpsert() *ConnectorUpsert {
	this := ConnectorUpsert{}
	var type_ ConnectorType = CONNECTORTYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// NewConnectorUpsertWithDefaults instantiates a new ConnectorUpsert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorUpsertWithDefaults() *ConnectorUpsert {
	this := ConnectorUpsert{}
	var type_ ConnectorType = CONNECTORTYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectorUpsert) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorUpsert) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectorUpsert) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectorUpsert) SetName(v string) {
	o.Name = &v
}

// GetChangeUrl returns the ChangeUrl field value if set, zero value otherwise.
func (o *ConnectorUpsert) GetChangeUrl() bool {
	if o == nil || o.ChangeUrl == nil {
		var ret bool
		return ret
	}
	return *o.ChangeUrl
}

// GetChangeUrlOk returns a tuple with the ChangeUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorUpsert) GetChangeUrlOk() (*bool, bool) {
	if o == nil || o.ChangeUrl == nil {
		return nil, false
	}
	return o.ChangeUrl, true
}

// HasChangeUrl returns a boolean if a field has been set.
func (o *ConnectorUpsert) HasChangeUrl() bool {
	if o != nil && o.ChangeUrl != nil {
		return true
	}

	return false
}

// SetChangeUrl gets a reference to the given bool and assigns it to the ChangeUrl field.
func (o *ConnectorUpsert) SetChangeUrl(v bool) {
	o.ChangeUrl = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConnectorUpsert) GetType() ConnectorType {
	if o == nil || o.Type == nil {
		var ret ConnectorType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorUpsert) GetTypeOk() (*ConnectorType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConnectorUpsert) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given ConnectorType and assigns it to the Type field.
func (o *ConnectorUpsert) SetType(v ConnectorType) {
	o.Type = &v
}

// GetWith returns the With field value if set, zero value otherwise.
func (o *ConnectorUpsert) GetWith() map[string]interface{} {
	if o == nil || o.With == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.With
}

// GetWithOk returns a tuple with the With field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorUpsert) GetWithOk() (*map[string]interface{}, bool) {
	if o == nil || o.With == nil {
		return nil, false
	}
	return o.With, true
}

// HasWith returns a boolean if a field has been set.
func (o *ConnectorUpsert) HasWith() bool {
	if o != nil && o.With != nil {
		return true
	}

	return false
}

// SetWith gets a reference to the given map[string]interface{} and assigns it to the With field.
func (o *ConnectorUpsert) SetWith(v map[string]interface{}) {
	o.With = &v
}

func (o ConnectorUpsert) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ChangeUrl != nil {
		toSerialize["change_url"] = o.ChangeUrl
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.With != nil {
		toSerialize["with"] = o.With
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorUpsert struct {
	value *ConnectorUpsert
	isSet bool
}

func (v NullableConnectorUpsert) Get() *ConnectorUpsert {
	return v.value
}

func (v *NullableConnectorUpsert) Set(val *ConnectorUpsert) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorUpsert) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorUpsert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorUpsert(val *ConnectorUpsert) *NullableConnectorUpsert {
	return &NullableConnectorUpsert{value: val, isSet: true}
}

func (v NullableConnectorUpsert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorUpsert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


