/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// Sample struct for Sample
type Sample struct {
	Timestamp *string `json:"timestamp,omitempty"`
	Value *float64 `json:"value,omitempty"`
}

// NewSample instantiates a new Sample object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSample() *Sample {
	this := Sample{}
	return &this
}

// NewSampleWithDefaults instantiates a new Sample object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSampleWithDefaults() *Sample {
	this := Sample{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Sample) GetTimestamp() string {
	if o == nil || isNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sample) GetTimestampOk() (*string, bool) {
	if o == nil || isNil(o.Timestamp) {
    return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Sample) HasTimestamp() bool {
	if o != nil && !isNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *Sample) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Sample) GetValue() float64 {
	if o == nil || isNil(o.Value) {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sample) GetValueOk() (*float64, bool) {
	if o == nil || isNil(o.Value) {
    return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Sample) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *Sample) SetValue(v float64) {
	o.Value = &v
}

func (o Sample) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableSample struct {
	value *Sample
	isSet bool
}

func (v NullableSample) Get() *Sample {
	return v.value
}

func (v *NullableSample) Set(val *Sample) {
	v.value = val
	v.isSet = true
}

func (v NullableSample) IsSet() bool {
	return v.isSet
}

func (v *NullableSample) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSample(val *Sample) *NullableSample {
	return &NullableSample{value: val, isSet: true}
}

func (v NullableSample) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSample) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


